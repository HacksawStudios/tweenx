<haxe>
	<class path="Array" params="T" file="C:\HaxeToolkit\haxe\std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see http://haxe.org/manual/std-Array.html
	@see http://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="C:\HaxeToolkit\haxe\std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see http://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="C:\HaxeToolkit\haxe\std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range).</haxe_doc>
		</getDay>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Enum" params="T" file="C:\HaxeToolkit\haxe\std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see http://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="C:\HaxeToolkit\haxe\std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see http://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="Lambda" params="" file="C:\HaxeToolkit\haxe\std/Lambda.hx">
		<array public="1" params="A" set="method" line="44" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<has public="1" params="A" set="method" line="124" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<count public="1" params="A" set="method" line="217" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see http://haxe.org/manual/std-Lambda.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="Map" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><t path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</t></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.

	@see http://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Map.hx" private="1" module="Map"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="IMap" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="C:\HaxeToolkit\haxe\std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[A special `Float` constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with `NaN` on Windows,
		see <https://bugs.php.net/bug.php?id=42143>]]></haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is
		`POSITIVE_INFINITY`.

		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see http://haxe.org/manual/std-math.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="Reflect" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/Reflect.hx">
		<hasField public="1" set="method" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<getProperty public="1" set="method" line="37" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="47" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<fields public="1" set="method" line="59" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="82" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<deleteField public="1" set="method" line="114" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see http://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/Std.hx">
		<is public="1" set="method" line="26" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.</haxe_doc>
		</is>
		<string public="1" set="method" line="34" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see http://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.  
	`Std.parseFloat` converts a `String` to a `Float`.

	@see http://haxe.org/manual/types-basic-types.html
	@see http://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.  
	`Std.parseInt` converts a `String` to an `Int`.

	@see http://haxe.org/manual/types-basic-types.html
	@see http://haxe.org/manual/std-math-integer-math.html
	@see http://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accept or can return a `null` value, or for the Flash compiler and AS3
	generator to distinguish between base values that can be `null` and others that
	can't.

	@see http://haxe.org/manual/types-nullability.html</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see http://haxe.org/manual/types-bool.html
	@see http://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations.

	@see http://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see http://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see http://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see http://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="C:\HaxeToolkit\haxe\std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.
	
	@see http://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="StringTools" params="" file="C:\HaxeToolkit\haxe\std/StringTools.hx">
		<hex public="1" set="method" line="396" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](http://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Type" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="37" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getClassName public="1" set="method" line="70" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<createEnum public="1" params="T" set="method" line="165" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<enumConstructor public="1" set="method" line="265" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see http://haxe.org/manual/types.html
	@see http://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="C:\HaxeToolkit\haxe\std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see http://haxe.org/manual/types-basic-types.html</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="C:\HaxeToolkit\haxe\std/UInt.hx" private="1" module="UInt"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="flash.events.IEventDispatcher" params="" file="C:\HaxeToolkit\haxe\std/flash/events/IEventDispatcher.hx" extern="1" interface="1">
		<addEventListener public="1" set="method">
			<f a="type:listener:?useCapture:?priority:?useWeakReference" v="::false:0:false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useWeakReference : false, priority : 0, useCapture : false }</e></m></meta>
		</addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?useCapture" v="::false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useCapture : false }</e></m></meta>
		</removeEventListener>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
	</class>
	<class path="flash.events.EventDispatcher" params="" file="C:\HaxeToolkit\haxe\std/flash/events/EventDispatcher.hx" extern="1">
		<implements path="flash.events.IEventDispatcher"/>
		<addEventListener public="1" set="method">
			<f a="type:listener:?useCapture:?priority:?useWeakReference" v="::false:0:false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useWeakReference : false, priority : 0, useCapture : false }</e></m></meta>
		</addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?useCapture" v="::false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useCapture : false }</e></m></meta>
		</removeEventListener>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<new public="1" set="method"><f a="?target">
	<c path="flash.events.IEventDispatcher"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="C:\HaxeToolkit\haxe\std/flash/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="flash.display.DisplayObject" params="" file="C:\HaxeToolkit\haxe\std/flash/display/DisplayObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.display.IBitmapDrawable"/>
		<accessibilityProperties public="1"><c path="flash.accessibility.AccessibilityProperties"/></accessibilityProperties>
		<alpha public="1"><x path="Float"/></alpha>
		<blendMode public="1"><e path="flash.display.BlendMode"/></blendMode>
		<blendShader public="1" get="null">
			<c path="flash.display.Shader"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</blendShader>
		<cacheAsBitmap public="1"><x path="Bool"/></cacheAsBitmap>
		<filters public="1"><c path="Array"><c path="flash.filters.BitmapFilter"/></c></filters>
		<height public="1"><x path="Float"/></height>
		<loaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></loaderInfo>
		<mask public="1"><c path="flash.display.DisplayObject"/></mask>
		<mouseX public="1" set="null"><x path="Float"/></mouseX>
		<mouseY public="1" set="null"><x path="Float"/></mouseY>
		<name public="1"><c path="String"/></name>
		<opaqueBackground public="1"><t path="Null"><x path="UInt"/></t></opaqueBackground>
		<parent public="1" set="null"><c path="flash.display.DisplayObjectContainer"/></parent>
		<root public="1" set="null"><c path="flash.display.DisplayObject"/></root>
		<rotation public="1"><x path="Float"/></rotation>
		<rotationX public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationX>
		<rotationY public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationY>
		<rotationZ public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationZ>
		<scale9Grid public="1"><c path="flash.geom.Rectangle"/></scale9Grid>
		<scaleX public="1"><x path="Float"/></scaleX>
		<scaleY public="1"><x path="Float"/></scaleY>
		<scaleZ public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</scaleZ>
		<scrollRect public="1"><c path="flash.geom.Rectangle"/></scrollRect>
		<stage public="1" set="null"><c path="flash.display.Stage"/></stage>
		<transform public="1"><c path="flash.geom.Transform"/></transform>
		<visible public="1"><x path="Bool"/></visible>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</z>
		<getBounds public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getBounds>
		<getRect public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getRect>
		<globalToLocal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></globalToLocal>
		<globalToLocal3D public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Vector3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</globalToLocal3D>
		<hitTestObject public="1" set="method"><f a="obj">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></hitTestObject>
		<hitTestPoint public="1" set="method">
			<f a="x:y:?shapeFlag" v="::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ shapeFlag : false }</e></m></meta>
		</hitTestPoint>
		<local3DToGlobal public="1" set="method">
			<f a="point3d">
				<c path="flash.geom.Vector3D"/>
				<c path="flash.geom.Point"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</local3DToGlobal>
		<localToGlobal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></localToGlobal>
	</class>
	<class path="flash.display.InteractiveObject" params="" file="C:\HaxeToolkit\haxe\std/flash/display/InteractiveObject.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<accessibilityImplementation public="1"><c path="flash.accessibility.AccessibilityImplementation"/></accessibilityImplementation>
		<contextMenu public="1"><c path="flash.ui.ContextMenu"/></contextMenu>
		<doubleClickEnabled public="1"><x path="Bool"/></doubleClickEnabled>
		<focusRect public="1"><d/></focusRect>
		<mouseEnabled public="1"><x path="Bool"/></mouseEnabled>
		<needsSoftKeyboard public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</needsSoftKeyboard>
		<softKeyboardInputAreaOfInterest public="1">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardInputAreaOfInterest>
		<tabEnabled public="1"><x path="Bool"/></tabEnabled>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<requestSoftKeyboard public="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestSoftKeyboard>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.DisplayObjectContainer" params="" file="C:\HaxeToolkit\haxe\std/flash/display/DisplayObjectContainer.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<mouseChildren public="1"><x path="Bool"/></mouseChildren>
		<numChildren public="1" set="null"><x path="Int"/></numChildren>
		<tabChildren public="1"><x path="Bool"/></tabChildren>
		<textSnapshot public="1" set="null"><c path="flash.text.TextSnapshot"/></textSnapshot>
		<addChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></addChildAt>
		<areInaccessibleObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<contains public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></contains>
		<getChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildAt>
		<getChildByName public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildByName>
		<getChildIndex public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
</f></getChildIndex>
		<getObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="flash.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<removeChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChild>
		<removeChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChildAt>
		<removeChildren public="1" expr="{ endIndex : 2147483647, beginIndex : 0 }">
			<f a="?beginIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ endIndex : 2147483647, beginIndex : 0 }</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</removeChildren>
		<setChildIndex public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setChildIndex>
		<stopAllMovieClips public="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_8</e></m></meta>
		</stopAllMovieClips>
		<swapChildren public="1" set="method"><f a="child1:child2">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></swapChildren>
		<swapChildrenAt public="1" set="method"><f a="index1:index2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swapChildrenAt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.Sprite" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Sprite.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<buttonMode public="1"><x path="Bool"/></buttonMode>
		<dropTarget public="1" set="null"><c path="flash.display.DisplayObject"/></dropTarget>
		<graphics public="1" set="null"><c path="flash.display.Graphics"/></graphics>
		<hitArea public="1"><c path="flash.display.Sprite"/></hitArea>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useHandCursor public="1"><x path="Bool"/></useHandCursor>
		<startDrag public="1" set="method">
			<f a="?lockCenter:?bounds" v="false:">
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ lockCenter : false }</e></m></meta>
		</startDrag>
		<startTouchDrag public="1" expr="{ lockCenter : false }">
			<f a="touchPointID:?lockCenter:?bounds">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ lockCenter : false }</e></m>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</startTouchDrag>
		<stopDrag public="1" set="method"><f a=""><x path="Void"/></f></stopDrag>
		<stopTouchDrag public="1">
			<f a="touchPointID">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</stopTouchDrag>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="flash.display.MovieClip" params="" file="C:\HaxeToolkit\haxe\std/flash/display/MovieClip.hx" extern="1">
		<extends path="flash.display.Sprite"/>
		<currentFrame public="1" set="null"><x path="Int"/></currentFrame>
		<currentFrameLabel public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</currentFrameLabel>
		<currentLabel public="1" set="null"><c path="String"/></currentLabel>
		<currentLabels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></currentLabels>
		<currentScene public="1" set="null"><c path="flash.display.Scene"/></currentScene>
		<enabled public="1"><x path="Bool"/></enabled>
		<framesLoaded public="1" set="null"><x path="Int"/></framesLoaded>
		<isPlaying public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</isPlaying>
		<scenes public="1" set="null"><c path="Array"><c path="flash.display.Scene"/></c></scenes>
		<totalFrames public="1" set="null"><x path="Int"/></totalFrames>
		<trackAsMenu public="1"><x path="Bool"/></trackAsMenu>
		<addFrameScript public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></addFrameScript>
		<gotoAndPlay public="1" set="method"><f a="frame:?scene">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndPlay>
		<gotoAndStop public="1" set="method"><f a="frame:?scene">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndStop>
		<nextFrame public="1" set="method"><f a=""><x path="Void"/></f></nextFrame>
		<nextScene public="1" set="method"><f a=""><x path="Void"/></f></nextScene>
		<play public="1" set="method"><f a=""><x path="Void"/></f></play>
		<prevFrame public="1" set="method"><f a=""><x path="Void"/></f></prevFrame>
		<prevScene public="1" set="method"><f a=""><x path="Void"/></f></prevScene>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Boot" params="" file="C:\HaxeToolkit\haxe\std/flash/Boot.hx">
		<extends path="flash.display.MovieClip"/>
		<tf static="1"><c path="flash.text.TextField"/></tf>
		<lines static="1"><c path="Array"><c path="String"/></c></lines>
		<lastError static="1"><c path="flash.errors.Error"/></lastError>
		<skip_constructor public="1" expr="false" line="52" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</skip_constructor>
		<IN_E expr="0" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</IN_E>
		<enum_to_string public="1" set="method" line="84" static="1"><f a="e">
	<a>
		<tag><c path="String"/></tag>
		<params><c path="Array"><d/></c></params>
	</a>
	<c path="String"/>
</f></enum_to_string>
		<__instanceof public="1" set="method" line="99" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__instanceof>
		<__clear_trace public="1" set="method" line="109" static="1"><f a=""><x path="Void"/></f></__clear_trace>
		<__set_trace_color public="1" set="method" line="117" static="1"><f a="rgb">
	<x path="UInt"/>
	<x path="Void"/>
</f></__set_trace_color>
		<getTrace public="1" set="method" line="123" static="1"><f a=""><c path="flash.text.TextField"/></f></getTrace>
		<__trace public="1" set="method" line="151" static="1"><f a="v:pos">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></__trace>
		<__string_rec public="1" set="method" line="170" static="1">
			<f a="v:str">
				<d/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__string_rec>
		<__unprotect__ set="method" line="215" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unprotect__>
		<mapDynamic public="1" set="method" line="219" static="1">
			<f a="d:f">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</mapDynamic>
		<filterDynamic public="1" set="method" line="227" static="1">
			<f a="d:f">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</filterDynamic>
		<start set="method" line="54">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</start>
		<doInitDelay set="method" line="74"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></doInitDelay>
		<init set="method" line="79"><f a=""><x path="Void"/></f></init>
		<new public="1" set="method" line="46"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="flash._Boot.RealBoot" params="" file="C:\HaxeToolkit\haxe\std/flash/Boot.hx" private="1" module="flash.Boot">
		<extends path="flash.Boot"/>
		<new set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Lib" params="" file="C:\HaxeToolkit\haxe\std/flash/Lib.hx">
		<current public="1" static="1"><c path="flash.display.MovieClip"/></current>
		<haxe_doc>Platform-specific Flash Library. Provides some platform-specific 
	functions for the Flash target.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="flash.Vector" params="T" file="C:\HaxeToolkit\haxe\std/flash/Vector.hx" extern="1">
		<ofArray public="1" params="T" get="inline" set="null" line="47" static="1">
			<f a="v">
				<c path="Array"><c path="ofArray.T"/></c>
				<c path="flash.Vector"><c path="ofArray.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</ofArray>
		<convert public="1" params="T:U" get="inline" set="null" line="51" static="1">
			<f a="v">
				<c path="flash.Vector"><c path="convert.T"/></c>
				<c path="flash.Vector"><c path="convert.U"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</convert>
		<length public="1"><x path="Int"/></length>
		<fixed public="1"><x path="Bool"/></fixed>
		<concat public="1" set="method"><f a="?a">
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></concat>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></pop>
		<push public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></shift>
		<unshift public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Void"/>
</f></unshift>
		<slice public="1" set="method"><f a="?pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></slice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="flash.Vector.T"/>
		<c path="flash.Vector.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></splice>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<indexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<new public="1" set="method"><f a="?length:?fixed">
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Vector class is very similar to Array but is only supported by the Flash Player 10+</haxe_doc>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.accessibility.AccessibilityImplementation" params="" file="C:\HaxeToolkit\haxe\std/flash/accessibility/AccessibilityImplementation.hx" extern="1">
		<errno public="1"><x path="UInt"/></errno>
		<stub public="1"><x path="Bool"/></stub>
		<accDoDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="Void"/>
</f></accDoDefaultAction>
		<accLocation public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<d/>
</f></accLocation>
		<accSelect public="1" set="method"><f a="operation:childID">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></accSelect>
		<getChildIDArray public="1" set="method"><f a=""><c path="Array"><d/></c></f></getChildIDArray>
		<get_accDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accDefaultAction>
		<get_accFocus public="1" set="method"><f a=""><x path="UInt"/></f></get_accFocus>
		<get_accName public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accName>
		<get_accRole public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accRole>
		<get_accSelection public="1" set="method"><f a=""><c path="Array"><d/></c></f></get_accSelection>
		<get_accState public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accState>
		<get_accValue public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accValue>
		<get_selectionActiveIndex public="1" set="method"><f a=""><d/></f></get_selectionActiveIndex>
		<get_selectionAnchorIndex public="1" set="method"><f a=""><d/></f></get_selectionAnchorIndex>
		<isLabeledBy public="1" set="method"><f a="labelBounds">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></isLabeledBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.accessibility.AccessibilityProperties" params="" file="C:\HaxeToolkit\haxe\std/flash/accessibility/AccessibilityProperties.hx" extern="1">
		<description public="1"><c path="String"/></description>
		<forceSimple public="1"><x path="Bool"/></forceSimple>
		<name public="1"><c path="String"/></name>
		<noAutoLabeling public="1"><x path="Bool"/></noAutoLabeling>
		<shortcut public="1"><c path="String"/></shortcut>
		<silent public="1"><x path="Bool"/></silent>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.display.ActionScriptVersion" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ActionScriptVersion.hx">
		<ACTIONSCRIPT2/>
		<ACTIONSCRIPT3/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>UInt</e></m>
		</meta>
	</enum>
	<class path="flash.display.BitmapData" params="" file="C:\HaxeToolkit\haxe\std/flash/display/BitmapData.hx" extern="1">
		<implements path="flash.display.IBitmapDrawable"/>
		<height public="1" set="null"><x path="Int"/></height>
		<rect public="1" set="null"><c path="flash.geom.Rectangle"/></rect>
		<transparent public="1" set="null"><x path="Bool"/></transparent>
		<width public="1" set="null"><x path="Int"/></width>
		<applyFilter public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<x path="Void"/>
</f></applyFilter>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<colorTransform public="1" set="method"><f a="rect:colorTransform">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></colorTransform>
		<compare public="1" set="method"><f a="otherBitmapData">
	<c path="flash.display.BitmapData"/>
	<t path="flash.utils.Object"/>
</f></compare>
		<copyChannel public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></copyChannel>
		<copyPixels public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha" v=":::::false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Point"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mergeAlpha : false }</e></m></meta>
		</copyPixels>
		<copyPixelsToByteArray public="1">
			<f a="rect:data">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyPixelsToByteArray>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<draw public="1" set="method">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing" v=":::::false">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<e path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smoothing : false }</e></m></meta>
		</draw>
		<drawWithQuality public="1" expr="{ smoothing : false }">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing:?quality">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<e path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<e path="flash.display.StageQuality"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ smoothing : false }</e></m>
				<m n=":require"><e>flash11_3</e></m>
			</meta>
		</drawWithQuality>
		<encode public="1">
			<f a="rect:compressor:?byteArray">
				<c path="flash.geom.Rectangle"/>
				<t path="flash.utils.Object"/>
				<c path="flash.utils.ByteArray"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</encode>
		<fillRect public="1" set="method"><f a="rect:color">
	<c path="flash.geom.Rectangle"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></fillRect>
		<floodFill public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></floodFill>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
</f></generateFilterRect>
		<getColorBoundsRect public="1" set="method">
			<f a="mask:color:?findColor" v="::true">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
			</f>
			<meta><m n=":value"><e>{ findColor : true }</e></m></meta>
		</getColorBoundsRect>
		<getPixel public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel>
		<getPixel32 public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel32>
		<getPixels public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></getPixels>
		<getVector public="1" set="method">
			<f a="rect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getVector>
		<histogram public="1" set="method">
			<f a="?hRect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><c path="flash.Vector"><x path="Float"/></c></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</histogram>
		<hitTest public="1" set="method">
			<f a="firstPoint:firstAlphaThreshold:secondObject:?secondBitmapDataPoint:?secondAlphaThreshold" v="::::1">
				<c path="flash.geom.Point"/>
				<x path="UInt"/>
				<t path="flash.utils.Object"/>
				<c path="flash.geom.Point"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ secondAlphaThreshold : 1 }</e></m></meta>
		</hitTest>
		<lock public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<merge public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></merge>
		<noise public="1" set="method">
			<f a="randomSeed:?low:?high:?channelOptions:?grayScale" v=":0:255:7:false">
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ grayScale : false, channelOptions : 7, high : 255, low : 0 }</e></m></meta>
		</noise>
		<paletteMap public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?redArray:?greenArray:?blueArray:?alphaArray">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></paletteMap>
		<perlinNoise public="1" set="method">
			<f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets" v="::::::7:false:">
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<c path="Array"><c path="flash.geom.Point"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ grayScale : false, channelOptions : 7 }</e></m></meta>
		</perlinNoise>
		<pixelDissolve public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:?randomSeed:?numPixels:?fillColor" v=":::0:0:0">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ fillColor : 0, numPixels : 0, randomSeed : 0 }</e></m></meta>
		</pixelDissolve>
		<scroll public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scroll>
		<setPixel public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel32>
		<setPixels public="1" set="method"><f a="rect:inputByteArray">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></setPixels>
		<setVector public="1" set="method">
			<f a="rect:inputVector">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</setVector>
		<threshold public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource" v=":::::0:0xFFFFFFFF:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="String"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":value"><e>{ copySource : false, mask : 0xFFFFFFFF, color : 0 }</e></m></meta>
		</threshold>
		<unlock public="1" set="method"><f a="?changeRect">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></unlock>
		<new public="1" set="method">
			<f a="width:height:?transparent:?fillColor" v="::true:0xFFFFFFFF">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ fillColor : 0xFFFFFFFF, transparent : true }</e></m></meta>
		</new>
	</class>
	<enum path="flash.display.BlendMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display/BlendMode.hx">
		<ADD/>
		<ALPHA/>
		<DARKEN/>
		<DIFFERENCE/>
		<ERASE/>
		<HARDLIGHT/>
		<INVERT/>
		<LAYER/>
		<LIGHTEN/>
		<MULTIPLY/>
		<NORMAL/>
		<OVERLAY/>
		<SCREEN/>
		<SHADER/>
		<SUBTRACT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.CapsStyle" params="" file="C:\HaxeToolkit\haxe\std/flash/display/CapsStyle.hx">
		<NONE/>
		<ROUND/>
		<SQUARE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.ColorCorrection" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ColorCorrection.hx">
		<DEFAULT/>
		<OFF/>
		<ON/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<enum path="flash.display.ColorCorrectionSupport" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ColorCorrectionSupport.hx">
		<DEFAULT_OFF/>
		<DEFAULT_ON/>
		<UNSUPPORTED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<class path="flash.display.FrameLabel" params="" file="C:\HaxeToolkit\haxe\std/flash/display/FrameLabel.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<frame public="1" set="null"><x path="Int"/></frame>
		<name public="1" set="null"><c path="String"/></name>
		<new public="1" set="method"><f a="name:frame">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GradientType" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GradientType.hx">
		<LINEAR/>
		<RADIAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Graphics" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Graphics.hx" extern="1">
		<beginBitmapFill public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth" v="::true:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : false, repeat : true }</e></m></meta>
		</beginBitmapFill>
		<beginFill public="1" set="method">
			<f a="color:?alpha" v=":1">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1 }</e></m></meta>
		</beginFill>
		<beginGradientFill public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio" v=":::::::0">
				<e path="flash.display.GradientType"/>
				<c path="Array"><x path="UInt"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="flash.geom.Matrix"/>
				<e path="flash.display.SpreadMethod"/>
				<e path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ focalPointRatio : 0 }</e></m></meta>
		</beginGradientFill>
		<beginShaderFill public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</beginShaderFill>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<copyFrom public="1" set="method">
			<f a="sourceGraphics">
				<c path="flash.display.Graphics"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</copyFrom>
		<cubicCurveTo public="1">
			<f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</cubicCurveTo>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<drawCircle public="1" set="method"><f a="x:y:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawCircle>
		<drawEllipse public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawEllipse>
		<drawGraphicsData public="1" set="method">
			<f a="graphicsData">
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawGraphicsData>
		<drawPath public="1" set="method">
			<f a="commands:data:?winding">
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<e path="flash.display.GraphicsPathWinding"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawPath>
		<drawRect public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRect>
		<drawRoundRect public="1" set="method">
			<f a="x:y:width:height:ellipseWidth:?ellipseHeight" v=":::::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ellipseHeight : 0 }</e></m></meta>
		</drawRoundRect>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRectComplex>
		<drawTriangles public="1" set="method">
			<f a="vertices:?indices:?uvtData:?culling">
				<c path="flash.Vector"><x path="Float"/></c>
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<e path="flash.display.TriangleCulling"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawTriangles>
		<endFill public="1" set="method"><f a=""><x path="Void"/></f></endFill>
		<lineBitmapStyle public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth" v="::true:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ smooth : false, repeat : true }</e></m>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</lineBitmapStyle>
		<lineGradientStyle public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio" v=":::::::0">
				<e path="flash.display.GradientType"/>
				<c path="Array"><x path="UInt"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="flash.geom.Matrix"/>
				<e path="flash.display.SpreadMethod"/>
				<e path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ focalPointRatio : 0 }</e></m></meta>
		</lineGradientStyle>
		<lineShaderStyle public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineShaderStyle>
		<lineStyle public="1" set="method">
			<f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit" v="0:0:1:false::::3">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
				<e path="flash.display.LineScaleMode"/>
				<e path="flash.display.CapsStyle"/>
				<e path="flash.display.JointStyle"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miterLimit : 3, pixelHinting : false, alpha : 1, color : 0, thickness : 0 }</e></m></meta>
		</lineStyle>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<readGraphicsData public="1" expr="{ recurse : true }">
			<f a="?recurse">
				<x path="Bool"/>
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
			</f>
			<meta>
				<m n=":value"><e>{ recurse : true }</e></m>
				<m n=":require"><e>flash11_6</e></m>
			</meta>
		</readGraphicsData>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GraphicsPathWinding" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GraphicsPathWinding.hx">
		<EVEN_ODD/>
		<NON_ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.IGraphicsData" params="" file="C:\HaxeToolkit\haxe\std/flash/display/IGraphicsData.hx" extern="1" interface="1"/>
	<enum path="flash.display.InterpolationMethod" params="" file="C:\HaxeToolkit\haxe\std/flash/display/InterpolationMethod.hx">
		<LINEAR_RGB/>
		<RGB/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.JointStyle" params="" file="C:\HaxeToolkit\haxe\std/flash/display/JointStyle.hx">
		<BEVEL/>
		<MITER/>
		<ROUND/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.LineScaleMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display/LineScaleMode.hx">
		<HORIZONTAL/>
		<NONE/>
		<NORMAL/>
		<VERTICAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Loader" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Loader.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<contentLoaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></contentLoaderInfo>
		<uncaughtErrorEvents public="1">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<load public="1" set="method"><f a="request:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></load>
		<loadBytes public="1" set="method"><f a="bytes:?context">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></loadBytes>
		<unload public="1" set="method"><f a=""><x path="Void"/></f></unload>
		<unloadAndStop public="1" set="method">
			<f a="?gc" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ gc : true }</e></m>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</unloadAndStop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.LoaderInfo" params="" file="C:\HaxeToolkit\haxe\std/flash/display/LoaderInfo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<getLoaderInfoByDefinition public="1" set="method" static="1"><f a="object">
	<d/>
	<c path="flash.display.LoaderInfo"/>
</f></getLoaderInfoByDefinition>
		<actionScriptVersion public="1" set="null"><e path="flash.display.ActionScriptVersion"/></actionScriptVersion>
		<applicationDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<bytes public="1" set="null"><c path="flash.utils.ByteArray"/></bytes>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><x path="UInt"/></bytesTotal>
		<childAllowsParent public="1" set="null"><x path="Bool"/></childAllowsParent>
		<childSandboxBridge public="1">
			<d/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</childSandboxBridge>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<contentType public="1" set="null"><c path="String"/></contentType>
		<frameRate public="1" set="null"><x path="Float"/></frameRate>
		<height public="1" set="null"><x path="Int"/></height>
		<isURLInaccessible public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isURLInaccessible>
		<loader public="1" set="null"><c path="flash.display.Loader"/></loader>
		<loaderURL public="1" set="null"><c path="String"/></loaderURL>
		<parameters public="1" set="null"><d><c path="String"/></d></parameters>
		<parentAllowsChild public="1" set="null"><x path="Bool"/></parentAllowsChild>
		<parentSandboxBridge public="1">
			<d/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</parentSandboxBridge>
		<sameDomain public="1" set="null"><x path="Bool"/></sameDomain>
		<sharedEvents public="1" set="null"><c path="flash.events.EventDispatcher"/></sharedEvents>
		<swfVersion public="1" set="null"><x path="UInt"/></swfVersion>
		<uncaughtErrorEvents public="1">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<url public="1" set="null"><c path="String"/></url>
		<width public="1" set="null"><x path="Int"/></width>
	</class>
	<class path="flash.display.NativeMenu" params="" file="C:\HaxeToolkit\haxe\std/flash/display/NativeMenu.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.display.Scene" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Scene.hx" extern="1">
		<labels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></labels>
		<name public="1" set="null"><c path="String"/></name>
		<numFrames public="1" set="null"><x path="Int"/></numFrames>
		<new public="1" set="method"><f a="name:labels:numFrames">
	<c path="String"/>
	<c path="Array"><c path="flash.display.FrameLabel"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.Shader" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Shader.hx" extern="1">
		<byteCode public="1" get="null"><c path="flash.utils.ByteArray"/></byteCode>
		<data public="1"><c path="flash.display.ShaderData"/></data>
		<precisionHint public="1"><e path="flash.display.ShaderPrecision"/></precisionHint>
		<new public="1" set="method"><f a="?code">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.display.ShaderData" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ShaderData.hx" extern="1">
		<new public="1" set="method"><f a="byteCode">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.display.ShaderPrecision" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ShaderPrecision.hx">
		<FAST/>
		<FULL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.SpreadMethod" params="" file="C:\HaxeToolkit\haxe\std/flash/display/SpreadMethod.hx">
		<PAD/>
		<REFLECT/>
		<REPEAT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Stage" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Stage.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<align public="1"><e path="flash.display.StageAlign"/></align>
		<allowsFullScreen public="1" set="null"><x path="Bool"/></allowsFullScreen>
		<allowsFullScreenInteractive public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</allowsFullScreenInteractive>
		<browserZoomFactor public="1" set="null"><x path="Float"/></browserZoomFactor>
		<color public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</color>
		<colorCorrection public="1">
			<e path="flash.display.ColorCorrection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrection>
		<colorCorrectionSupport public="1" set="null">
			<e path="flash.display.ColorCorrectionSupport"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrectionSupport>
		<contentsScaleFactor public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</contentsScaleFactor>
		<displayContextInfo public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</displayContextInfo>
		<displayState public="1"><e path="flash.display.StageDisplayState"/></displayState>
		<focus public="1"><c path="flash.display.InteractiveObject"/></focus>
		<frameRate public="1"><x path="Float"/></frameRate>
		<fullScreenHeight public="1" set="null"><x path="UInt"/></fullScreenHeight>
		<fullScreenSourceRect public="1"><c path="flash.geom.Rectangle"/></fullScreenSourceRect>
		<fullScreenWidth public="1" set="null"><x path="UInt"/></fullScreenWidth>
		<mouseLock public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</mouseLock>
		<quality public="1"><e path="flash.display.StageQuality"/></quality>
		<scaleMode public="1"><e path="flash.display.StageScaleMode"/></scaleMode>
		<showDefaultContextMenu public="1"><x path="Bool"/></showDefaultContextMenu>
		<softKeyboardRect public="1">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardRect>
		<stage3Ds public="1">
			<c path="flash.Vector"><c path="flash.display.Stage3D"/></c>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</stage3Ds>
		<stageFocusRect public="1"><x path="Bool"/></stageFocusRect>
		<stageHeight public="1"><x path="Int"/></stageHeight>
		<stageVideos public="1">
			<c path="flash.Vector"><c path="flash.media.StageVideo"/></c>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</stageVideos>
		<stageWidth public="1"><x path="Int"/></stageWidth>
		<wmodeGPU public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</wmodeGPU>
		<invalidate public="1" set="method"><f a=""><x path="Void"/></f></invalidate>
		<isFocusInaccessible public="1" set="method"><f a=""><x path="Bool"/></f></isFocusInaccessible>
	</class>
	<class path="flash.display.Stage3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Stage3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<context3D public="1" set="null"><c path="flash.display3D.Context3D"/></context3D>
		<visible public="1"><x path="Bool"/></visible>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<requestContext3D public="1" set="method"><f a="?context3DRenderMode:?profile">
	<c path="String"/>
	<e path="flash.display3D.Context3DProfile"/>
	<x path="Void"/>
</f></requestContext3D>
		<requestContext3DMatchingProfiles public="1">
			<f a="profiles">
				<c path="flash.Vector"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash12</e></m></meta>
		</requestContext3DMatchingProfiles>
		<meta><m n=":require"><e>flash11</e></m></meta>
	</class>
	<enum path="flash.display.StageAlign" params="" file="C:\HaxeToolkit\haxe\std/flash/display/StageAlign.hx">
		<BOTTOM/>
		<BOTTOM_LEFT/>
		<BOTTOM_RIGHT/>
		<LEFT/>
		<RIGHT/>
		<TOP/>
		<TOP_LEFT/>
		<TOP_RIGHT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageDisplayState" params="" file="C:\HaxeToolkit\haxe\std/flash/display/StageDisplayState.hx">
		<FULL_SCREEN/>
		<FULL_SCREEN_INTERACTIVE/>
		<NORMAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageQuality" params="" file="C:\HaxeToolkit\haxe\std/flash/display/StageQuality.hx">
		<BEST/>
		<HIGH/>
		<HIGH_16X16/>
		<HIGH_16X16_LINEAR/>
		<HIGH_8X8/>
		<HIGH_8X8_LINEAR/>
		<LOW/>
		<MEDIUM/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageScaleMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display/StageScaleMode.hx">
		<EXACT_FIT/>
		<NO_BORDER/>
		<NO_SCALE/>
		<SHOW_ALL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.TriangleCulling" params="" file="C:\HaxeToolkit\haxe\std/flash/display/TriangleCulling.hx">
		<NEGATIVE/>
		<NONE/>
		<POSITIVE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display3D.Context3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<supportsVideoTexture public="1" set="null" static="1"><x path="Bool"/></supportsVideoTexture>
		<backBufferHeight public="1" set="null"><x path="Int"/></backBufferHeight>
		<backBufferWidth public="1" set="null"><x path="Int"/></backBufferWidth>
		<driverInfo public="1" set="null"><c path="String"/></driverInfo>
		<enableErrorChecking public="1"><x path="Bool"/></enableErrorChecking>
		<maxBackBufferHeight public="1"><x path="Int"/></maxBackBufferHeight>
		<maxBackBufferWidth public="1"><x path="Int"/></maxBackBufferWidth>
		<profile public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash12</e></m></meta>
		</profile>
		<totalGPUMemory public="1" set="null"><x path="Float"/></totalGPUMemory>
		<clear public="1" set="method">
			<f a="?red:?green:?blue:?alpha:?depth:?stencil:?mask" v="0:0:0:1:1:0:0xFFFFFFFF">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mask : 0xFFFFFFFF, stencil : 0, depth : 1, alpha : 1, blue : 0, green : 0, red : 0 }</e></m></meta>
		</clear>
		<configureBackBuffer public="1" set="method">
			<f a="width:height:antiAlias:?enableDepthAndStencil:?wantsBestResolution:?wantsBestResolutionOnBrowserZoom" v=":::true:false:false">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ wantsBestResolutionOnBrowserZoom : false, wantsBestResolution : false, enableDepthAndStencil : true }</e></m></meta>
		</configureBackBuffer>
		<createCubeTexture public="1" set="method">
			<f a="size:format:optimizeForRenderToTexture:?streamingLevels" v=":::0">
				<x path="Int"/>
				<e path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="flash.display3D.textures.CubeTexture"/>
			</f>
			<meta><m n=":value"><e>{ streamingLevels : 0 }</e></m></meta>
		</createCubeTexture>
		<createIndexBuffer public="1" set="method"><f a="numIndices:?bufferUsage">
	<x path="Int"/>
	<e path="flash.display3D.Context3DBufferUsage"/>
	<c path="flash.display3D.IndexBuffer3D"/>
</f></createIndexBuffer>
		<createProgram public="1" set="method"><f a=""><c path="flash.display3D.Program3D"/></f></createProgram>
		<createRectangleTexture public="1">
			<f a="width:height:format:optimizeForRenderToTexture">
				<x path="Int"/>
				<x path="Int"/>
				<e path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<c path="flash.display3D.textures.RectangleTexture"/>
			</f>
			<meta><m n=":require"><e>flash11_8</e></m></meta>
		</createRectangleTexture>
		<createTexture public="1" set="method">
			<f a="width:height:format:optimizeForRenderToTexture:?streamingLevels" v="::::0">
				<x path="Int"/>
				<x path="Int"/>
				<e path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="flash.display3D.textures.Texture"/>
			</f>
			<meta><m n=":value"><e>{ streamingLevels : 0 }</e></m></meta>
		</createTexture>
		<createVertexBuffer public="1" set="method"><f a="numVertices:data32PerVertex:?bufferUsage">
	<x path="Int"/>
	<x path="Int"/>
	<e path="flash.display3D.Context3DBufferUsage"/>
	<c path="flash.display3D.VertexBuffer3D"/>
</f></createVertexBuffer>
		<createVideoTexture public="1" set="method"><f a=""><c path="flash.display3D.textures.VideoTexture"/></f></createVideoTexture>
		<dispose public="1" set="method">
			<f a="?recreate" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ recreate : true }</e></m></meta>
		</dispose>
		<drawToBitmapData public="1" set="method"><f a="destination">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></drawToBitmapData>
		<drawTriangles public="1" set="method">
			<f a="indexBuffer:?firstIndex:?numTriangles" v=":0:-1">
				<c path="flash.display3D.IndexBuffer3D"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ numTriangles : -1, firstIndex : 0 }</e></m></meta>
		</drawTriangles>
		<present public="1" set="method"><f a=""><x path="Void"/></f></present>
		<setBlendFactors public="1" set="method"><f a="sourceFactor:destinationFactor">
	<e path="flash.display3D.Context3DBlendFactor"/>
	<e path="flash.display3D.Context3DBlendFactor"/>
	<x path="Void"/>
</f></setBlendFactors>
		<setColorMask public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setColorMask>
		<setCulling public="1" set="method"><f a="triangleFaceToCull">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<x path="Void"/>
</f></setCulling>
		<setDepthTest public="1" set="method"><f a="depthMask:passCompareMode">
	<x path="Bool"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<x path="Void"/>
</f></setDepthTest>
		<setProgram public="1" set="method"><f a="program">
	<c path="flash.display3D.Program3D"/>
	<x path="Void"/>
</f></setProgram>
		<setProgramConstantsFromByteArray public="1">
			<f a="programType:firstRegister:numRegisters:data:byteArrayOffset">
				<e path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</setProgramConstantsFromByteArray>
		<setProgramConstantsFromMatrix public="1" set="method">
			<f a="programType:firstRegister:matrix:?transposedMatrix" v=":::false">
				<e path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<c path="flash.geom.Matrix3D"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ transposedMatrix : false }</e></m></meta>
		</setProgramConstantsFromMatrix>
		<setProgramConstantsFromVector public="1" set="method">
			<f a="programType:firstRegister:data:?numRegisters" v=":::-1">
				<e path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ numRegisters : -1 }</e></m></meta>
		</setProgramConstantsFromVector>
		<setRenderToBackBuffer public="1" set="method"><f a=""><x path="Void"/></f></setRenderToBackBuffer>
		<setRenderToTexture public="1" set="method">
			<f a="texture:?enableDepthAndStencil:?antiAlias:?surfaceSelector:?colorOutputIndex" v=":false:0:0:0">
				<c path="flash.display3D.textures.TextureBase"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ colorOutputIndex : 0, surfaceSelector : 0, antiAlias : 0, enableDepthAndStencil : false }</e></m></meta>
		</setRenderToTexture>
		<setSamplerStateAt public="1">
			<f a="sampler:wrap:filter:mipfilter">
				<x path="Int"/>
				<e path="flash.display3D.Context3DWrapMode"/>
				<e path="flash.display3D.Context3DTextureFilter"/>
				<e path="flash.display3D.Context3DMipFilter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_6</e></m></meta>
		</setSamplerStateAt>
		<setScissorRectangle public="1" set="method"><f a="rectangle">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></setScissorRectangle>
		<setStencilActions public="1" set="method"><f a="?triangleFace:?compareMode:?actionOnBothPass:?actionOnDepthFail:?actionOnDepthPassStencilFail">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<x path="Void"/>
</f></setStencilActions>
		<setStencilReferenceValue public="1" set="method">
			<f a="referenceValue:?readMask:?writeMask" v=":255:255">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ writeMask : 255, readMask : 255 }</e></m></meta>
		</setStencilReferenceValue>
		<setTextureAt public="1" set="method"><f a="sampler:texture">
	<x path="Int"/>
	<c path="flash.display3D.textures.TextureBase"/>
	<x path="Void"/>
</f></setTextureAt>
		<setVertexBufferAt public="1" set="method">
			<f a="index:buffer:?bufferOffset:?format" v="::0:">
				<x path="Int"/>
				<c path="flash.display3D.VertexBuffer3D"/>
				<x path="Int"/>
				<e path="flash.display3D.Context3DVertexBufferFormat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ bufferOffset : 0 }</e></m></meta>
		</setVertexBufferAt>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display3D.Context3DBlendFactor" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DBlendFactor.hx">
		<DESTINATION_ALPHA/>
		<DESTINATION_COLOR/>
		<ONE/>
		<ONE_MINUS_DESTINATION_ALPHA/>
		<ONE_MINUS_DESTINATION_COLOR/>
		<ONE_MINUS_SOURCE_ALPHA/>
		<ONE_MINUS_SOURCE_COLOR/>
		<SOURCE_ALPHA/>
		<SOURCE_COLOR/>
		<ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DBufferUsage" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DBufferUsage.hx">
		<DYNAMIC_DRAW/>
		<STATIC_DRAW/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash12</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DCompareMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DCompareMode.hx">
		<ALWAYS/>
		<EQUAL/>
		<GREATER/>
		<GREATER_EQUAL/>
		<LESS/>
		<LESS_EQUAL/>
		<NEVER/>
		<NOT_EQUAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DMipFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DMipFilter.hx">
		<MIPLINEAR/>
		<MIPNEAREST/>
		<MIPNONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DProfile" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DProfile.hx">
		<BASELINE/>
		<BASELINE_CONSTRAINED/>
		<BASELINE_EXTENDED/>
		<STANDARD/>
		<STANDARD_CONSTRAINED/>
		<STANDARD_EXTENDED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DProgramType" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DProgramType.hx">
		<FRAGMENT/>
		<VERTEX/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DStencilAction" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DStencilAction.hx">
		<DECREMENT_SATURATE/>
		<DECREMENT_WRAP/>
		<INCREMENT_SATURATE/>
		<INCREMENT_WRAP/>
		<INVERT/>
		<KEEP/>
		<SET/>
		<ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DTextureFilter.hx">
		<ANISOTROPIC16X/>
		<ANISOTROPIC2X/>
		<ANISOTROPIC4X/>
		<ANISOTROPIC8X/>
		<LINEAR/>
		<NEAREST/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFormat" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DTextureFormat.hx">
		<BGRA/>
		<BGRA_PACKED/>
		<BGR_PACKED/>
		<COMPRESSED/>
		<COMPRESSED_ALPHA/>
		<RGBA_HALF_FLOAT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTriangleFace" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DTriangleFace.hx">
		<BACK/>
		<FRONT/>
		<FRONT_AND_BACK/>
		<NONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DVertexBufferFormat" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DVertexBufferFormat.hx">
		<BYTES_4/>
		<FLOAT_1/>
		<FLOAT_2/>
		<FLOAT_3/>
		<FLOAT_4/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DWrapMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DWrapMode.hx">
		<CLAMP/>
		<CLAMP_U_REPEAT_V/>
		<REPEAT/>
		<REPEAT_U_CLAMP_V/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display3D.IndexBuffer3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/IndexBuffer3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startOffset:count">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startOffset:count">
	<c path="flash.Vector"><x path="UInt"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.Program3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Program3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<upload public="1" set="method"><f a="vertexProgram:fragmentProgram">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></upload>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.VertexBuffer3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/VertexBuffer3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startVertex:numVertices">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startVertex:numVertices">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
	</class>
	<class path="flash.display3D.textures.TextureBase" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/textures/TextureBase.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
	</class>
	<class path="flash.display3D.textures.CubeTexture" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/textures/CubeTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?async" v="::false">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ async : false }</e></m></meta>
		</uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method">
			<f a="source:side:?miplevel" v="::0">
				<c path="flash.display.BitmapData"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:side:?miplevel" v=":::0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.RectangleTexture" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/textures/RectangleTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadFromBitmapData public="1" set="method"><f a="source">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.Texture" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/textures/Texture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?async" v="::false">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ async : false }</e></m></meta>
		</uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method">
			<f a="source:?miplevel" v=":0">
				<c path="flash.display.BitmapData"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?miplevel" v="::0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.VideoTexture" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/textures/VideoTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<videoHeight public="1" set="null"><x path="Int"/></videoHeight>
		<videoWidth public="1" set="null"><x path="Int"/></videoWidth>
		<attachCamera public="1" set="method"><f a="theCamera">
	<c path="flash.media.Camera"/>
	<x path="Void"/>
</f></attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.errors.Error" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/Error.hx" extern="1">
		<length public="1" set="null" static="1"><x path="Int"/></length>
		<getErrorMessage public="1" set="method" static="1"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></getErrorMessage>
		<throwError public="1" set="method" static="1"><f a="type:index:?p1:?p2:?p3:?p4:?p5">
	<x path="Class"><d/></x>
	<x path="UInt"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></throwError>
		<errorID public="1" set="null"><x path="Int"/></errorID>
		<message public="1"><d/></message>
		<name public="1"><d/></name>
		<getStackTrace public="1" set="method"><f a=""><c path="String"/></f></getStackTrace>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ id : 0 }</e></m></meta>
		</new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.events.Event" params="" file="C:\HaxeToolkit\haxe\std/flash/events/Event.hx" extern="1">
		<ACTIVATE public="1" set="null" static="1"><c path="String"/></ACTIVATE>
		<ADDED public="1" set="null" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE public="1" set="null" static="1"><c path="String"/></ADDED_TO_STAGE>
		<BROWSER_ZOOM_CHANGE public="1" set="null" static="1"><c path="String"/></BROWSER_ZOOM_CHANGE>
		<CANCEL public="1" set="null" static="1"><c path="String"/></CANCEL>
		<CHANGE public="1" set="null" static="1"><c path="String"/></CHANGE>
		<CHANNEL_MESSAGE public="1" set="null" static="1"><c path="String"/></CHANNEL_MESSAGE>
		<CHANNEL_STATE public="1" set="null" static="1"><c path="String"/></CHANNEL_STATE>
		<CLEAR public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CLEAR>
		<CLOSE public="1" set="null" static="1"><c path="String"/></CLOSE>
		<COMPLETE public="1" set="null" static="1"><c path="String"/></COMPLETE>
		<CONNECT public="1" set="null" static="1"><c path="String"/></CONNECT>
		<CONTEXT3D_CREATE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</CONTEXT3D_CREATE>
		<COPY public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</COPY>
		<CUT public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CUT>
		<DEACTIVATE public="1" set="null" static="1"><c path="String"/></DEACTIVATE>
		<ENTER_FRAME public="1" set="null" static="1"><c path="String"/></ENTER_FRAME>
		<EXIT_FRAME public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</EXIT_FRAME>
		<FRAME_CONSTRUCTED public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</FRAME_CONSTRUCTED>
		<FRAME_LABEL public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</FRAME_LABEL>
		<FULLSCREEN public="1" set="null" static="1"><c path="String"/></FULLSCREEN>
		<ID3 public="1" set="null" static="1"><c path="String"/></ID3>
		<INIT public="1" set="null" static="1"><c path="String"/></INIT>
		<MOUSE_LEAVE public="1" set="null" static="1"><c path="String"/></MOUSE_LEAVE>
		<OPEN public="1" set="null" static="1"><c path="String"/></OPEN>
		<PASTE public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</PASTE>
		<REMOVED public="1" set="null" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE public="1" set="null" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<RENDER public="1" set="null" static="1"><c path="String"/></RENDER>
		<RESIZE public="1" set="null" static="1"><c path="String"/></RESIZE>
		<SCROLL public="1" set="null" static="1"><c path="String"/></SCROLL>
		<SELECT public="1" set="null" static="1"><c path="String"/></SELECT>
		<SELECT_ALL public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</SELECT_ALL>
		<SOUND_COMPLETE public="1" set="null" static="1"><c path="String"/></SOUND_COMPLETE>
		<SUSPEND public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</SUSPEND>
		<TAB_CHILDREN_CHANGE public="1" set="null" static="1"><c path="String"/></TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" set="null" static="1"><c path="String"/></TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" set="null" static="1"><c path="String"/></TAB_INDEX_CHANGE>
		<TEXTURE_READY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</TEXTURE_READY>
		<TEXT_INTERACTION_MODE_CHANGE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</TEXT_INTERACTION_MODE_CHANGE>
		<UNLOAD public="1" set="null" static="1"><c path="String"/></UNLOAD>
		<VIDEO_FRAME public="1" set="null" static="1"><c path="String"/></VIDEO_FRAME>
		<WORKER_STATE public="1" set="null" static="1"><c path="String"/></WORKER_STATE>
		<bubbles public="1" set="null"><x path="Bool"/></bubbles>
		<cancelable public="1" set="null"><x path="Bool"/></cancelable>
		<currentTarget public="1" set="null"><d/></currentTarget>
		<eventPhase public="1" set="null"><e path="flash.events.EventPhase"/></eventPhase>
		<target public="1" set="null"><d/></target>
		<type public="1" set="null"><c path="String"/></type>
		<clone public="1" set="method"><f a=""><c path="flash.events.Event"/></f></clone>
		<formatToString public="1" set="method"><f a="className:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></formatToString>
		<isDefaultPrevented public="1" set="method"><f a=""><x path="Bool"/></f></isDefaultPrevented>
		<preventDefault public="1" set="method"><f a=""><x path="Void"/></f></preventDefault>
		<stopImmediatePropagation public="1" set="method"><f a=""><x path="Void"/></f></stopImmediatePropagation>
		<stopPropagation public="1" set="method"><f a=""><x path="Void"/></f></stopPropagation>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable" v=":false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="flash.events.EventPhase" params="" file="C:\HaxeToolkit\haxe\std/flash/events/EventPhase.hx">
		<AT_TARGET/>
		<BUBBLING_PHASE/>
		<CAPTURING_PHASE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>UInt</e></m>
		</meta>
	</enum>
	<class path="flash.events.UncaughtErrorEvents" params="" file="C:\HaxeToolkit\haxe\std/flash/events/UncaughtErrorEvents.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.external.ExternalInterface" params="" file="C:\HaxeToolkit\haxe\std/flash/external/ExternalInterface.hx" extern="1">
		<available public="1" set="null" static="1"><x path="Bool"/></available>
		<marshallExceptions public="1" static="1"><x path="Bool"/></marshallExceptions>
		<objectID public="1" set="null" static="1"><c path="String"/></objectID>
		<addCallback public="1" set="method" static="1"><f a="functionName:closure">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></addCallback>
		<call public="1" set="method" static="1"><f a="functionName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></call>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/ColorTransform.hx" extern="1">
		<alphaMultiplier public="1"><x path="Float"/></alphaMultiplier>
		<alphaOffset public="1"><x path="Float"/></alphaOffset>
		<blueMultiplier public="1"><x path="Float"/></blueMultiplier>
		<blueOffset public="1"><x path="Float"/></blueOffset>
		<color public="1"><x path="UInt"/></color>
		<greenMultiplier public="1"><x path="Float"/></greenMultiplier>
		<greenOffset public="1"><x path="Float"/></greenOffset>
		<redMultiplier public="1"><x path="Float"/></redMultiplier>
		<redOffset public="1"><x path="Float"/></redOffset>
		<concat public="1" set="method"><f a="second">
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></concat>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset" v="1:1:1:1:0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alphaOffset : 0, blueOffset : 0, greenOffset : 0, redOffset : 0, alphaMultiplier : 1, blueMultiplier : 1, greenMultiplier : 1, redMultiplier : 1 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Matrix" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Matrix.hx" extern="1">
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<tx public="1"><x path="Float"/></tx>
		<ty public="1"><x path="Float"/></ty>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></concat>
		<copyColumnFrom public="1">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1">
			<f a="sourceMatrix">
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRowFrom public="1">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<createBox public="1" set="method">
			<f a="scaleX:scaleY:?rotation:?tx:?ty" v="::0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, rotation : 0 }</e></m></meta>
		</createBox>
		<createGradientBox public="1" set="method">
			<f a="width:height:?rotation:?tx:?ty" v="::0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, rotation : 0 }</e></m></meta>
		</createGradientBox>
		<deltaTransformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></deltaTransformPoint>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<invert public="1" set="method"><f a=""><x path="Void"/></f></invert>
		<rotate public="1" set="method"><f a="angle">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<scale public="1" set="method"><f a="sx:sy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<setTo public="1">
			<f a="aa:ba:ca:da:txa:tya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<transformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></transformPoint>
		<translate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<new public="1" set="method">
			<f a="?a:?b:?c:?d:?tx:?ty" v="1:0:0:1:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, d : 1, c : 0, b : 0, a : 1 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Matrix3D" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Matrix3D.hx" extern="1">
		<interpolate public="1" set="method" static="1"><f a="thisMat:toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<c path="flash.geom.Matrix3D"/>
</f></interpolate>
		<determinant public="1" set="null"><x path="Float"/></determinant>
		<position public="1"><c path="flash.geom.Vector3D"/></position>
		<rawData public="1"><c path="flash.Vector"><x path="Float"/></c></rawData>
		<append public="1" set="method"><f a="lhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></append>
		<appendRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></appendRotation>
		<appendScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendScale>
		<appendTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendTranslation>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></clone>
		<copyColumnFrom public="1">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1">
			<f a="sourceMatrix3D">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRawDataFrom public="1" expr="{ transpose : false, index : 0 }">
			<f a="vector:?index:?transpose">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ transpose : false, index : 0 }</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</copyRawDataFrom>
		<copyRawDataTo public="1" expr="{ transpose : false, index : 0 }">
			<f a="vector:?index:?transpose">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ transpose : false, index : 0 }</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</copyRawDataTo>
		<copyRowFrom public="1">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyToMatrix3D public="1">
			<f a="dest">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyToMatrix3D>
		<decompose public="1" set="method"><f a="?orientationStyle">
	<e path="flash.geom.Orientation3D"/>
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
</f></decompose>
		<deltaTransformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></deltaTransformVector>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<interpolateTo public="1" set="method"><f a="toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<x path="Void"/>
</f></interpolateTo>
		<invert public="1" set="method"><f a=""><x path="Bool"/></f></invert>
		<pointAt public="1" set="method"><f a="pos:?at:?up">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></pointAt>
		<prepend public="1" set="method"><f a="rhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></prepend>
		<prependRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></prependRotation>
		<prependScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependScale>
		<prependTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependTranslation>
		<recompose public="1" set="method"><f a="components:?orientationStyle">
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
	<e path="flash.geom.Orientation3D"/>
	<x path="Bool"/>
</f></recompose>
		<transformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></transformVector>
		<transformVectors public="1" set="method"><f a="vin:vout">
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></transformVectors>
		<transpose public="1" set="method"><f a=""><x path="Void"/></f></transpose>
		<new public="1" set="method"><f a="?v">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<enum path="flash.geom.Orientation3D" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Orientation3D.hx">
		<AXIS_ANGLE/>
		<EULER_ANGLES/>
		<QUATERNION/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.geom.PerspectiveProjection" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/PerspectiveProjection.hx" extern="1">
		<fieldOfView public="1"><x path="Float"/></fieldOfView>
		<focalLength public="1"><x path="Float"/></focalLength>
		<projectionCenter public="1"><c path="flash.geom.Point"/></projectionCenter>
		<toMatrix3D public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></toMatrix3D>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.geom.Point" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
</f></distance>
		<interpolate public="1" set="method" static="1"><f a="pt1:pt2:f">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" static="1"><f a="len:angle">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></polar>
		<length public="1" set="null"><x path="Float"/></length>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<add public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"/></f></clone>
		<copyFrom public="1">
			<f a="sourcePoint">
				<c path="flash.geom.Point"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></equals>
		<normalize public="1" set="method"><f a="thickness">
	<x path="Float"/>
	<x path="Void"/>
</f></normalize>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<setTo public="1">
			<f a="xa:ya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?x:?y" v="0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Rectangle" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Rectangle.hx" extern="1">
		<bottom public="1"><x path="Float"/></bottom>
		<bottomRight public="1"><c path="flash.geom.Point"/></bottomRight>
		<height public="1"><x path="Float"/></height>
		<left public="1"><x path="Float"/></left>
		<right public="1"><x path="Float"/></right>
		<size public="1"><c path="flash.geom.Point"/></size>
		<top public="1"><x path="Float"/></top>
		<topLeft public="1"><c path="flash.geom.Point"/></topLeft>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"/></f></clone>
		<contains public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></contains>
		<containsPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></containsPoint>
		<containsRect public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></containsRect>
		<copyFrom public="1">
			<f a="sourceRect">
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></equals>
		<inflate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></inflate>
		<inflatePoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></inflatePoint>
		<intersection public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></intersection>
		<intersects public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></intersects>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<offsetPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></offsetPoint>
		<setEmpty public="1" set="method"><f a=""><x path="Void"/></f></setEmpty>
		<setTo public="1">
			<f a="xa:ya:widtha:heighta">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<union public="1" set="method"><f a="toUnion">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></union>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0, width : 0, y : 0, x : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Transform" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Transform.hx" extern="1">
		<colorTransform public="1"><c path="flash.geom.ColorTransform"/></colorTransform>
		<concatenatedColorTransform public="1" set="null"><c path="flash.geom.ColorTransform"/></concatenatedColorTransform>
		<concatenatedMatrix public="1" set="null"><c path="flash.geom.Matrix"/></concatenatedMatrix>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<matrix3D public="1">
			<c path="flash.geom.Matrix3D"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</matrix3D>
		<perspectiveProjection public="1">
			<c path="flash.geom.PerspectiveProjection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</perspectiveProjection>
		<pixelBounds public="1" set="null"><c path="flash.geom.Rectangle"/></pixelBounds>
		<getRelativeMatrix3D public="1" set="method">
			<f a="relativeTo">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.geom.Matrix3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getRelativeMatrix3D>
		<new public="1" set="method"><f a="displayObject">
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Vector3D" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Vector3D.hx" extern="1">
		<X_AXIS public="1" set="null" static="1"><c path="flash.geom.Vector3D"/></X_AXIS>
		<Y_AXIS public="1" set="null" static="1"><c path="flash.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS public="1" set="null" static="1"><c path="flash.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" set="method" static="1"><f a="a:b">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></angleBetween>
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></distance>
		<length public="1" set="null"><x path="Float"/></length>
		<lengthSquared public="1" set="null"><x path="Float"/></lengthSquared>
		<w public="1"><x path="Float"/></w>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<add public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<copyFrom public="1">
			<f a="sourceVector3D">
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<crossProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></decrementBy>
		<dotProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></dotProduct>
		<equals public="1" set="method">
			<f a="toCompare:?allFour" v=":false">
				<c path="flash.geom.Vector3D"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allFour : false }</e></m></meta>
		</equals>
		<incrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></incrementBy>
		<nearEquals public="1" set="method">
			<f a="toCompare:tolerance:?allFour" v="::false">
				<c path="flash.geom.Vector3D"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allFour : false }</e></m></meta>
		</nearEquals>
		<negate public="1" set="method"><f a=""><x path="Void"/></f></negate>
		<normalize public="1" set="method"><f a=""><x path="Float"/></f></normalize>
		<project public="1" set="method"><f a=""><x path="Void"/></f></project>
		<scaleBy public="1" set="method"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></scaleBy>
		<setTo public="1">
			<f a="xa:ya:za">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?x:?y:?z:?w" v="0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 0, z : 0, y : 0, x : 0 }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.media.AVCaptionStyle" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVCaptionStyle.hx" extern="1">
		<BLACK public="1" set="null" static="1"><c path="String"/></BLACK>
		<BLUE public="1" set="null" static="1"><c path="String"/></BLUE>
		<BRIGHT_BLUE public="1" set="null" static="1"><c path="String"/></BRIGHT_BLUE>
		<BRIGHT_CYAN public="1" set="null" static="1"><c path="String"/></BRIGHT_CYAN>
		<BRIGHT_GREEN public="1" set="null" static="1"><c path="String"/></BRIGHT_GREEN>
		<BRIGHT_MAGENTA public="1" set="null" static="1"><c path="String"/></BRIGHT_MAGENTA>
		<BRIGHT_RED public="1" set="null" static="1"><c path="String"/></BRIGHT_RED>
		<BRIGHT_WHITE public="1" set="null" static="1"><c path="String"/></BRIGHT_WHITE>
		<BRIGHT_YELLOW public="1" set="null" static="1"><c path="String"/></BRIGHT_YELLOW>
		<CASUAL public="1" set="null" static="1"><c path="String"/></CASUAL>
		<CURSIVE public="1" set="null" static="1"><c path="String"/></CURSIVE>
		<CYAN public="1" set="null" static="1"><c path="String"/></CYAN>
		<DARK_BLUE public="1" set="null" static="1"><c path="String"/></DARK_BLUE>
		<DARK_CYAN public="1" set="null" static="1"><c path="String"/></DARK_CYAN>
		<DARK_GREEN public="1" set="null" static="1"><c path="String"/></DARK_GREEN>
		<DARK_MAGENTA public="1" set="null" static="1"><c path="String"/></DARK_MAGENTA>
		<DARK_RED public="1" set="null" static="1"><c path="String"/></DARK_RED>
		<DARK_YELLOW public="1" set="null" static="1"><c path="String"/></DARK_YELLOW>
		<DEFAULT public="1" set="null" static="1"><c path="String"/></DEFAULT>
		<DEPRESSED public="1" set="null" static="1"><c path="String"/></DEPRESSED>
		<GRAY public="1" set="null" static="1"><c path="String"/></GRAY>
		<GREEN public="1" set="null" static="1"><c path="String"/></GREEN>
		<LARGE public="1" set="null" static="1"><c path="String"/></LARGE>
		<LEFT_DROP_SHADOW public="1" set="null" static="1"><c path="String"/></LEFT_DROP_SHADOW>
		<MAGENTA public="1" set="null" static="1"><c path="String"/></MAGENTA>
		<MEDIUM public="1" set="null" static="1"><c path="String"/></MEDIUM>
		<MONOSPACED_WITHOUT_SERIFS public="1" set="null" static="1"><c path="String"/></MONOSPACED_WITHOUT_SERIFS>
		<MONOSPACE_WITH_SERIFS public="1" set="null" static="1"><c path="String"/></MONOSPACE_WITH_SERIFS>
		<NONE public="1" set="null" static="1"><c path="String"/></NONE>
		<PROPORTIONAL_WITHOUT_SERIFS public="1" set="null" static="1"><c path="String"/></PROPORTIONAL_WITHOUT_SERIFS>
		<PROPORTIONAL_WITH_SERIFS public="1" set="null" static="1"><c path="String"/></PROPORTIONAL_WITH_SERIFS>
		<RAISED public="1" set="null" static="1"><c path="String"/></RAISED>
		<RED public="1" set="null" static="1"><c path="String"/></RED>
		<RIGHT_DROP_SHADOW public="1" set="null" static="1"><c path="String"/></RIGHT_DROP_SHADOW>
		<SMALL public="1" set="null" static="1"><c path="String"/></SMALL>
		<SMALL_CAPITALS public="1" set="null" static="1"><c path="String"/></SMALL_CAPITALS>
		<UNIFORM public="1" set="null" static="1"><c path="String"/></UNIFORM>
		<WHITE public="1" set="null" static="1"><c path="String"/></WHITE>
		<YELLOW public="1" set="null" static="1"><c path="String"/></YELLOW>
		<backgroundColor public="1"><c path="String"/></backgroundColor>
		<backgroundOpacity public="1"><c path="String"/></backgroundOpacity>
		<bottomInset public="1"><c path="String"/></bottomInset>
		<edgeColor public="1"><c path="String"/></edgeColor>
		<fillColor public="1"><c path="String"/></fillColor>
		<fillOpacity public="1"><c path="String"/></fillOpacity>
		<font public="1"><c path="String"/></font>
		<fontColor public="1"><c path="String"/></fontColor>
		<fontEdge public="1"><c path="String"/></fontEdge>
		<fontOpacity public="1"><c path="String"/></fontOpacity>
		<size public="1"><c path="String"/></size>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVPlayState" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVPlayState.hx" extern="1">
		<BUFFERING public="1" set="null" static="1"><x path="Int"/></BUFFERING>
		<EOF public="1" set="null" static="1"><x path="Int"/></EOF>
		<PAUSED public="1" set="null" static="1"><x path="Int"/></PAUSED>
		<PLAYING public="1" set="null" static="1"><x path="Int"/></PLAYING>
		<READY public="1" set="null" static="1"><x path="Int"/></READY>
		<SUSPENDED public="1" set="null" static="1"><x path="Int"/></SUSPENDED>
		<TRICK_PLAY public="1" set="null" static="1"><x path="Int"/></TRICK_PLAY>
		<UNINITIALIZED public="1" set="null" static="1"><x path="Int"/></UNINITIALIZED>
		<UNRECOVERABLE_ERROR public="1" set="null" static="1"><x path="Int"/></UNRECOVERABLE_ERROR>
		<state public="1" set="null"><x path="Int"/></state>
		<new public="1" set="method"><f a="state">
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVResult" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVResult.hx" extern="1">
		<ASYNC_OPERATION_IN_PROGRESS public="1" set="null" static="1"><x path="Int"/></ASYNC_OPERATION_IN_PROGRESS>
		<AUDIO_ONLY_STREAM_END public="1" set="null" static="1"><x path="Int"/></AUDIO_ONLY_STREAM_END>
		<AUDIO_ONLY_STREAM_START public="1" set="null" static="1"><x path="Int"/></AUDIO_ONLY_STREAM_START>
		<AUDIO_START_ERROR public="1" set="null" static="1"><x path="Int"/></AUDIO_START_ERROR>
		<BAD_MANIFEST_SIGNATURE public="1" set="null" static="1"><x path="Int"/></BAD_MANIFEST_SIGNATURE>
		<BAD_MEDIASAMPLE_FOUND public="1" set="null" static="1"><x path="Int"/></BAD_MEDIASAMPLE_FOUND>
		<BAD_MEDIA_INTERLEAVING public="1" set="null" static="1"><x path="Int"/></BAD_MEDIA_INTERLEAVING>
		<CALLED_FROM_WRONG_THREAD public="1" set="null" static="1"><x path="Int"/></CALLED_FROM_WRONG_THREAD>
		<CANNOT_ERASE_TIMELINE public="1" set="null" static="1"><x path="Int"/></CANNOT_ERASE_TIMELINE>
		<CANNOT_FAIL_OVER public="1" set="null" static="1"><x path="Int"/></CANNOT_FAIL_OVER>
		<CANNOT_HANDLE_MAIN_MANIFEST_UPDATE public="1" set="null" static="1"><x path="Int"/></CANNOT_HANDLE_MAIN_MANIFEST_UPDATE>
		<CANNOT_LOAD_PLAY_LIST public="1" set="null" static="1"><x path="Int"/></CANNOT_LOAD_PLAY_LIST>
		<CANNOT_SPLIT_TIMELINE public="1" set="null" static="1"><x path="Int"/></CANNOT_SPLIT_TIMELINE>
		<CODEC_NOT_SUPPORTED public="1" set="null" static="1"><x path="Int"/></CODEC_NOT_SUPPORTED>
		<COMPONENT_CREATION_FAILURE public="1" set="null" static="1"><x path="Int"/></COMPONENT_CREATION_FAILURE>
		<CONTAINER_NOT_SUPPORTED public="1" set="null" static="1"><x path="Int"/></CONTAINER_NOT_SUPPORTED>
		<CONTENT_LENGTH_MISMATCH public="1" set="null" static="1"><x path="Int"/></CONTENT_LENGTH_MISMATCH>
		<CRYPTO_ALGORITHM_NOT_SUPPORTED public="1" set="null" static="1"><x path="Int"/></CRYPTO_ALGORITHM_NOT_SUPPORTED>
		<CRYPTO_ERROR_BAD_CERTIFICATE public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_BAD_CERTIFICATE>
		<CRYPTO_ERROR_BAD_PARAMETER public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_BAD_PARAMETER>
		<CRYPTO_ERROR_BUFFER_TOO_SMALL public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_BUFFER_TOO_SMALL>
		<CRYPTO_ERROR_CORRUPTED_DATA public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_CORRUPTED_DATA>
		<CRYPTO_ERROR_DIGEST_FINISH public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_DIGEST_FINISH>
		<CRYPTO_ERROR_DIGEST_UPDATE public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_DIGEST_UPDATE>
		<CRYPTO_ERROR_UNKNOWN public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_UNKNOWN>
		<CURRENT_PERIOD_EXPIRED public="1" set="null" static="1"><x path="Int"/></CURRENT_PERIOD_EXPIRED>
		<DECODER_FAILED public="1" set="null" static="1"><x path="Int"/></DECODER_FAILED>
		<DEVICE_OPEN_ERROR public="1" set="null" static="1"><x path="Int"/></DEVICE_OPEN_ERROR>
		<DID_NOT_GET_NEXT_FRAGMENT public="1" set="null" static="1"><x path="Int"/></DID_NOT_GET_NEXT_FRAGMENT>
		<DRM_INIT_ERROR public="1" set="null" static="1"><x path="Int"/></DRM_INIT_ERROR>
		<DRM_NOT_AVAILABLE public="1" set="null" static="1"><x path="Int"/></DRM_NOT_AVAILABLE>
		<END_OF_PERIOD public="1" set="null" static="1"><x path="Int"/></END_OF_PERIOD>
		<EOF public="1" set="null" static="1"><x path="Int"/></EOF>
		<FILE_NOT_FOUND public="1" set="null" static="1"><x path="Int"/></FILE_NOT_FOUND>
		<FILE_OPEN_ERROR public="1" set="null" static="1"><x path="Int"/></FILE_OPEN_ERROR>
		<FILE_READ_ERROR public="1" set="null" static="1"><x path="Int"/></FILE_READ_ERROR>
		<FILE_STRUCTURE_INVALID public="1" set="null" static="1"><x path="Int"/></FILE_STRUCTURE_INVALID>
		<FILE_WRITE_ERROR public="1" set="null" static="1"><x path="Int"/></FILE_WRITE_ERROR>
		<FRAGMENT_READ_ERROR public="1" set="null" static="1"><x path="Int"/></FRAGMENT_READ_ERROR>
		<GENERIC_ERROR public="1" set="null" static="1"><x path="Int"/></GENERIC_ERROR>
		<HTTP_TIME_OUT public="1" set="null" static="1"><x path="Int"/></HTTP_TIME_OUT>
		<ID3_PARSE_ERROR public="1" set="null" static="1"><x path="Int"/></ID3_PARSE_ERROR>
		<INCOMPATIBLE_RENDER_MODE public="1" set="null" static="1"><x path="Int"/></INCOMPATIBLE_RENDER_MODE>
		<INCOMPATIBLE_VERSION public="1" set="null" static="1"><x path="Int"/></INCOMPATIBLE_VERSION>
		<INTERNAL_ERROR public="1" set="null" static="1"><x path="Int"/></INTERNAL_ERROR>
		<INVALID_KEY public="1" set="null" static="1"><x path="Int"/></INVALID_KEY>
		<INVALID_OPERATION public="1" set="null" static="1"><x path="Int"/></INVALID_OPERATION>
		<INVALID_PARAMETER public="1" set="null" static="1"><x path="Int"/></INVALID_PARAMETER>
		<INVALID_REPLACE_DURATION public="1" set="null" static="1"><x path="Int"/></INVALID_REPLACE_DURATION>
		<INVALID_SEEK_TIME public="1" set="null" static="1"><x path="Int"/></INVALID_SEEK_TIME>
		<INVALID_WITH_AUDIO_ONLY_FILE public="1" set="null" static="1"><x path="Int"/></INVALID_WITH_AUDIO_ONLY_FILE>
		<IRRECOVERABLE_ERROR public="1" set="null" static="1"><x path="Int"/></IRRECOVERABLE_ERROR>
		<KEY_NOT_FOUND public="1" set="null" static="1"><x path="Int"/></KEY_NOT_FOUND>
		<KEY_SERVER_NOT_FOUND public="1" set="null" static="1"><x path="Int"/></KEY_SERVER_NOT_FOUND>
		<LISTENER_NOT_FOUND public="1" set="null" static="1"><x path="Int"/></LISTENER_NOT_FOUND>
		<LIVE_HOLD public="1" set="null" static="1"><x path="Int"/></LIVE_HOLD>
		<LIVE_WINDOW_MOVED_BACKWARD public="1" set="null" static="1"><x path="Int"/></LIVE_WINDOW_MOVED_BACKWARD>
		<LOST_CONNECTION_RECOVERABLE public="1" set="null" static="1"><x path="Int"/></LOST_CONNECTION_RECOVERABLE>
		<MAIN_MANIFEST_UPDATE_TO_BE_HANDLED public="1" set="null" static="1"><x path="Int"/></MAIN_MANIFEST_UPDATE_TO_BE_HANDLED>
		<MANIFEST_FILE_UNEXPECTEDLY_CHANGED public="1" set="null" static="1"><x path="Int"/></MANIFEST_FILE_UNEXPECTEDLY_CHANGED>
		<NETWORK_DOWN public="1" set="null" static="1"><x path="Int"/></NETWORK_DOWN>
		<NETWORK_ERROR public="1" set="null" static="1"><x path="Int"/></NETWORK_ERROR>
		<NETWORK_UNAVAILABLE public="1" set="null" static="1"><x path="Int"/></NETWORK_UNAVAILABLE>
		<NOT_IMPLEMENTED public="1" set="null" static="1"><x path="Int"/></NOT_IMPLEMENTED>
		<NO_AUDIO_SINK public="1" set="null" static="1"><x path="Int"/></NO_AUDIO_SINK>
		<NO_FIXED_SIZE public="1" set="null" static="1"><x path="Int"/></NO_FIXED_SIZE>
		<NO_TIMELINE public="1" set="null" static="1"><x path="Int"/></NO_TIMELINE>
		<NO_USEABLE_BITRATE_PROFILE public="1" set="null" static="1"><x path="Int"/></NO_USEABLE_BITRATE_PROFILE>
		<NULL_OPERATION public="1" set="null" static="1"><x path="Int"/></NULL_OPERATION>
		<ONLY_ALLOWED_IN_PAUSED_STATE public="1" set="null" static="1"><x path="Int"/></ONLY_ALLOWED_IN_PAUSED_STATE>
		<OPERATION_ABORTED public="1" set="null" static="1"><x path="Int"/></OPERATION_ABORTED>
		<OUT_OF_MEMORY public="1" set="null" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<OVERFLOW public="1" set="null" static="1"><x path="Int"/></OVERFLOW>
		<PARSE_ERROR public="1" set="null" static="1"><x path="Int"/></PARSE_ERROR>
		<PARTIAL_REPLACEMENT public="1" set="null" static="1"><x path="Int"/></PARTIAL_REPLACEMENT>
		<PERIOD_HOLD public="1" set="null" static="1"><x path="Int"/></PERIOD_HOLD>
		<PERIOD_NOT_LOADED public="1" set="null" static="1"><x path="Int"/></PERIOD_NOT_LOADED>
		<PLAYBACK_NOT_ENABLED public="1" set="null" static="1"><x path="Int"/></PLAYBACK_NOT_ENABLED>
		<POSTROLL_WITH_LIVE_NOT_ALLOWED public="1" set="null" static="1"><x path="Int"/></POSTROLL_WITH_LIVE_NOT_ALLOWED>
		<PREVIOUS_STEP_SEEK_IN_PROGRESS public="1" set="null" static="1"><x path="Int"/></PREVIOUS_STEP_SEEK_IN_PROGRESS>
		<PROTOCOL_NOT_SUPPORTED public="1" set="null" static="1"><x path="Int"/></PROTOCOL_NOT_SUPPORTED>
		<RANGE_ERROR public="1" set="null" static="1"><x path="Int"/></RANGE_ERROR>
		<RANGE_SPANS_READHEAD public="1" set="null" static="1"><x path="Int"/></RANGE_SPANS_READHEAD>
		<RENDITION_M3U8_ERROR public="1" set="null" static="1"><x path="Int"/></RENDITION_M3U8_ERROR>
		<REPLACEMENT_FAILED public="1" set="null" static="1"><x path="Int"/></REPLACEMENT_FAILED>
		<RESOURCE_NOT_SPECIFIED public="1" set="null" static="1"><x path="Int"/></RESOURCE_NOT_SPECIFIED>
		<SECURITY_ERROR public="1" set="null" static="1"><x path="Int"/></SECURITY_ERROR>
		<SEEK_FAILED public="1" set="null" static="1"><x path="Int"/></SEEK_FAILED>
		<SEGMENT_SKIPPED_ON_FAILURE public="1" set="null" static="1"><x path="Int"/></SEGMENT_SKIPPED_ON_FAILURE>
		<SIZE_UNKNOWN public="1" set="null" static="1"><x path="Int"/></SIZE_UNKNOWN>
		<SPS_PPS_FOUND_OUTSIDE_AVCC public="1" set="null" static="1"><x path="Int"/></SPS_PPS_FOUND_OUTSIDE_AVCC>
		<SUCCESS public="1" set="null" static="1"><x path="Int"/></SUCCESS>
		<SWITCH_TO_ASYMMETRIC_PROFILE public="1" set="null" static="1"><x path="Int"/></SWITCH_TO_ASYMMETRIC_PROFILE>
		<TIMELINE_TOO_SHORT public="1" set="null" static="1"><x path="Int"/></TIMELINE_TOO_SHORT>
		<UNDERFLOW public="1" set="null" static="1"><x path="Int"/></UNDERFLOW>
		<UNREPORTED_TIME_DISCONTINUITY_FOUND public="1" set="null" static="1"><x path="Int"/></UNREPORTED_TIME_DISCONTINUITY_FOUND>
		<UNSUPPORTED_CONFIGURATION public="1" set="null" static="1"><x path="Int"/></UNSUPPORTED_CONFIGURATION>
		<UNSUPPORTED_HLS_VERSION public="1" set="null" static="1"><x path="Int"/></UNSUPPORTED_HLS_VERSION>
		<UNSUPPORTED_OPERATION public="1" set="null" static="1"><x path="Int"/></UNSUPPORTED_OPERATION>
		<VIDEO_PROFILE_NOT_SUPPORTED public="1" set="null" static="1"><x path="Int"/></VIDEO_PROFILE_NOT_SUPPORTED>
		<WAITING_FOR_INIT public="1" set="null" static="1"><x path="Int"/></WAITING_FOR_INIT>
		<result public="1" set="null"><x path="Int"/></result>
		<new public="1" set="method"><f a="inResult">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVSource" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVSource.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVStream" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<HARDWARE public="1" set="null" static="1"><c path="String"/></HARDWARE>
		<SOFTWARE public="1" set="null" static="1"><c path="String"/></SOFTWARE>
		<UNDEFINED public="1" set="null" static="1"><c path="String"/></UNDEFINED>
		<backBufferLength public="1" set="null"><x path="Float"/></backBufferLength>
		<backBufferTime public="1" get="null"><x path="Float"/></backBufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<bufferTime public="1" get="null"><x path="Float"/></bufferTime>
		<captionStyle public="1" get="null"><c path="flash.media.AVCaptionStyle"/></captionStyle>
		<captionsEnabled public="1"><x path="Bool"/></captionsEnabled>
		<clientLivePoint public="1" set="null"><x path="Float"/></clientLivePoint>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<decoderType public="1" set="null"><c path="String"/></decoderType>
		<droppedFrames public="1" set="null"><x path="Int"/></droppedFrames>
		<frameTime public="1" set="null"><x path="Float"/></frameTime>
		<initialBufferTime public="1" get="null"><x path="Float"/></initialBufferTime>
		<playState public="1" set="null"><c path="flash.media.AVPlayState"/></playState>
		<renderType public="1" set="null"><c path="String"/></renderType>
		<time public="1" set="null"><x path="Float"/></time>
		<useHardwareDecoder public="1"><x path="Bool"/></useHardwareDecoder>
		<volume public="1"><x path="Float"/></volume>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<fastForward public="1" set="method"><f a="rate">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></fastForward>
		<pause public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></pause>
		<play public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></play>
		<resume public="1" set="method"><f a=""><x path="Bool"/></f></resume>
		<rewind public="1" set="method"><f a="rate">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></rewind>
		<seek public="1" set="method">
			<f a="offset:?inBufferSeek" v=":true">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{ inBufferSeek : true }</e></m></meta>
		</seek>
		<seekToKeyFrame public="1" set="method">
			<f a="offset:?inBufferSeek" v=":true">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{ inBufferSeek : true }</e></m></meta>
		</seekToKeyFrame>
		<seekToLivePoint public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></seekToLivePoint>
		<seekToLocalTime public="1" set="method"><f a="periodIndex:time">
	<x path="Int"/>
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></seekToLocalTime>
		<setPlaySpeed public="1" set="method"><f a="speed:reserved">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setPlaySpeed>
		<step public="1" set="method"><f a="frames">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></step>
		<new public="1" set="method"><f a="source">
	<c path="flash.media.AVSource"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.Camera" params="" file="C:\HaxeToolkit\haxe\std/flash/media/Camera.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<_scanHardware public="1" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</_scanHardware>
		<getCamera public="1" set="method" static="1"><f a="?name">
	<c path="String"/>
	<c path="flash.media.Camera"/>
</f></getCamera>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<fps public="1" set="null"><x path="Float"/></fps>
		<height public="1" set="null"><x path="Int"/></height>
		<index public="1" set="null"><x path="Int"/></index>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<loopback public="1" set="null"><x path="Bool"/></loopback>
		<motionLevel public="1" set="null"><x path="Int"/></motionLevel>
		<motionTimeout public="1" set="null"><x path="Int"/></motionTimeout>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<position public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</position>
		<quality public="1" set="null"><x path="Int"/></quality>
		<width public="1" set="null"><x path="Int"/></width>
		<copyToByteArray public="1">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToByteArray>
		<copyToVector public="1">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToVector>
		<drawToBitmapData public="1">
			<f a="destination">
				<c path="flash.display.BitmapData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</drawToBitmapData>
		<setCursor public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></setCursor>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setLoopback public="1" set="method">
			<f a="?compress" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ compress : false }</e></m></meta>
		</setLoopback>
		<setMode public="1" set="method">
			<f a="width:height:fps:?favorArea" v=":::true">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ favorArea : true }</e></m></meta>
		</setMode>
		<setMotionLevel public="1" set="method">
			<f a="motionLevel:?timeout" v=":2000">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 2000 }</e></m></meta>
		</setMotionLevel>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.Microphone" params="" file="C:\HaxeToolkit\haxe\std/flash/media/Microphone.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<getEnhancedMicrophone public="1" expr="{ index : -1 }" static="1">
			<f a="?index">
				<x path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta>
				<m n=":value"><e>{ index : -1 }</e></m>
				<m n=":require"><e>flash10_2</e></m>
			</meta>
		</getEnhancedMicrophone>
		<getMicrophone public="1" set="method" static="1">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
		</getMicrophone>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<codec public="1">
			<e path="flash.media.SoundCodec"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</codec>
		<enableVAD public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</enableVAD>
		<encodeQuality public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</encodeQuality>
		<enhancedOptions public="1">
			<c path="flash.media.MicrophoneEnhancedOptions"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</enhancedOptions>
		<framesPerPacket public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</framesPerPacket>
		<gain public="1"><x path="Float"/></gain>
		<index public="1" set="null"><x path="Int"/></index>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<noiseSuppressionLevel public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</noiseSuppressionLevel>
		<rate public="1"><x path="Int"/></rate>
		<silenceLevel public="1" set="null"><x path="Float"/></silenceLevel>
		<silenceTimeout public="1" set="null"><x path="Int"/></silenceTimeout>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useEchoSuppression public="1" set="null"><x path="Bool"/></useEchoSuppression>
		<setLoopBack public="1" set="method">
			<f a="?state" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ state : true }</e></m></meta>
		</setLoopBack>
		<setSilenceLevel public="1" set="method">
			<f a="silenceLevel:?timeout" v=":-1">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ timeout : -1 }</e></m></meta>
		</setSilenceLevel>
		<setUseEchoSuppression public="1" set="method"><f a="useEchoSuppression">
	<x path="Bool"/>
	<x path="Void"/>
</f></setUseEchoSuppression>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.media.MicrophoneEnhancedMode" params="" file="C:\HaxeToolkit\haxe\std/flash/media/MicrophoneEnhancedMode.hx">
		<FULL_DUPLEX/>
		<HALF_DUPLEX/>
		<HEADSET/>
		<OFF/>
		<SPEAKER_MUTE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</enum>
	<class path="flash.media.MicrophoneEnhancedOptions" params="" file="C:\HaxeToolkit\haxe\std/flash/media/MicrophoneEnhancedOptions.hx" extern="1">
		<autoGain public="1"><x path="Bool"/></autoGain>
		<echoPath public="1"><x path="Int"/></echoPath>
		<isVoiceDetected public="1"><x path="Int"/></isVoiceDetected>
		<mode public="1"><e path="flash.media.MicrophoneEnhancedMode"/></mode>
		<nonLinearProcessing public="1"><x path="Bool"/></nonLinearProcessing>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</class>
	<enum path="flash.media.SoundCodec" params="" file="C:\HaxeToolkit\haxe\std/flash/media/SoundCodec.hx">
		<NELLYMOSER/>
		<PCMA/>
		<PCMU/>
		<SPEEX/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.media.SoundTransform" params="" file="C:\HaxeToolkit\haxe\std/flash/media/SoundTransform.hx" extern="1">
		<leftToLeft public="1"><x path="Float"/></leftToLeft>
		<leftToRight public="1"><x path="Float"/></leftToRight>
		<pan public="1"><x path="Float"/></pan>
		<rightToLeft public="1"><x path="Float"/></rightToLeft>
		<rightToRight public="1"><x path="Float"/></rightToRight>
		<volume public="1"><x path="Float"/></volume>
		<new public="1" set="method">
			<f a="?vol:?panning" v="1:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ panning : 0, vol : 1 }</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.StageVideo" params="" file="C:\HaxeToolkit\haxe\std/flash/media/StageVideo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<colorSpaces public="1" set="null"><c path="flash.Vector"><c path="String"/></c></colorSpaces>
		<depth public="1"><x path="Int"/></depth>
		<pan public="1"><c path="flash.geom.Point"/></pan>
		<videoHeight public="1" set="null"><x path="Int"/></videoHeight>
		<videoWidth public="1" set="null"><x path="Int"/></videoWidth>
		<viewPort public="1"><c path="flash.geom.Rectangle"/></viewPort>
		<zoom public="1"><c path="flash.geom.Point"/></zoom>
		<attachAVStream public="1">
			<f a="avStream">
				<c path="flash.media.AVStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_7</e></m></meta>
		</attachAVStream>
		<attachCamera public="1">
			<f a="theCamera">
				<c path="flash.media.Camera"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.media.VideoStreamSettings" params="" file="C:\HaxeToolkit\haxe\std/flash/media/VideoStreamSettings.hx" extern="1">
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
		<codec public="1" set="null"><c path="String"/></codec>
		<fps public="1" set="null"><x path="Float"/></fps>
		<height public="1" set="null"><x path="Int"/></height>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<quality public="1" set="null"><x path="Int"/></quality>
		<width public="1" set="null"><x path="Int"/></width>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setMode public="1" set="method"><f a="width:height:fps">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setMode>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetConnection" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<client public="1"><d/></client>
		<connected public="1" set="null"><x path="Bool"/></connected>
		<connectedProxyType public="1" set="null"><c path="String"/></connectedProxyType>
		<farID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<farNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<maxPeerConnections public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPeerConnections>
		<nearID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearID>
		<nearNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<protocol public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</protocol>
		<proxyType public="1"><c path="String"/></proxyType>
		<unconnectedPeerStreams public="1" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</unconnectedPeerStreams>
		<uri public="1" set="null"><c path="String"/></uri>
		<usingTLS public="1" set="null"><x path="Bool"/></usingTLS>
		<addHeader public="1" set="method">
			<f a="operation:?mustUnderstand:?param" v=":false:">
				<c path="String"/>
				<x path="Bool"/>
				<t path="flash.utils.Object"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mustUnderstand : false }</e></m></meta>
		</addHeader>
		<call public="1" set="method"><f a="command:responder:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<c path="flash.net.Responder"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></call>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="command:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></connect>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetStream" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<CONNECT_TO_FMS public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CONNECT_TO_FMS>
		<DIRECT_CONNECTIONS public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</DIRECT_CONNECTIONS>
		<resetDRMVouchers public="1" set="method" static="1"><f a=""><x path="Void"/></f></resetDRMVouchers>
		<audioCodec public="1" set="null"><x path="UInt"/></audioCodec>
		<audioReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioReliable>
		<audioSampleAccess public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioSampleAccess>
		<backBufferLength public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferLength>
		<backBufferTime public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<bufferTime public="1"><x path="Float"/></bufferTime>
		<bufferTimeMax public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</bufferTimeMax>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><x path="UInt"/></bytesTotal>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<client public="1"><d/></client>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<dataReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</dataReliable>
		<decodedFrames public="1" set="null"><x path="UInt"/></decodedFrames>
		<farID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<farNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<inBufferSeek public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</inBufferSeek>
		<info public="1" set="null">
			<c path="flash.net.NetStreamInfo"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</info>
		<liveDelay public="1" set="null"><x path="Float"/></liveDelay>
		<maxPauseBufferTime public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPauseBufferTime>
		<multicastAvailabilitySendToAll public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilitySendToAll>
		<multicastAvailabilityUpdatePeriod public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilityUpdatePeriod>
		<multicastFetchPeriod public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastFetchPeriod>
		<multicastInfo public="1">
			<c path="flash.net.NetStreamMulticastInfo"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastInfo>
		<multicastPushNeighborLimit public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastPushNeighborLimit>
		<multicastRelayMarginDuration public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastRelayMarginDuration>
		<multicastWindowDuration public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastWindowDuration>
		<nearNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<objectEncoding public="1" set="null"><x path="UInt"/></objectEncoding>
		<peerStreams public="1" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</peerStreams>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<time public="1" set="null"><x path="Float"/></time>
		<useHardwareDecoder public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</useHardwareDecoder>
		<useJitterBuffer public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</useJitterBuffer>
		<videoCodec public="1" set="null"><x path="UInt"/></videoCodec>
		<videoReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoReliable>
		<videoSampleAccess public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoSampleAccess>
		<videoStreamSettings public="1">
			<c path="flash.media.VideoStreamSettings"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</videoStreamSettings>
		<appendBytes public="1">
			<f a="bytes">
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytes>
		<appendBytesAction public="1">
			<f a="netStreamAppendBytesAction">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytesAction>
		<attach public="1">
			<f a="connection">
				<c path="flash.net.NetConnection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</attach>
		<attachAudio public="1" set="method"><f a="microphone">
	<c path="flash.media.Microphone"/>
	<x path="Void"/>
</f></attachAudio>
		<attachCamera public="1" set="method">
			<f a="theCamera:?snapshotMilliseconds" v=":-1">
				<c path="flash.media.Camera"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ snapshotMilliseconds : -1 }</e></m></meta>
		</attachCamera>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<dispose public="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</dispose>
		<onPeerConnect public="1" set="method">
			<f a="subscriber">
				<c path="flash.net.NetStream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</onPeerConnect>
		<pause public="1" set="method"><f a=""><x path="Void"/></f></pause>
		<play public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></play>
		<play2 public="1" set="method">
			<f a="param">
				<c path="flash.net.NetStreamPlayOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</play2>
		<publish public="1" set="method"><f a="?name:?type">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></publish>
		<receiveAudio public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveAudio>
		<receiveVideo public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveVideo>
		<receiveVideoFPS public="1" set="method"><f a="FPS">
	<x path="Float"/>
	<x path="Void"/>
</f></receiveVideoFPS>
		<resume public="1" set="method"><f a=""><x path="Void"/></f></resume>
		<seek public="1" set="method"><f a="offset">
	<x path="Float"/>
	<x path="Void"/>
</f></seek>
		<send public="1" set="method"><f a="handlerName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></send>
		<step public="1">
			<f a="frames">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</step>
		<togglePause public="1" set="method"><f a=""><x path="Void"/></f></togglePause>
		<new public="1" set="method"><f a="connection:?peerID">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.NetStreamInfo" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetStreamInfo.hx" extern="1">
		<SRTT public="1" set="null"><x path="Float"/></SRTT>
		<audioBufferByteLength public="1" set="null"><x path="Float"/></audioBufferByteLength>
		<audioBufferLength public="1" set="null"><x path="Float"/></audioBufferLength>
		<audioByteCount public="1" set="null"><x path="Float"/></audioByteCount>
		<audioBytesPerSecond public="1" set="null"><x path="Float"/></audioBytesPerSecond>
		<audioLossRate public="1" set="null"><x path="Float"/></audioLossRate>
		<byteCount public="1" set="null"><x path="Float"/></byteCount>
		<currentBytesPerSecond public="1" set="null"><x path="Float"/></currentBytesPerSecond>
		<dataBufferByteLength public="1" set="null"><x path="Float"/></dataBufferByteLength>
		<dataBufferLength public="1" set="null"><x path="Float"/></dataBufferLength>
		<dataByteCount public="1" set="null"><x path="Float"/></dataByteCount>
		<dataBytesPerSecond public="1" set="null"><x path="Float"/></dataBytesPerSecond>
		<droppedFrames public="1" set="null"><x path="Float"/></droppedFrames>
		<isLive public="1" set="null"><x path="Bool"/></isLive>
		<maxBytesPerSecond public="1" set="null"><x path="Float"/></maxBytesPerSecond>
		<metaData public="1" set="null"><d/></metaData>
		<playbackBytesPerSecond public="1" set="null"><x path="Float"/></playbackBytesPerSecond>
		<resourceName public="1" set="null"><c path="String"/></resourceName>
		<uri public="1" set="null"><c path="String"/></uri>
		<videoBufferByteLength public="1" set="null"><x path="Float"/></videoBufferByteLength>
		<videoBufferLength public="1" set="null"><x path="Float"/></videoBufferLength>
		<videoByteCount public="1" set="null"><x path="Float"/></videoByteCount>
		<videoBytesPerSecond public="1" set="null"><x path="Float"/></videoBytesPerSecond>
		<videoLossRate public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoLossRate>
		<xmpData public="1" set="null"><d/></xmpData>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="curBPS:byteCount:maxBPS:audioBPS:audioByteCount:videoBPS:videoByteCount:dataBPS:dataByteCount:playbackBPS:droppedFrames:audioBufferByteLength:videoBufferByteLength:dataBufferByteLength:audioBufferLength:videoBufferLength:dataBufferLength:srtt:audioLossRate:videoLossRate:?metaData:?xmpData:?uri:?resourceName:?isLive" v="::::::::::::::::::::::::true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ isLive : true }</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.NetStreamMulticastInfo" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetStreamMulticastInfo.hx" extern="1">
		<bytesPushedFromPeers public="1" set="null"><x path="Float"/></bytesPushedFromPeers>
		<bytesPushedToPeers public="1" set="null"><x path="Float"/></bytesPushedToPeers>
		<bytesReceivedFromIPMulticast public="1" set="null"><x path="Float"/></bytesReceivedFromIPMulticast>
		<bytesReceivedFromServer public="1" set="null"><x path="Float"/></bytesReceivedFromServer>
		<bytesRequestedByPeers public="1" set="null"><x path="Float"/></bytesRequestedByPeers>
		<bytesRequestedFromPeers public="1" set="null"><x path="Float"/></bytesRequestedFromPeers>
		<fragmentsPushedFromPeers public="1" set="null"><x path="Float"/></fragmentsPushedFromPeers>
		<fragmentsPushedToPeers public="1" set="null"><x path="Float"/></fragmentsPushedToPeers>
		<fragmentsReceivedFromIPMulticast public="1" set="null"><x path="Float"/></fragmentsReceivedFromIPMulticast>
		<fragmentsReceivedFromServer public="1" set="null"><x path="Float"/></fragmentsReceivedFromServer>
		<fragmentsRequestedByPeers public="1" set="null"><x path="Float"/></fragmentsRequestedByPeers>
		<fragmentsRequestedFromPeers public="1" set="null"><x path="Float"/></fragmentsRequestedFromPeers>
		<receiveControlBytesPerSecond public="1" set="null"><x path="Float"/></receiveControlBytesPerSecond>
		<receiveDataBytesPerSecond public="1" set="null"><x path="Float"/></receiveDataBytesPerSecond>
		<receiveDataBytesPerSecondFromIPMulticast public="1" set="null"><x path="Float"/></receiveDataBytesPerSecondFromIPMulticast>
		<receiveDataBytesPerSecondFromServer public="1" set="null"><x path="Float"/></receiveDataBytesPerSecondFromServer>
		<sendControlBytesPerSecond public="1" set="null"><x path="Float"/></sendControlBytesPerSecond>
		<sendControlBytesPerSecondToServer public="1" set="null"><x path="Float"/></sendControlBytesPerSecondToServer>
		<sendDataBytesPerSecond public="1" set="null"><x path="Float"/></sendDataBytesPerSecond>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1"><f a="sendDataBytesPerSecond:sendControlBytesPerSecond:receiveDataBytesPerSecond:receiveControlBytesPerSecond:bytesPushedToPeers:fragmentsPushedToPeers:bytesRequestedByPeers:fragmentsRequestedByPeers:bytesPushedFromPeers:fragmentsPushedFromPeers:bytesRequestedFromPeers:fragmentsRequestedFromPeers:sendControlBytesPerSecondToServer:receiveDataBytesPerSecondFromServer:bytesReceivedFromServer:fragmentsReceivedFromServer:receiveDataBytesPerSecondFromIPMulticast:bytesReceivedFromIPMulticast:fragmentsReceivedFromIPMulticast">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<class path="flash.net.NetStreamPlayOptions" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetStreamPlayOptions.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<len public="1"><x path="Float"/></len>
		<offset public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</offset>
		<oldStreamName public="1"><c path="String"/></oldStreamName>
		<start public="1"><x path="Float"/></start>
		<streamName public="1"><c path="String"/></streamName>
		<transition public="1"><c path="String"/></transition>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.net.Responder" params="" file="C:\HaxeToolkit\haxe\std/flash/net/Responder.hx" extern="1"><new public="1" set="method"><f a="result:?status">
	<d/>
	<d/>
	<x path="Void"/>
</f></new></class>
	<class path="flash.net.URLRequest" params="" file="C:\HaxeToolkit\haxe\std/flash/net/URLRequest.hx" extern="1">
		<contentType public="1"><c path="String"/></contentType>
		<data public="1"><d/></data>
		<digest public="1"><c path="String"/></digest>
		<method public="1"><c path="String"/></method>
		<requestHeaders public="1"><c path="Array"><c path="flash.net.URLRequestHeader"/></c></requestHeaders>
		<url public="1"><c path="String"/></url>
		<useRedirectedURL public="1" set="method">
			<f a="sourceRequest:?wholeURL:?pattern:?replace" v=":false::">
				<c path="flash.net.URLRequest"/>
				<x path="Bool"/>
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ wholeURL : false }</e></m></meta>
		</useRedirectedURL>
		<new public="1" set="method"><f a="?url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.URLRequestHeader" params="" file="C:\HaxeToolkit\haxe\std/flash/net/URLRequestHeader.hx" extern="1">
		<name public="1"><c path="String"/></name>
		<value public="1"><c path="String"/></value>
		<new public="1" set="method"><f a="?name:?value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.system.ApplicationDomain" params="" file="C:\HaxeToolkit\haxe\std/flash/system/ApplicationDomain.hx" extern="1">
		<MIN_DOMAIN_MEMORY_LENGTH public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</MIN_DOMAIN_MEMORY_LENGTH>
		<currentDomain public="1" set="null" static="1"><c path="flash.system.ApplicationDomain"/></currentDomain>
		<domainMemory public="1">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</domainMemory>
		<parentDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></parentDomain>
		<getDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getDefinition>
		<getQualifiedDefinitionNames public="1">
			<f a=""><c path="flash.Vector"><c path="String"/></c></f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</getQualifiedDefinitionNames>
		<hasDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasDefinition>
		<new public="1" set="method"><f a="?parentDomain">
	<c path="flash.system.ApplicationDomain"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.system.ImageDecodingPolicy" params="" file="C:\HaxeToolkit\haxe\std/flash/system/ImageDecodingPolicy.hx">
		<ON_DEMAND/>
		<ON_LOAD/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.system.LoaderContext" params="" file="C:\HaxeToolkit\haxe\std/flash/system/LoaderContext.hx" extern="1">
		<allowCodeImport public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowCodeImport>
		<allowLoadBytesCodeExecution public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowLoadBytesCodeExecution>
		<applicationDomain public="1"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<imageDecodingPolicy public="1">
			<e path="flash.system.ImageDecodingPolicy"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</imageDecodingPolicy>
		<parameters public="1">
			<d/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</parameters>
		<requestedContentParent public="1">
			<c path="flash.display.DisplayObjectContainer"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestedContentParent>
		<securityDomain public="1"><c path="flash.system.SecurityDomain"/></securityDomain>
		<new public="1" set="method">
			<f a="?checkPolicyFile:?applicationDomain:?securityDomain" v="false::">
				<x path="Bool"/>
				<c path="flash.system.ApplicationDomain"/>
				<c path="flash.system.SecurityDomain"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ checkPolicyFile : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.system.SecurityDomain" params="" file="C:\HaxeToolkit\haxe\std/flash/system/SecurityDomain.hx" extern="1">
		<currentDomain public="1" set="null" static="1"><c path="flash.system.SecurityDomain"/></currentDomain>
		<domainID public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</domainID>
	</class>
	<enum path="flash.text.AntiAliasType" params="" file="C:\HaxeToolkit\haxe\std/flash/text/AntiAliasType.hx">
		<ADVANCED/>
		<NORMAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.GridFitType" params="" file="C:\HaxeToolkit\haxe\std/flash/text/GridFitType.hx">
		<NONE/>
		<PIXEL/>
		<SUBPIXEL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.StyleSheet" params="" file="C:\HaxeToolkit\haxe\std/flash/text/StyleSheet.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<styleNames public="1" set="null"><c path="Array"><d/></c></styleNames>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<getStyle public="1" set="method"><f a="styleName">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getStyle>
		<parseCSS public="1" set="method"><f a="CSSText">
	<c path="String"/>
	<x path="Void"/>
</f></parseCSS>
		<setStyle public="1" set="method"><f a="styleName:styleObject">
	<c path="String"/>
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></setStyle>
		<transform public="1" set="method"><f a="formatObject">
	<t path="flash.utils.Object"/>
	<c path="flash.text.TextFormat"/>
</f></transform>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.text.TextField" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextField.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<isFontCompatible public="1" set="method" static="1">
			<f a="fontName:fontStyle">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isFontCompatible>
		<alwaysShowSelection public="1"><x path="Bool"/></alwaysShowSelection>
		<antiAliasType public="1"><e path="flash.text.AntiAliasType"/></antiAliasType>
		<autoSize public="1"><e path="flash.text.TextFieldAutoSize"/></autoSize>
		<background public="1"><x path="Bool"/></background>
		<backgroundColor public="1"><x path="UInt"/></backgroundColor>
		<border public="1"><x path="Bool"/></border>
		<borderColor public="1"><x path="UInt"/></borderColor>
		<bottomScrollV public="1" set="null"><x path="Int"/></bottomScrollV>
		<caretIndex public="1" set="null"><x path="Int"/></caretIndex>
		<condenseWhite public="1"><x path="Bool"/></condenseWhite>
		<defaultTextFormat public="1"><c path="flash.text.TextFormat"/></defaultTextFormat>
		<displayAsPassword public="1"><x path="Bool"/></displayAsPassword>
		<embedFonts public="1"><x path="Bool"/></embedFonts>
		<gridFitType public="1"><e path="flash.text.GridFitType"/></gridFitType>
		<htmlText public="1"><c path="String"/></htmlText>
		<length public="1" set="null"><x path="Int"/></length>
		<maxChars public="1"><x path="Int"/></maxChars>
		<maxScrollH public="1" set="null"><x path="Int"/></maxScrollH>
		<maxScrollV public="1" set="null"><x path="Int"/></maxScrollV>
		<mouseWheelEnabled public="1"><x path="Bool"/></mouseWheelEnabled>
		<multiline public="1"><x path="Bool"/></multiline>
		<numLines public="1" set="null"><x path="Int"/></numLines>
		<restrict public="1"><c path="String"/></restrict>
		<scrollH public="1"><x path="Int"/></scrollH>
		<scrollV public="1"><x path="Int"/></scrollV>
		<selectable public="1"><x path="Bool"/></selectable>
		<selectedText public="1" set="null"><c path="String"/></selectedText>
		<selectionBeginIndex public="1" set="null"><x path="Int"/></selectionBeginIndex>
		<selectionEndIndex public="1" set="null"><x path="Int"/></selectionEndIndex>
		<sharpness public="1"><x path="Float"/></sharpness>
		<styleSheet public="1"><c path="flash.text.StyleSheet"/></styleSheet>
		<text public="1"><c path="String"/></text>
		<textColor public="1"><x path="UInt"/></textColor>
		<textHeight public="1" set="null"><x path="Float"/></textHeight>
		<textInteractionMode public="1">
			<e path="flash.text.TextInteractionMode"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</textInteractionMode>
		<textWidth public="1" set="null"><x path="Float"/></textWidth>
		<thickness public="1"><x path="Float"/></thickness>
		<type public="1"><e path="flash.text.TextFieldType"/></type>
		<useRichTextClipboard public="1"><x path="Bool"/></useRichTextClipboard>
		<wordWrap public="1"><x path="Bool"/></wordWrap>
		<appendText public="1" set="method"><f a="newText">
	<c path="String"/>
	<x path="Void"/>
</f></appendText>
		<copyRichText public="1" set="method"><f a=""><c path="String"/></f></copyRichText>
		<getCharBoundaries public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getCharBoundaries>
		<getCharIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getCharIndexAtPoint>
		<getFirstCharInParagraph public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getFirstCharInParagraph>
		<getImageReference public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getImageReference>
		<getLineIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getLineIndexAtPoint>
		<getLineIndexOfChar public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineIndexOfChar>
		<getLineLength public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineLength>
		<getLineMetrics public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="flash.text.TextLineMetrics"/>
</f></getLineMetrics>
		<getLineOffset public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineOffset>
		<getLineText public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="String"/>
</f></getLineText>
		<getParagraphLength public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getParagraphLength>
		<getRawText public="1" set="method"><f a=""><c path="String"/></f></getRawText>
		<getTextFormat public="1" set="method">
			<f a="?beginIndex:?endIndex" v="-1:-1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.text.TextFormat"/>
			</f>
			<meta><m n=":value"><e>{ endIndex : -1, beginIndex : -1 }</e></m></meta>
		</getTextFormat>
		<getTextRuns public="1" set="method">
			<f a="?beginIndex:?endIndex" v="0:2147483647">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":value"><e>{ endIndex : 2147483647, beginIndex : 0 }</e></m></meta>
		</getTextRuns>
		<getXMLText public="1" set="method">
			<f a="?beginIndex:?endIndex" v="0:2147483647">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ endIndex : 2147483647, beginIndex : 0 }</e></m></meta>
		</getXMLText>
		<insertXMLText public="1" set="method">
			<f a="beginIndex:endIndex:richText:?pasting" v=":::false">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ pasting : false }</e></m></meta>
		</insertXMLText>
		<pasteRichText public="1" set="method"><f a="richText">
	<c path="String"/>
	<x path="Bool"/>
</f></pasteRichText>
		<replaceSelectedText public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></replaceSelectedText>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></replaceText>
		<setSelection public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSelection>
		<setTextFormat public="1" set="method">
			<f a="format:?beginIndex:?endIndex" v=":-1:-1">
				<c path="flash.text.TextFormat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endIndex : -1, beginIndex : -1 }</e></m></meta>
		</setTextFormat>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="flash.text.TextFieldAutoSize" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFieldAutoSize.hx">
		<CENTER/>
		<LEFT/>
		<NONE/>
		<RIGHT/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextFieldType" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFieldType.hx">
		<DYNAMIC/>
		<INPUT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.TextFormat" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFormat.hx" extern="1">
		<align public="1"><e path="flash.text.TextFormatAlign"/></align>
		<blockIndent public="1"><t path="Null"><x path="Float"/></t></blockIndent>
		<bold public="1"><t path="Null"><x path="Bool"/></t></bold>
		<bullet public="1"><t path="Null"><x path="Bool"/></t></bullet>
		<color public="1"><t path="Null"><x path="UInt"/></t></color>
		<display public="1"><e path="flash.text.TextFormatDisplay"/></display>
		<font public="1"><c path="String"/></font>
		<indent public="1"><t path="Null"><x path="Float"/></t></indent>
		<italic public="1"><t path="Null"><x path="Bool"/></t></italic>
		<kerning public="1"><t path="Null"><x path="Bool"/></t></kerning>
		<leading public="1"><t path="Null"><x path="Float"/></t></leading>
		<leftMargin public="1"><t path="Null"><x path="Float"/></t></leftMargin>
		<letterSpacing public="1"><t path="Null"><x path="Float"/></t></letterSpacing>
		<rightMargin public="1"><t path="Null"><x path="Float"/></t></rightMargin>
		<size public="1"><t path="Null"><x path="Float"/></t></size>
		<tabStops public="1"><c path="Array"><x path="UInt"/></c></tabStops>
		<target public="1"><c path="String"/></target>
		<underline public="1"><t path="Null"><x path="Bool"/></t></underline>
		<url public="1"><c path="String"/></url>
		<new public="1" set="method">
			<f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading" v=":0:0:false:false:false::::0:0:0:0">
				<c path="String"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<e path="flash.text.TextFormatAlign"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ leading : 0, indent : 0, rightMargin : 0, leftMargin : 0, underline : false, italic : false, bold : false, color : 0, size : 0 }</e></m></meta>
		</new>
	</class>
	<enum path="flash.text.TextFormatAlign" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFormatAlign.hx">
		<CENTER/>
		<END/>
		<JUSTIFY/>
		<LEFT/>
		<RIGHT/>
		<START/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextFormatDisplay" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFormatDisplay.hx">
		<BLOCK/>
		<INLINE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextInteractionMode" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextInteractionMode.hx">
		<NORMAL/>
		<SELECTION/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.TextLineMetrics" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextLineMetrics.hx" extern="1">
		<ascent public="1"><x path="Float"/></ascent>
		<descent public="1"><x path="Float"/></descent>
		<height public="1"><x path="Float"/></height>
		<leading public="1"><x path="Float"/></leading>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<new public="1" set="method"><f a="x:width:height:ascent:descent:leading">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextSnapshot" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextSnapshot.hx" extern="1">
		<charCount public="1" set="null"><x path="Int"/></charCount>
		<findText public="1" set="method"><f a="beginIndex:textToFind:caseSensitive">
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></findText>
		<getSelected public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></getSelected>
		<getSelectedText public="1" set="method">
			<f a="?includeLineEndings" v="false">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ includeLineEndings : false }</e></m></meta>
		</getSelectedText>
		<getText public="1" set="method">
			<f a="beginIndex:endIndex:?includeLineEndings" v="::false">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ includeLineEndings : false }</e></m></meta>
		</getText>
		<getTextRunInfo public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRunInfo>
		<hitTestTextNearPos public="1" set="method">
			<f a="x:y:?maxDistance" v="::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ maxDistance : 0 }</e></m></meta>
		</hitTestTextNearPos>
		<setSelectColor public="1" set="method">
			<f a="?hexColor" v="16776960">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hexColor : 16776960 }</e></m></meta>
		</setSelectColor>
		<setSelected public="1" set="method"><f a="beginIndex:endIndex:select">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setSelected>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenu" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/ContextMenu.hx" extern="1">
		<extends path="flash.display.NativeMenu"/>
		<isSupported public="1" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<builtInItems public="1"><c path="flash.ui.ContextMenuBuiltInItems"/></builtInItems>
		<clipboardItems public="1">
			<c path="flash.ui.ContextMenuClipboardItems"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardItems>
		<clipboardMenu public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardMenu>
		<customItems public="1"><c path="Array"><d/></c></customItems>
		<link public="1">
			<c path="flash.net.URLRequest"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</link>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenu"/></f></clone>
		<hideBuiltInItems public="1" set="method"><f a=""><x path="Void"/></f></hideBuiltInItems>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuBuiltInItems" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/ContextMenuBuiltInItems.hx" extern="1">
		<forwardAndBack public="1"><x path="Bool"/></forwardAndBack>
		<loop public="1"><x path="Bool"/></loop>
		<play public="1"><x path="Bool"/></play>
		<print public="1"><x path="Bool"/></print>
		<quality public="1"><x path="Bool"/></quality>
		<rewind public="1"><x path="Bool"/></rewind>
		<save public="1"><x path="Bool"/></save>
		<zoom public="1"><x path="Bool"/></zoom>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuBuiltInItems"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuClipboardItems" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/ContextMenuClipboardItems.hx" extern="1">
		<clear public="1"><x path="Bool"/></clear>
		<copy public="1"><x path="Bool"/></copy>
		<cut public="1"><x path="Bool"/></cut>
		<paste public="1"><x path="Bool"/></paste>
		<selectAll public="1"><x path="Bool"/></selectAll>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuClipboardItems"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.utils.IDataInput" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/IDataInput.hx" extern="1" interface="1">
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
	</class>
	<class path="flash.utils.IDataInput2" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/IDataInput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataInput"/></class>
	<class path="flash.utils.IDataOutput" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/IDataOutput.hx" extern="1" interface="1">
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
	</class>
	<class path="flash.utils.IDataOutput2" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/IDataOutput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataOutput"/></class>
	<class path="flash.utils.ByteArray" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/ByteArray.hx" extern="1">
		<implements path="flash.utils.IDataInput2"/>
		<implements path="flash.utils.IDataOutput2"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<length public="1"><x path="UInt"/></length>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<position public="1"><x path="UInt"/></position>
		<shareable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</shareable>
		<atomicCompareAndSwapIntAt public="1">
			<f a="byteIndex:expectedValue:newValue">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapIntAt>
		<atomicCompareAndSwapLength public="1">
			<f a="expectedLength:newLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapLength>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clear>
		<compress public="1" set="method"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></compress>
		<deflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</deflate>
		<inflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</inflate>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<uncompress public="1" set="method"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></uncompress>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.utils.CompressionAlgorithm" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/CompressionAlgorithm.hx">
		<DEFLATE/>
		<LZMA/>
		<ZLIB/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash11</e></m>
		</meta>
	</enum>
	<class path="flash.utils.Dictionary" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Dictionary.hx" extern="1">
		<new public="1" set="method">
			<f a="?weakKeys" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ weakKeys : false }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="flash.utils.Endian" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Endian.hx">
		<BIG_ENDIAN/>
		<LITTLE_ENDIAN/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<typedef path="flash.utils.Function" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Function.hx"><d/></typedef>
	<class path="flash.utils.Namespace" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Namespace.hx" extern="1">
		<prefix public="1" set="null"><d/></prefix>
		<uri public="1" set="null"><c path="String"/></uri>
		<new public="1" set="method"><f a="?prefix:?uri">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="flash.utils.Object" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Object.hx"><d/></typedef>
	<class path="flash.utils.RegExp" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/RegExp.hx" extern="1">
		<dotall public="1" set="null"><x path="Bool"/></dotall>
		<extended public="1" set="null"><x path="Bool"/></extended>
		<global public="1" set="null"><x path="Bool"/></global>
		<ignoreCase public="1" set="null"><x path="Bool"/></ignoreCase>
		<lastIndex public="1"><x path="Int"/></lastIndex>
		<multiline public="1" set="null"><x path="Bool"/></multiline>
		<source public="1" set="null"><c path="String"/></source>
		<exec public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</exec>
		<test public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</test>
		<new public="1" set="method"><f a="?pattern:?options">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.xml.XML" params="" file="C:\HaxeToolkit\haxe\std/flash/xml/XML.hx" extern="1">
		<ignoreComments public="1" static="1"><x path="Bool"/></ignoreComments>
		<ignoreProcessingInstructions public="1" static="1"><x path="Bool"/></ignoreProcessingInstructions>
		<ignoreWhitespace public="1" static="1"><x path="Bool"/></ignoreWhitespace>
		<prettyIndent public="1" static="1"><x path="Int"/></prettyIndent>
		<prettyPrinting public="1" static="1"><x path="Bool"/></prettyPrinting>
		<defaultSettings public="1" set="method" static="1"><f a=""><d/></f></defaultSettings>
		<setSettings public="1" set="method" static="1"><f a="?o">
	<d/>
	<x path="Void"/>
</f></setSettings>
		<settings public="1" set="method" static="1"><f a=""><d/></f></settings>
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></normalize>
		<notification public="1" set="method"><f a=""><t path="flash.utils.Function"/></f></notification>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<setNotification public="1" set="method"><f a="f">
	<t path="flash.utils.Function"/>
	<d/>
</f></setNotification>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toJSON public="1">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
		<haxe_dynamic><c path="flash.xml.XMLList"/></haxe_dynamic>
	</class>
	<class path="flash.xml.XMLList" params="" file="C:\HaxeToolkit\haxe\std/flash/xml/XMLList.hx" extern="1">
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></normalize>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toJSON public="1">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="haxe.Function" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which
		* is public and
		* unifies with the type used for type parameter `T`.

	If a type parameter A is assigned to a type parameter B which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints" interface="1"><meta><m n=":keep"/></meta></class>
	<class path="haxe.EnumTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="50" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="63" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="79" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="96" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="108" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an 
  [extension](http://haxe.org/manual/lf-static-extension.html) to the 
  `enum` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="132" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="143" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="157" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="169" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<match public="1" set="method" static="1">
			<f a="e:pattern">
				<x path="EnumValue"/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
		</match>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an 
  [extension](http://haxe.org/manual/lf-static-extension.html) to the 
  `EnumValue` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\HaxeToolkit\haxe\std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<t path="Null"><c path="Array"><d/></c></t>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Timer" params="" file="C:\HaxeToolkit\haxe\std/haxe/Timer.hx">
		<id><t path="Null"><x path="Int"/></t></id>
		<stop public="1" set="method" line="88">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:
			var timer = new haxe.Timer(1000); // 1000ms delay
			timer.run = function() { ... }

		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="60">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this.run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The Timer class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the Timer class with a given
	interval, set its run() method to a custom function to be invoked and
	eventually call stop() to stop the Timer.

	Note that a running Timer may or may not prevent the program to exit
	automatically when main() returns.

	It is also possible to extend this class and override its run() method in
	the child class.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see http://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.ObjectMap" params="K:V" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/ObjectMap.hx">
		<extends path="flash.utils.Dictionary"/>
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<new public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see http://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Constant" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v">
			<c path="String"/>
			<haxe_doc>Represents an integer literal.</haxe_doc>
		</CInt>
		<CFloat a="f"><c path="String"/></CFloat>
		<CString a="s"><c path="String"/></CString>
		<CIdent a="s"><c path="String"/></CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
		</CRegexp>
		<haxe_doc>Represents a constant.
	@see http://haxe.org/manual/expression-constants.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=`
		`-=`
		`/=`
		`*=`
		`<<=`
		`>>=`
		`>>>=`
		`|=`
		`&=`
		`^=`
		`%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
		<haxe_doc>A binary operator.
	@see http://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<haxe_doc>A unary operator.
	@see http://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see http://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see http://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see http://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
			<name><c path="String"/></name>
			<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see http://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type><e path="haxe.macro.ComplexType"/></type>
			<name><c path="String"/></name>
			<expr><t path="haxe.macro.Expr"/></expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@http://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ExprDef" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c">
			<e path="haxe.macro.Constant"/>
			<haxe_doc>A constant.</haxe_doc>
		</EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</EBinop>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
			<haxe_doc>Field access on `e.field`.</haxe_doc>
		</EField>
		<EParenthesis a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</EParenthesis>
		<EObjectDecl a="fields">
			<c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</EObjectDecl>
		<EArrayDecl a="values">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A call `e(params)`.</haxe_doc>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A constructor call `new t(params)`.</haxe_doc>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</EUnop>
		<EVars a="vars">
			<c path="Array"><t path="haxe.macro.Var"/></c>
			<haxe_doc>Variable declarations.</haxe_doc>
		</EVars>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</EFunction>
		<EBlock a="exprs">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A block of expressions `{exprs}`.</haxe_doc>
		</EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</EFor>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(e1 in e2)` expression.</haxe_doc>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
			<haxe_doc>Represents a `switch` expression with related cases and an optional.
		`default` case if edef != null.</haxe_doc>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</ETry>
		<EReturn a="?e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</EReturn>
		<EBreak><haxe_doc>A `break` expression.</haxe_doc></EBreak>
		<EContinue><haxe_doc>A `continue` expression.</haxe_doc></EContinue>
		<EUntyped a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An `untyped e` source code.</haxe_doc>
		</EUntyped>
		<EThrow a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</ECast>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Internally used to provide completion.</haxe_doc>
		</EDisplay>
		<EDisplayNew a="t">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Internally used to provide completion.</haxe_doc>
		</EDisplayNew>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(econd) ? eif : eelse` expression.</haxe_doc>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>A `(e:t)` expression.</haxe_doc>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `@m e` expression.</haxe_doc>
		</EMeta>
		<haxe_doc>Represents the kind of a node in the AST.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Represents the type path.</haxe_doc>
		</TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a function type.
		@see http://haxe.org/manual/types-function.html</haxe_doc>
		</TFunction>
		<TAnonymous a="fields">
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc>Represents an anonymous structure type.
		@see http://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TParent a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc><![CDATA[Represents parentheses around a type, e.g. the `(Int -> Void)` part in
		`(Int -> Void) -> String`.]]></haxe_doc>
		</TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc><![CDATA[Represents typedef extensions `> Iterable<T>`.
		The array `p` holds the type paths to the given types.
		@see http://haxe.org/manual/type-system-extensions.html]]></haxe_doc>
		</TExtend>
		<TOptional a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an optional type.</haxe_doc>
		</TOptional>
		<haxe_doc>Represents a type syntax in the AST.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<t path="Null"><t path="Null"><c path="String"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has name = Module, sub = Type, if available.</haxe_doc>
			</sub>
			<params>
				<t path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeParam" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc></haxe_doc>
		</TPType>
		<TPExpr a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc></haxe_doc>
		</TPExpr>
		<haxe_doc><![CDATA[Represents a concrete type parameters in the AST.

	Haxe allows expressions in concrete type parameters, e.g.
	`new YourType<["hello", "world"]>`. In that case the value is `TPExpr` while
	in the normal case it's `TPType`.]]></haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<constraints>
				<t path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos><t path="haxe.macro.Position"/></pos>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></t>
				<meta><m n=":optional"/></meta>
			</params>
			<name><c path="String"/></name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<t path="Null"><t path="Null"><c path="String"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<t path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see http://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The paramater type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ImportExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AnonType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParameter" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<expr set="method">
				<f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.BaseType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<x path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</x>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see http://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolve>
				<t path="Null"><t path="haxe.macro.ClassField"/></t>
				<meta><m n=":require"><e><![CDATA[haxe_ver >= 3.3]]></e></m></meta>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see http://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TVar" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<t path="Null"><t path="haxe.macro.MetaAccess"/></t>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TFunc" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<class path="tweenx909.ChainX" params="" file="src/tweenx/tweenx909/ChainX.hx">
		<alpha public="1" params="T" set="method" line="6" static="1"><f a="tween:alpha">
	<c path="alpha.T"/>
	<x path="Float"/>
	<c path="alpha.T"/>
</f></alpha>
		<_alpha public="1" params="T" set="method" line="15" static="1"><f a="tween:alpha">
	<c path="_alpha.T"/>
	<x path="Float"/>
	<c path="_alpha.T"/>
</f></_alpha>
		<__alpha public="1" params="T" set="method" line="24" static="1"><f a="tween:alpha">
	<c path="__alpha.T"/>
	<x path="Float"/>
	<c path="__alpha.T"/>
</f></__alpha>
		<x public="1" params="T" set="method" line="33" static="1"><f a="tween:x">
	<c path="x.T"/>
	<x path="Float"/>
	<c path="x.T"/>
</f></x>
		<_x public="1" params="T" set="method" line="42" static="1"><f a="tween:x">
	<c path="_x.T"/>
	<x path="Float"/>
	<c path="_x.T"/>
</f></_x>
		<__x public="1" params="T" set="method" line="51" static="1"><f a="tween:x">
	<c path="__x.T"/>
	<x path="Float"/>
	<c path="__x.T"/>
</f></__x>
		<y public="1" params="T" set="method" line="60" static="1"><f a="tween:y">
	<c path="y.T"/>
	<x path="Float"/>
	<c path="y.T"/>
</f></y>
		<_y public="1" params="T" set="method" line="69" static="1"><f a="tween:y">
	<c path="_y.T"/>
	<x path="Float"/>
	<c path="_y.T"/>
</f></_y>
		<__y public="1" params="T" set="method" line="78" static="1"><f a="tween:y">
	<c path="__y.T"/>
	<x path="Float"/>
	<c path="__y.T"/>
</f></__y>
		<z public="1" params="T" set="method" line="87" static="1"><f a="tween:z">
	<c path="z.T"/>
	<x path="Float"/>
	<c path="z.T"/>
</f></z>
		<_z public="1" params="T" set="method" line="96" static="1"><f a="tween:z">
	<c path="_z.T"/>
	<x path="Float"/>
	<c path="_z.T"/>
</f></_z>
		<__z public="1" params="T" set="method" line="105" static="1"><f a="tween:z">
	<c path="__z.T"/>
	<x path="Float"/>
	<c path="__z.T"/>
</f></__z>
		<scaleX public="1" params="T" set="method" line="114" static="1"><f a="tween:scaleX">
	<c path="scaleX.T"/>
	<x path="Float"/>
	<c path="scaleX.T"/>
</f></scaleX>
		<_scaleX public="1" params="T" set="method" line="123" static="1"><f a="tween:scaleX">
	<c path="_scaleX.T"/>
	<x path="Float"/>
	<c path="_scaleX.T"/>
</f></_scaleX>
		<__scaleX public="1" params="T" set="method" line="132" static="1"><f a="tween:scaleX">
	<c path="__scaleX.T"/>
	<x path="Float"/>
	<c path="__scaleX.T"/>
</f></__scaleX>
		<scaleY public="1" params="T" set="method" line="141" static="1"><f a="tween:scaleY">
	<c path="scaleY.T"/>
	<x path="Float"/>
	<c path="scaleY.T"/>
</f></scaleY>
		<_scaleY public="1" params="T" set="method" line="150" static="1"><f a="tween:scaleY">
	<c path="_scaleY.T"/>
	<x path="Float"/>
	<c path="_scaleY.T"/>
</f></_scaleY>
		<__scaleY public="1" params="T" set="method" line="159" static="1"><f a="tween:scaleY">
	<c path="__scaleY.T"/>
	<x path="Float"/>
	<c path="__scaleY.T"/>
</f></__scaleY>
		<scaleZ public="1" params="T" set="method" line="168" static="1"><f a="tween:scaleZ">
	<c path="scaleZ.T"/>
	<x path="Float"/>
	<c path="scaleZ.T"/>
</f></scaleZ>
		<_scaleZ public="1" params="T" set="method" line="177" static="1"><f a="tween:scaleZ">
	<c path="_scaleZ.T"/>
	<x path="Float"/>
	<c path="_scaleZ.T"/>
</f></_scaleZ>
		<__scaleZ public="1" params="T" set="method" line="186" static="1"><f a="tween:scaleZ">
	<c path="__scaleZ.T"/>
	<x path="Float"/>
	<c path="__scaleZ.T"/>
</f></__scaleZ>
		<rotation public="1" params="T" set="method" line="195" static="1"><f a="tween:rotation">
	<c path="rotation.T"/>
	<x path="Float"/>
	<c path="rotation.T"/>
</f></rotation>
		<_rotation public="1" params="T" set="method" line="204" static="1"><f a="tween:rotation">
	<c path="_rotation.T"/>
	<x path="Float"/>
	<c path="_rotation.T"/>
</f></_rotation>
		<__rotation public="1" params="T" set="method" line="213" static="1"><f a="tween:rotation">
	<c path="__rotation.T"/>
	<x path="Float"/>
	<c path="__rotation.T"/>
</f></__rotation>
		<rotationX public="1" params="T" set="method" line="222" static="1"><f a="tween:rotationX">
	<c path="rotationX.T"/>
	<x path="Float"/>
	<c path="rotationX.T"/>
</f></rotationX>
		<_rotationX public="1" params="T" set="method" line="231" static="1"><f a="tween:rotationX">
	<c path="_rotationX.T"/>
	<x path="Float"/>
	<c path="_rotationX.T"/>
</f></_rotationX>
		<__rotationX public="1" params="T" set="method" line="240" static="1"><f a="tween:rotationX">
	<c path="__rotationX.T"/>
	<x path="Float"/>
	<c path="__rotationX.T"/>
</f></__rotationX>
		<rotationY public="1" params="T" set="method" line="249" static="1"><f a="tween:rotationY">
	<c path="rotationY.T"/>
	<x path="Float"/>
	<c path="rotationY.T"/>
</f></rotationY>
		<_rotationY public="1" params="T" set="method" line="258" static="1"><f a="tween:rotationY">
	<c path="_rotationY.T"/>
	<x path="Float"/>
	<c path="_rotationY.T"/>
</f></_rotationY>
		<__rotationY public="1" params="T" set="method" line="267" static="1"><f a="tween:rotationY">
	<c path="__rotationY.T"/>
	<x path="Float"/>
	<c path="__rotationY.T"/>
</f></__rotationY>
		<rotationZ public="1" params="T" set="method" line="276" static="1"><f a="tween:rotationZ">
	<c path="rotationZ.T"/>
	<x path="Float"/>
	<c path="rotationZ.T"/>
</f></rotationZ>
		<_rotationZ public="1" params="T" set="method" line="285" static="1"><f a="tween:rotationZ">
	<c path="_rotationZ.T"/>
	<x path="Float"/>
	<c path="_rotationZ.T"/>
</f></_rotationZ>
		<__rotationZ public="1" params="T" set="method" line="294" static="1"><f a="tween:rotationZ">
	<c path="__rotationZ.T"/>
	<x path="Float"/>
	<c path="__rotationZ.T"/>
</f></__rotationZ>
		<a public="1" params="T" set="method" line="303" static="1"><f a="tween:a">
	<c path="a.T"/>
	<x path="Float"/>
	<c path="a.T"/>
</f></a>
		<_a public="1" params="T" set="method" line="312" static="1"><f a="tween:a">
	<c path="_a.T"/>
	<x path="Float"/>
	<c path="_a.T"/>
</f></_a>
		<__a public="1" params="T" set="method" line="321" static="1"><f a="tween:a">
	<c path="__a.T"/>
	<x path="Float"/>
	<c path="__a.T"/>
</f></__a>
		<b public="1" params="T" set="method" line="330" static="1"><f a="tween:b">
	<c path="b.T"/>
	<x path="Float"/>
	<c path="b.T"/>
</f></b>
		<_b public="1" params="T" set="method" line="339" static="1"><f a="tween:b">
	<c path="_b.T"/>
	<x path="Float"/>
	<c path="_b.T"/>
</f></_b>
		<__b public="1" params="T" set="method" line="348" static="1"><f a="tween:b">
	<c path="__b.T"/>
	<x path="Float"/>
	<c path="__b.T"/>
</f></__b>
		<c public="1" params="T" set="method" line="357" static="1"><f a="tween:c">
	<c path="c.T"/>
	<x path="Float"/>
	<c path="c.T"/>
</f></c>
		<_c public="1" params="T" set="method" line="366" static="1"><f a="tween:c">
	<c path="_c.T"/>
	<x path="Float"/>
	<c path="_c.T"/>
</f></_c>
		<__c public="1" params="T" set="method" line="375" static="1"><f a="tween:c">
	<c path="__c.T"/>
	<x path="Float"/>
	<c path="__c.T"/>
</f></__c>
		<d public="1" params="T" set="method" line="384" static="1"><f a="tween:d">
	<c path="d.T"/>
	<x path="Float"/>
	<c path="d.T"/>
</f></d>
		<_d public="1" params="T" set="method" line="393" static="1"><f a="tween:d">
	<c path="_d.T"/>
	<x path="Float"/>
	<c path="_d.T"/>
</f></_d>
		<__d public="1" params="T" set="method" line="402" static="1"><f a="tween:d">
	<c path="__d.T"/>
	<x path="Float"/>
	<c path="__d.T"/>
</f></__d>
		<tx public="1" params="T" set="method" line="411" static="1"><f a="tween:tx">
	<c path="tx.T"/>
	<x path="Float"/>
	<c path="tx.T"/>
</f></tx>
		<_tx public="1" params="T" set="method" line="420" static="1"><f a="tween:tx">
	<c path="_tx.T"/>
	<x path="Float"/>
	<c path="_tx.T"/>
</f></_tx>
		<__tx public="1" params="T" set="method" line="429" static="1"><f a="tween:tx">
	<c path="__tx.T"/>
	<x path="Float"/>
	<c path="__tx.T"/>
</f></__tx>
		<ty public="1" params="T" set="method" line="438" static="1"><f a="tween:ty">
	<c path="ty.T"/>
	<x path="Float"/>
	<c path="ty.T"/>
</f></ty>
		<_ty public="1" params="T" set="method" line="447" static="1"><f a="tween:ty">
	<c path="_ty.T"/>
	<x path="Float"/>
	<c path="_ty.T"/>
</f></_ty>
		<__ty public="1" params="T" set="method" line="456" static="1"><f a="tween:ty">
	<c path="__ty.T"/>
	<x path="Float"/>
	<c path="__ty.T"/>
</f></__ty>
		<top public="1" params="T" set="method" line="465" static="1"><f a="tween:top">
	<c path="top.T"/>
	<x path="Float"/>
	<c path="top.T"/>
</f></top>
		<_top public="1" params="T" set="method" line="474" static="1"><f a="tween:top">
	<c path="_top.T"/>
	<x path="Float"/>
	<c path="_top.T"/>
</f></_top>
		<__top public="1" params="T" set="method" line="483" static="1"><f a="tween:top">
	<c path="__top.T"/>
	<x path="Float"/>
	<c path="__top.T"/>
</f></__top>
		<left public="1" params="T" set="method" line="492" static="1"><f a="tween:left">
	<c path="left.T"/>
	<x path="Float"/>
	<c path="left.T"/>
</f></left>
		<_left public="1" params="T" set="method" line="501" static="1"><f a="tween:left">
	<c path="_left.T"/>
	<x path="Float"/>
	<c path="_left.T"/>
</f></_left>
		<__left public="1" params="T" set="method" line="510" static="1"><f a="tween:left">
	<c path="__left.T"/>
	<x path="Float"/>
	<c path="__left.T"/>
</f></__left>
		<right public="1" params="T" set="method" line="519" static="1"><f a="tween:right">
	<c path="right.T"/>
	<x path="Float"/>
	<c path="right.T"/>
</f></right>
		<_right public="1" params="T" set="method" line="528" static="1"><f a="tween:right">
	<c path="_right.T"/>
	<x path="Float"/>
	<c path="_right.T"/>
</f></_right>
		<__right public="1" params="T" set="method" line="537" static="1"><f a="tween:right">
	<c path="__right.T"/>
	<x path="Float"/>
	<c path="__right.T"/>
</f></__right>
		<bottom public="1" params="T" set="method" line="546" static="1"><f a="tween:bottom">
	<c path="bottom.T"/>
	<x path="Float"/>
	<c path="bottom.T"/>
</f></bottom>
		<_bottom public="1" params="T" set="method" line="555" static="1"><f a="tween:bottom">
	<c path="_bottom.T"/>
	<x path="Float"/>
	<c path="_bottom.T"/>
</f></_bottom>
		<__bottom public="1" params="T" set="method" line="564" static="1"><f a="tween:bottom">
	<c path="__bottom.T"/>
	<x path="Float"/>
	<c path="__bottom.T"/>
</f></__bottom>
		<width public="1" params="T" set="method" line="573" static="1"><f a="tween:width">
	<c path="width.T"/>
	<x path="Float"/>
	<c path="width.T"/>
</f></width>
		<_width public="1" params="T" set="method" line="582" static="1"><f a="tween:width">
	<c path="_width.T"/>
	<x path="Float"/>
	<c path="_width.T"/>
</f></_width>
		<__width public="1" params="T" set="method" line="591" static="1"><f a="tween:width">
	<c path="__width.T"/>
	<x path="Float"/>
	<c path="__width.T"/>
</f></__width>
		<height public="1" params="T" set="method" line="600" static="1"><f a="tween:height">
	<c path="height.T"/>
	<x path="Float"/>
	<c path="height.T"/>
</f></height>
		<_height public="1" params="T" set="method" line="609" static="1"><f a="tween:height">
	<c path="_height.T"/>
	<x path="Float"/>
	<c path="_height.T"/>
</f></_height>
		<__height public="1" params="T" set="method" line="618" static="1"><f a="tween:height">
	<c path="__height.T"/>
	<x path="Float"/>
	<c path="__height.T"/>
</f></__height>
		<alphaOffset public="1" params="T" set="method" line="627" static="1"><f a="tween:alphaOffset">
	<c path="alphaOffset.T"/>
	<x path="Float"/>
	<c path="alphaOffset.T"/>
</f></alphaOffset>
		<_alphaOffset public="1" params="T" set="method" line="636" static="1"><f a="tween:alphaOffset">
	<c path="_alphaOffset.T"/>
	<x path="Float"/>
	<c path="_alphaOffset.T"/>
</f></_alphaOffset>
		<__alphaOffset public="1" params="T" set="method" line="645" static="1"><f a="tween:alphaOffset">
	<c path="__alphaOffset.T"/>
	<x path="Float"/>
	<c path="__alphaOffset.T"/>
</f></__alphaOffset>
		<alphaMultiplier public="1" params="T" set="method" line="654" static="1"><f a="tween:alphaMultiplier">
	<c path="alphaMultiplier.T"/>
	<x path="Float"/>
	<c path="alphaMultiplier.T"/>
</f></alphaMultiplier>
		<_alphaMultiplier public="1" params="T" set="method" line="663" static="1"><f a="tween:alphaMultiplier">
	<c path="_alphaMultiplier.T"/>
	<x path="Float"/>
	<c path="_alphaMultiplier.T"/>
</f></_alphaMultiplier>
		<__alphaMultiplier public="1" params="T" set="method" line="672" static="1"><f a="tween:alphaMultiplier">
	<c path="__alphaMultiplier.T"/>
	<x path="Float"/>
	<c path="__alphaMultiplier.T"/>
</f></__alphaMultiplier>
		<redOffset public="1" params="T" set="method" line="681" static="1"><f a="tween:redOffset">
	<c path="redOffset.T"/>
	<x path="Float"/>
	<c path="redOffset.T"/>
</f></redOffset>
		<_redOffset public="1" params="T" set="method" line="690" static="1"><f a="tween:redOffset">
	<c path="_redOffset.T"/>
	<x path="Float"/>
	<c path="_redOffset.T"/>
</f></_redOffset>
		<__redOffset public="1" params="T" set="method" line="699" static="1"><f a="tween:redOffset">
	<c path="__redOffset.T"/>
	<x path="Float"/>
	<c path="__redOffset.T"/>
</f></__redOffset>
		<redMultiplier public="1" params="T" set="method" line="708" static="1"><f a="tween:redMultiplier">
	<c path="redMultiplier.T"/>
	<x path="Float"/>
	<c path="redMultiplier.T"/>
</f></redMultiplier>
		<_redMultiplier public="1" params="T" set="method" line="717" static="1"><f a="tween:redMultiplier">
	<c path="_redMultiplier.T"/>
	<x path="Float"/>
	<c path="_redMultiplier.T"/>
</f></_redMultiplier>
		<__redMultiplier public="1" params="T" set="method" line="726" static="1"><f a="tween:redMultiplier">
	<c path="__redMultiplier.T"/>
	<x path="Float"/>
	<c path="__redMultiplier.T"/>
</f></__redMultiplier>
		<greenOffset public="1" params="T" set="method" line="735" static="1"><f a="tween:greenOffset">
	<c path="greenOffset.T"/>
	<x path="Float"/>
	<c path="greenOffset.T"/>
</f></greenOffset>
		<_greenOffset public="1" params="T" set="method" line="744" static="1"><f a="tween:greenOffset">
	<c path="_greenOffset.T"/>
	<x path="Float"/>
	<c path="_greenOffset.T"/>
</f></_greenOffset>
		<__greenOffset public="1" params="T" set="method" line="753" static="1"><f a="tween:greenOffset">
	<c path="__greenOffset.T"/>
	<x path="Float"/>
	<c path="__greenOffset.T"/>
</f></__greenOffset>
		<greenMultiplier public="1" params="T" set="method" line="762" static="1"><f a="tween:greenMultiplier">
	<c path="greenMultiplier.T"/>
	<x path="Float"/>
	<c path="greenMultiplier.T"/>
</f></greenMultiplier>
		<_greenMultiplier public="1" params="T" set="method" line="771" static="1"><f a="tween:greenMultiplier">
	<c path="_greenMultiplier.T"/>
	<x path="Float"/>
	<c path="_greenMultiplier.T"/>
</f></_greenMultiplier>
		<__greenMultiplier public="1" params="T" set="method" line="780" static="1"><f a="tween:greenMultiplier">
	<c path="__greenMultiplier.T"/>
	<x path="Float"/>
	<c path="__greenMultiplier.T"/>
</f></__greenMultiplier>
		<blueOffset public="1" params="T" set="method" line="789" static="1"><f a="tween:blueOffset">
	<c path="blueOffset.T"/>
	<x path="Float"/>
	<c path="blueOffset.T"/>
</f></blueOffset>
		<_blueOffset public="1" params="T" set="method" line="798" static="1"><f a="tween:blueOffset">
	<c path="_blueOffset.T"/>
	<x path="Float"/>
	<c path="_blueOffset.T"/>
</f></_blueOffset>
		<__blueOffset public="1" params="T" set="method" line="807" static="1"><f a="tween:blueOffset">
	<c path="__blueOffset.T"/>
	<x path="Float"/>
	<c path="__blueOffset.T"/>
</f></__blueOffset>
		<blueMultiplier public="1" params="T" set="method" line="816" static="1"><f a="tween:blueMultiplier">
	<c path="blueMultiplier.T"/>
	<x path="Float"/>
	<c path="blueMultiplier.T"/>
</f></blueMultiplier>
		<_blueMultiplier public="1" params="T" set="method" line="825" static="1"><f a="tween:blueMultiplier">
	<c path="_blueMultiplier.T"/>
	<x path="Float"/>
	<c path="_blueMultiplier.T"/>
</f></_blueMultiplier>
		<__blueMultiplier public="1" params="T" set="method" line="834" static="1"><f a="tween:blueMultiplier">
	<c path="__blueMultiplier.T"/>
	<x path="Float"/>
	<c path="__blueMultiplier.T"/>
</f></__blueMultiplier>
		<blurX public="1" params="T" set="method" line="843" static="1"><f a="tween:blurX">
	<c path="blurX.T"/>
	<x path="Float"/>
	<c path="blurX.T"/>
</f></blurX>
		<_blurX public="1" params="T" set="method" line="852" static="1"><f a="tween:blurX">
	<c path="_blurX.T"/>
	<x path="Float"/>
	<c path="_blurX.T"/>
</f></_blurX>
		<__blurX public="1" params="T" set="method" line="861" static="1"><f a="tween:blurX">
	<c path="__blurX.T"/>
	<x path="Float"/>
	<c path="__blurX.T"/>
</f></__blurX>
		<blurY public="1" params="T" set="method" line="870" static="1"><f a="tween:blurY">
	<c path="blurY.T"/>
	<x path="Float"/>
	<c path="blurY.T"/>
</f></blurY>
		<_blurY public="1" params="T" set="method" line="879" static="1"><f a="tween:blurY">
	<c path="_blurY.T"/>
	<x path="Float"/>
	<c path="_blurY.T"/>
</f></_blurY>
		<__blurY public="1" params="T" set="method" line="888" static="1"><f a="tween:blurY">
	<c path="__blurY.T"/>
	<x path="Float"/>
	<c path="__blurY.T"/>
</f></__blurY>
		<highlightAlpha public="1" params="T" set="method" line="897" static="1"><f a="tween:highlightAlpha">
	<c path="highlightAlpha.T"/>
	<x path="Float"/>
	<c path="highlightAlpha.T"/>
</f></highlightAlpha>
		<_highlightAlpha public="1" params="T" set="method" line="906" static="1"><f a="tween:highlightAlpha">
	<c path="_highlightAlpha.T"/>
	<x path="Float"/>
	<c path="_highlightAlpha.T"/>
</f></_highlightAlpha>
		<__highlightAlpha public="1" params="T" set="method" line="915" static="1"><f a="tween:highlightAlpha">
	<c path="__highlightAlpha.T"/>
	<x path="Float"/>
	<c path="__highlightAlpha.T"/>
</f></__highlightAlpha>
		<highlightColor public="1" params="T" set="method" line="924" static="1"><f a="tween:highlightColor">
	<c path="highlightColor.T"/>
	<t path="tweenx909._ChainX.IntOrColor"/>
	<c path="highlightColor.T"/>
</f></highlightColor>
		<shadowAlpha public="1" params="T" set="method" line="933" static="1"><f a="tween:shadowAlpha">
	<c path="shadowAlpha.T"/>
	<x path="Float"/>
	<c path="shadowAlpha.T"/>
</f></shadowAlpha>
		<_shadowAlpha public="1" params="T" set="method" line="942" static="1"><f a="tween:shadowAlpha">
	<c path="_shadowAlpha.T"/>
	<x path="Float"/>
	<c path="_shadowAlpha.T"/>
</f></_shadowAlpha>
		<__shadowAlpha public="1" params="T" set="method" line="951" static="1"><f a="tween:shadowAlpha">
	<c path="__shadowAlpha.T"/>
	<x path="Float"/>
	<c path="__shadowAlpha.T"/>
</f></__shadowAlpha>
		<shadowColor public="1" params="T" set="method" line="960" static="1"><f a="tween:shadowColor">
	<c path="shadowColor.T"/>
	<t path="tweenx909._ChainX.IntOrColor"/>
	<c path="shadowColor.T"/>
</f></shadowColor>
		<strength public="1" params="T" set="method" line="969" static="1"><f a="tween:strength">
	<c path="strength.T"/>
	<x path="Float"/>
	<c path="strength.T"/>
</f></strength>
		<_strength public="1" params="T" set="method" line="978" static="1"><f a="tween:strength">
	<c path="_strength.T"/>
	<x path="Float"/>
	<c path="_strength.T"/>
</f></_strength>
		<__strength public="1" params="T" set="method" line="987" static="1"><f a="tween:strength">
	<c path="__strength.T"/>
	<x path="Float"/>
	<c path="__strength.T"/>
</f></__strength>
		<quality public="1" params="T" set="method" line="996" static="1"><f a="tween:quality">
	<c path="quality.T"/>
	<x path="Float"/>
	<c path="quality.T"/>
</f></quality>
		<_quality public="1" params="T" set="method" line="1005" static="1"><f a="tween:quality">
	<c path="_quality.T"/>
	<x path="Float"/>
	<c path="_quality.T"/>
</f></_quality>
		<__quality public="1" params="T" set="method" line="1014" static="1"><f a="tween:quality">
	<c path="__quality.T"/>
	<x path="Float"/>
	<c path="__quality.T"/>
</f></__quality>
		<color public="1" params="T" set="method" line="1023" static="1"><f a="tween:color">
	<c path="color.T"/>
	<t path="tweenx909._ChainX.IntOrColor"/>
	<c path="color.T"/>
</f></color>
		<angle public="1" params="T" set="method" line="1032" static="1"><f a="tween:angle">
	<c path="angle.T"/>
	<x path="Float"/>
	<c path="angle.T"/>
</f></angle>
		<_angle public="1" params="T" set="method" line="1041" static="1"><f a="tween:angle">
	<c path="_angle.T"/>
	<x path="Float"/>
	<c path="_angle.T"/>
</f></_angle>
		<__angle public="1" params="T" set="method" line="1050" static="1"><f a="tween:angle">
	<c path="__angle.T"/>
	<x path="Float"/>
	<c path="__angle.T"/>
</f></__angle>
		<distance public="1" params="T" set="method" line="1059" static="1"><f a="tween:distance">
	<c path="distance.T"/>
	<x path="Float"/>
	<c path="distance.T"/>
</f></distance>
		<_distance public="1" params="T" set="method" line="1068" static="1"><f a="tween:distance">
	<c path="_distance.T"/>
	<x path="Float"/>
	<c path="_distance.T"/>
</f></_distance>
		<__distance public="1" params="T" set="method" line="1077" static="1"><f a="tween:distance">
	<c path="__distance.T"/>
	<x path="Float"/>
	<c path="__distance.T"/>
</f></__distance>
		<bias public="1" params="T" set="method" line="1086" static="1"><f a="tween:bias">
	<c path="bias.T"/>
	<x path="Float"/>
	<c path="bias.T"/>
</f></bias>
		<_bias public="1" params="T" set="method" line="1095" static="1"><f a="tween:bias">
	<c path="_bias.T"/>
	<x path="Float"/>
	<c path="_bias.T"/>
</f></_bias>
		<__bias public="1" params="T" set="method" line="1104" static="1"><f a="tween:bias">
	<c path="__bias.T"/>
	<x path="Float"/>
	<c path="__bias.T"/>
</f></__bias>
		<bitmapData public="1" params="T" set="method" line="1113" static="1"><f a="tween:bitmapData">
	<c path="bitmapData.T"/>
	<d/>
	<c path="bitmapData.T"/>
</f></bitmapData>
		<alphas public="1" params="T" set="method" line="1122" static="1"><f a="tween:alphas">
	<c path="alphas.T"/>
	<c path="Array"><x path="Float"/></c>
	<c path="alphas.T"/>
</f></alphas>
		<colors public="1" params="T" set="method" line="1131" static="1"><f a="tween:colors">
	<c path="colors.T"/>
	<c path="Array"><d/></c>
	<c path="colors.T"/>
</f></colors>
		<ratios public="1" params="T" set="method" line="1140" static="1"><f a="tween:ratios">
	<c path="ratios.T"/>
	<c path="Array"><x path="Float"/></c>
	<c path="ratios.T"/>
</f></ratios>
		<visible public="1" params="T" set="method" line="1149" static="1"><f a="tween:visible">
	<c path="visible.T"/>
	<x path="Bool"/>
	<c path="visible.T"/>
</f></visible>
		<knockout public="1" params="T" set="method" line="1158" static="1"><f a="tween:knockout">
	<c path="knockout.T"/>
	<x path="Bool"/>
	<c path="knockout.T"/>
</f></knockout>
		<buttonEnabled public="1" params="T" set="method" line="1167" static="1"><f a="tween:buttonEnabled">
	<c path="buttonEnabled.T"/>
	<x path="Bool"/>
	<c path="buttonEnabled.T"/>
</f></buttonEnabled>
		<buttonChildren public="1" params="T" set="method" line="1176" static="1"><f a="tween:buttonChildren">
	<c path="buttonChildren.T"/>
	<x path="Bool"/>
	<c path="buttonChildren.T"/>
</f></buttonChildren>
		<inner public="1" params="T" set="method" line="1185" static="1"><f a="tween:inner">
	<c path="inner.T"/>
	<x path="Bool"/>
	<c path="inner.T"/>
</f></inner>
		<xy public="1" params="T" set="method" line="1194" static="1"><f a="tween:x:y">
	<c path="xy.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="xy.T"/>
</f></xy>
		<_xy public="1" params="T" set="method" line="1204" static="1"><f a="tween:x:y">
	<c path="_xy.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="_xy.T"/>
</f></_xy>
		<__xy public="1" params="T" set="method" line="1214" static="1"><f a="tween:x:y">
	<c path="__xy.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="__xy.T"/>
</f></__xy>
		<scaleXY public="1" params="T" set="method" line="1224" static="1"><f a="tween:scaleX:scaleY">
	<c path="scaleXY.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="scaleXY.T"/>
</f></scaleXY>
		<_scaleXY public="1" params="T" set="method" line="1234" static="1"><f a="tween:scaleX:scaleY">
	<c path="_scaleXY.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="_scaleXY.T"/>
</f></_scaleXY>
		<__scaleXY public="1" params="T" set="method" line="1244" static="1"><f a="tween:scaleX:scaleY">
	<c path="__scaleXY.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="__scaleXY.T"/>
</f></__scaleXY>
		<rotationXY public="1" params="T" set="method" line="1254" static="1"><f a="tween:rotationX:rotationY">
	<c path="rotationXY.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="rotationXY.T"/>
</f></rotationXY>
		<_rotationXY public="1" params="T" set="method" line="1264" static="1"><f a="tween:rotationX:rotationY">
	<c path="_rotationXY.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="_rotationXY.T"/>
</f></_rotationXY>
		<__rotationXY public="1" params="T" set="method" line="1274" static="1"><f a="tween:rotationX:rotationY">
	<c path="__rotationXY.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="__rotationXY.T"/>
</f></__rotationXY>
		<xyz public="1" params="T" set="method" line="1284" static="1"><f a="tween:x:y:z">
	<c path="xyz.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="xyz.T"/>
</f></xyz>
		<_xyz public="1" params="T" set="method" line="1295" static="1"><f a="tween:x:y:z">
	<c path="_xyz.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="_xyz.T"/>
</f></_xyz>
		<__xyz public="1" params="T" set="method" line="1306" static="1"><f a="tween:x:y:z">
	<c path="__xyz.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="__xyz.T"/>
</f></__xyz>
		<scaleXYZ public="1" params="T" set="method" line="1317" static="1"><f a="tween:scaleX:scaleY:scaleZ">
	<c path="scaleXYZ.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="scaleXYZ.T"/>
</f></scaleXYZ>
		<_scaleXYZ public="1" params="T" set="method" line="1328" static="1"><f a="tween:scaleX:scaleY:scaleZ">
	<c path="_scaleXYZ.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="_scaleXYZ.T"/>
</f></_scaleXYZ>
		<__scaleXYZ public="1" params="T" set="method" line="1339" static="1"><f a="tween:scaleX:scaleY:scaleZ">
	<c path="__scaleXYZ.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="__scaleXYZ.T"/>
</f></__scaleXYZ>
		<rotationXYZ public="1" params="T" set="method" line="1350" static="1"><f a="tween:rotationX:rotationY:rotationZ">
	<c path="rotationXYZ.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="rotationXYZ.T"/>
</f></rotationXYZ>
		<_rotationXYZ public="1" params="T" set="method" line="1361" static="1"><f a="tween:rotationX:rotationY:rotationZ">
	<c path="_rotationXYZ.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="_rotationXYZ.T"/>
</f></_rotationXYZ>
		<__rotationXYZ public="1" params="T" set="method" line="1372" static="1"><f a="tween:rotationX:rotationY:rotationZ">
	<c path="__rotationXYZ.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="__rotationXYZ.T"/>
</f></__rotationXYZ>
	</class>
	<typedef path="tweenx909._ChainX.IArray" params="T" file="src/tweenx/tweenx909/ChainX.hx" private="1" module="tweenx909.ChainX"><a>
	<length><x path="Int"/></length>
	<iterator set="method"><f a=""><t path="Iterator"><d/></t></f></iterator>
</a></typedef>
	<typedef path="tweenx909._ChainX.IntOrColor" params="" file="src/tweenx/tweenx909/ChainX.hx" private="1" module="tweenx909.ChainX"><d/></typedef>
	<typedef path="tweenx909._ChainX.IStandardTweenX" params="T" file="src/tweenx/tweenx909/ChainX.hx" private="1" module="tweenx909.ChainX"><a>
	<checkInited set="method"><f a=""><x path="Void"/></f></checkInited>
	<_setTo set="method"><f a="key:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></_setTo>
	<_setRelativeTo2 set="method"><f a="key:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></_setRelativeTo2>
	<_setRelativeTo set="method"><f a="key:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></_setRelativeTo>
	<_getTarget set="method"><f a=""><c path="tweenx909._ChainX.IStandardTweenX.T"/></f></_getTarget>
</a></typedef>
	<typedef path="tweenx909.EaseX" params="" file="src/tweenx/tweenx909/EaseX.hx">
		<c path="tweenxcore.Easing"/>
		<haxe_doc>* for backward compatibility</haxe_doc>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="tweenx909.EventX" params="" file="src/tweenx/tweenx909/EventX.hx">
		<PLAY public="1" get="inline" set="null" expr="&quot;play&quot;" line="9" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"play"</e></m></meta>
		</PLAY>
		<DELAY public="1" get="inline" set="null" expr="&quot;delay&quot;" line="10" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"delay"</e></m></meta>
		</DELAY>
		<HEAD public="1" get="inline" set="null" expr="&quot;head&quot;" line="11" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"head"</e></m></meta>
		</HEAD>
		<UPDATE public="1" get="inline" set="null" expr="&quot;update&quot;" line="12" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"update"</e></m></meta>
		</UPDATE>
		<FOOT public="1" get="inline" set="null" expr="&quot;foot&quot;" line="13" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"foot"</e></m></meta>
		</FOOT>
		<INTERVAL public="1" get="inline" set="null" expr="&quot;interval&quot;" line="14" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"interval"</e></m></meta>
		</INTERVAL>
		<REPEAT public="1" get="inline" set="null" expr="&quot;repeat&quot;" line="15" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"repeat"</e></m></meta>
		</REPEAT>
		<REST public="1" get="inline" set="null" expr="&quot;rest&quot;" line="16" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"rest"</e></m></meta>
		</REST>
		<FINISH public="1" get="inline" set="null" expr="&quot;finish&quot;" line="17" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"finish"</e></m></meta>
		</FINISH>
		<STOP public="1" get="inline" set="null" expr="&quot;stop&quot;" line="18" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"stop"</e></m></meta>
		</STOP>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
	</class>
	<class path="tweenx909.advanced.CommandX" params="" file="src/tweenx/tweenx909/advanced/CommandX.hx">
		<command public="1" set="null"><e path="tweenx909.advanced.CommandTypeX"/></command>
		<definedPosInfos public="1" set="null"><t path="haxe.PosInfos"/></definedPosInfos>
		<new set="method" line="9"><f a="command:?posInfos">
	<e path="tweenx909.advanced.CommandTypeX"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenxcore.Easing" params="" file="src/tweenxcore/tweenxcore/Tools.hx" module="tweenxcore.Tools">
		<PI get="inline" set="null" expr="3.1415926535897932384626433832795" line="8" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>3.1415926535897932384626433832795</e></m></meta>
		</PI>
		<PI_H get="inline" set="null" expr="PI / 2" line="9" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>PI / 2</e></m></meta>
		</PI_H>
		<LN_2 get="inline" set="null" expr="0.6931471805599453" line="10" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.6931471805599453</e></m></meta>
		</LN_2>
		<LN_2_10 get="inline" set="null" expr="6.931471805599453" line="11" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>6.931471805599453</e></m></meta>
		</LN_2_10>
		<linear public="1" get="inline" set="null" line="15" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></linear>
		<sineIn public="1" get="inline" set="null" line="22" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></sineIn>
		<sineOut public="1" get="inline" set="null" line="31" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></sineOut>
		<sineInOut public="1" get="inline" set="null" line="40" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></sineInOut>
		<sineOutIn public="1" get="inline" set="null" line="49" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></sineOutIn>
		<quadIn public="1" get="inline" set="null" line="65" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></quadIn>
		<quadOut public="1" get="inline" set="null" line="68" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></quadOut>
		<quadInOut public="1" get="inline" set="null" line="71" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></quadInOut>
		<quadOutIn public="1" get="inline" set="null" line="74" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></quadOutIn>
		<cubicIn public="1" get="inline" set="null" line="82" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></cubicIn>
		<cubicOut public="1" get="inline" set="null" line="85" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></cubicOut>
		<cubicInOut public="1" get="inline" set="null" line="88" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></cubicInOut>
		<cubicOutIn public="1" get="inline" set="null" line="93" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></cubicOutIn>
		<quartIn public="1" get="inline" set="null" line="101" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></quartIn>
		<quartOut public="1" get="inline" set="null" line="104" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></quartOut>
		<quartInOut public="1" get="inline" set="null" line="107" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></quartInOut>
		<quartOutIn public="1" get="inline" set="null" line="110" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></quartOutIn>
		<quintIn public="1" get="inline" set="null" line="118" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></quintIn>
		<quintOut public="1" get="inline" set="null" line="121" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></quintOut>
		<quintInOut public="1" get="inline" set="null" line="124" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></quintInOut>
		<quintOutIn public="1" get="inline" set="null" line="127" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></quintOutIn>
		<expoIn public="1" get="inline" set="null" line="135" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></expoIn>
		<expoOut public="1" get="inline" set="null" line="138" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></expoOut>
		<expoInOut public="1" get="inline" set="null" line="141" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></expoInOut>
		<expoOutIn public="1" get="inline" set="null" line="152" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></expoOutIn>
		<circIn public="1" get="inline" set="null" line="166" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></circIn>
		<circOut public="1" get="inline" set="null" line="169" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></circOut>
		<circInOut public="1" get="inline" set="null" line="172" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></circInOut>
		<circOutIn public="1" get="inline" set="null" line="175" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></circOutIn>
		<bounceIn public="1" get="inline" set="null" line="183" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></bounceIn>
		<bounceOut public="1" get="inline" set="null" line="194" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></bounceOut>
		<bounceInOut public="1" get="inline" set="null" line="205" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></bounceInOut>
		<bounceOutIn public="1" get="inline" set="null" line="228" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></bounceOutIn>
		<overshoot get="inline" set="null" expr="1.70158" line="252" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1.70158</e></m></meta>
		</overshoot>
		<backIn public="1" get="inline" set="null" line="257" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></backIn>
		<backOut public="1" get="inline" set="null" line="266" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></backOut>
		<backInOut public="1" get="inline" set="null" line="275" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></backInOut>
		<backOutIn public="1" get="inline" set="null" line="286" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></backOutIn>
		<amplitude get="inline" set="null" expr="1" line="302" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</amplitude>
		<period get="inline" set="null" expr="0.0003" line="303" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0003</e></m></meta>
		</period>
		<elasticIn public="1" get="inline" set="null" line="304" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></elasticIn>
		<elasticOut public="1" get="inline" set="null" line="314" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></elasticOut>
		<elasticInOut public="1" get="inline" set="null" line="324" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></elasticInOut>
		<elasticOutIn public="1" get="inline" set="null" line="339" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></elasticOutIn>
		<warpOut public="1" get="inline" set="null" line="363" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></warpOut>
		<warpIn public="1" get="inline" set="null" line="366" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></warpIn>
		<warpInOut public="1" get="inline" set="null" line="369" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></warpInOut>
		<warpOutIn public="1" get="inline" set="null" line="372" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></warpOutIn>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenx909.rule.BoolRuleX" params="" file="src/tweenx/tweenx909/rule/BoolRuleX.hx">
		<inputClass public="1" set="null" expr="Bool" line="12" static="1">
			<d/>
			<meta><m n=":value"><e>Bool</e></m></meta>
		</inputClass>
		<calc public="1" set="method" line="13" static="1"><f a="_from:_to:t1:t2:tween">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
	<x path="Bool"/>
</f></calc>
		<defaultFrom public="1" set="method" line="16" static="1"><f a="value:_to:tween">
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="tweenx909.TweenX"/>
	<x path="Bool"/>
</f></defaultFrom>
		<haxe_doc>* Bool値に対するルール。
 * falseを0,trueを1とみなしてトゥイーンした後、
 * 0以下の数値をfalse、その他の数値をtrueとみなしてターゲットに値を反映
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenx909.rule.ArrayRuleX" params="" file="src/tweenx/tweenx909/rule/ArrayRuleX.hx">
		<inputClass public="1" set="null" expr="Array" line="5" static="1">
			<d/>
			<meta><m n=":value"><e>Array</e></m></meta>
		</inputClass>
		<calc public="1" set="method" line="6" static="1"><f a="_from:_to:t1:t2:tween">
	<t path="Iterable"><d/></t>
	<t path="Iterable"><d/></t>
	<x path="Float"/>
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
	<t path="Iterable"><d/></t>
</f></calc>
		<_calc get="inline" set="null" line="15" static="1"><f a="_from:_to:t1:t2:tween">
	<d/>
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
	<d/>
</f></_calc>
		<defaultFrom public="1" set="method" line="35" static="1"><f a="value:_to:tween">
	<t path="Iterable"><d/></t>
	<t path="Iterable"><d/></t>
	<c path="tweenx909.TweenX"/>
	<t path="Iterable"><d/></t>
</f></defaultFrom>
		<_defaultFrom set="method" line="53" static="1"><f a="value:_to:tween">
	<d/>
	<d/>
	<c path="tweenx909.TweenX"/>
	<d/>
</f></_defaultFrom>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenx909.rule.TimelineRuleX" params="" file="src/tweenx/tweenx909/rule/TimelineRuleX.hx">
		<inputClass public="1" set="null" expr="TimelineRuleX" line="30" static="1">
			<d/>
			<meta><m n=":value"><e>TimelineRuleX</e></m></meta>
		</inputClass>
		<calc public="1" set="method" line="32" static="1"><f a="_from:_to:t1:t2:tween">
	<c path="tweenx909.rule.TimelineRuleX"/>
	<c path="tweenx909.rule.TimelineRuleX"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
	<unknown/>
</f></calc>
		<defaultFrom public="1" set="method" line="50" static="1"><f a="value:_to:tween">
	<d/>
	<c path="tweenx909.rule.TimelineRuleX"/>
	<c path="tweenx909.TweenX"/>
	<unknown/>
</f></defaultFrom>
		<length public="1" set="null"><x path="Float"/></length>
		<data><c path="Array"><d/></c></data>
		<timeline><c path="Array"><x path="Float"/></c></timeline>
		<new public="1" set="method" line="12"><f a="data:?intervals">
	<t path="Iterable"><d/></t>
	<t path="Iterable"><x path="Float"/></t>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenxcore.color.IColor" params="" file="src/tweenxcore/tweenxcore/color/IColor.hx" interface="1">
		<getRed public="1" set="method"><f a=""><x path="Float"/></f></getRed>
		<getGreen public="1" set="method"><f a=""><x path="Float"/></f></getGreen>
		<getBlue public="1" set="method"><f a=""><x path="Float"/></f></getBlue>
		<getHue public="1" set="method"><f a=""><x path="Float"/></f></getHue>
		<getSaturation public="1" set="method"><f a=""><x path="Float"/></f></getSaturation>
		<getBrightness public="1" set="method"><f a=""><x path="Float"/></f></getBrightness>
		<toRgb public="1" set="method"><f a=""><c path="tweenxcore.color.RgbColor"/></f></toRgb>
		<toHsv public="1" set="method"><f a=""><c path="tweenxcore.color.HsvColor"/></f></toHsv>
		<toRgbWithAlpha public="1" set="method"><f a="alpha">
	<x path="Float"/>
	<c path="tweenxcore.color.ArgbColor"/>
</f></toRgbWithAlpha>
		<toHsvWithAlpha public="1" set="method"><f a="alpha">
	<x path="Float"/>
	<c path="tweenxcore.color.AhsvColor"/>
</f></toHsvWithAlpha>
		<toRgbInt public="1" set="method"><f a=""><x path="Int"/></f></toRgbInt>
		<toRgbHexString public="1" set="method"><f a=""><c path="String"/></f></toRgbHexString>
		<toRgbCssString public="1" set="method"><f a=""><c path="String"/></f></toRgbCssString>
	</class>
	<class path="tweenxcore.color.RgbColor" params="" file="src/tweenxcore/tweenxcore/color/RgbColor.hx">
		<implements path="tweenxcore.color.IColor"/>
		<rgbToInt public="1" get="inline" set="null" line="18" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></rgbToInt>
		<of public="1" get="inline" set="null" line="26" static="1"><f a="color">
	<x path="Int"/>
	<c path="tweenxcore.color.RgbColor"/>
</f></of>
		<fromHsv public="1" set="method" line="34" static="1"><f a="h:s:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="tweenxcore.color.RgbColor"/>
</f></fromHsv>
		<r public="1"><x path="Float"/></r>
		<g public="1"><x path="Float"/></g>
		<b public="1"><x path="Float"/></b>
		<getRed public="1" get="inline" set="null" line="57"><f a=""><x path="Float"/></f></getRed>
		<getGreen public="1" get="inline" set="null" line="61"><f a=""><x path="Float"/></f></getGreen>
		<getBlue public="1" get="inline" set="null" line="65"><f a=""><x path="Float"/></f></getBlue>
		<getHue public="1" get="inline" set="null" line="69"><f a=""><x path="Float"/></f></getHue>
		<getSaturation public="1" get="inline" set="null" line="73"><f a=""><x path="Float"/></f></getSaturation>
		<getBrightness public="1" get="inline" set="null" line="77"><f a=""><x path="Float"/></f></getBrightness>
		<toRgb public="1" get="inline" set="null" line="81"><f a=""><c path="tweenxcore.color.RgbColor"/></f></toRgb>
		<toHsv public="1" get="inline" set="null" line="85"><f a=""><c path="tweenxcore.color.HsvColor"/></f></toHsv>
		<toRgbWithAlpha public="1" get="inline" set="null" line="89"><f a="alpha">
	<x path="Float"/>
	<c path="tweenxcore.color.ArgbColor"/>
</f></toRgbWithAlpha>
		<toHsvWithAlpha public="1" get="inline" set="null" line="93"><f a="alpha">
	<x path="Float"/>
	<c path="tweenxcore.color.AhsvColor"/>
</f></toHsvWithAlpha>
		<toRgbInt public="1" get="inline" set="null" line="97"><f a=""><x path="Int"/></f></toRgbInt>
		<toRgbHexString public="1" get="inline" set="null" line="101"><f a=""><c path="String"/></f></toRgbHexString>
		<toRgbCssString public="1" get="inline" set="null" line="105"><f a=""><c path="String"/></f></toRgbCssString>
		<new public="1" get="inline" set="null" line="12"><f a="red:green:blue">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenxcore.color.ITransparentColor" params="" file="src/tweenxcore/tweenxcore/color/ITransparentColor.hx" interface="1">
		<extends path="tweenxcore.color.IColor"/>
		<toArgb public="1" set="method"><f a=""><c path="tweenxcore.color.ArgbColor"/></f></toArgb>
		<toAhsv public="1" set="method"><f a=""><c path="tweenxcore.color.AhsvColor"/></f></toAhsv>
		<getAlpha public="1" set="method"><f a=""><x path="Float"/></f></getAlpha>
		<toArgbInt public="1" set="method"><f a=""><x path="Int"/></f></toArgbInt>
		<toArgbHexString public="1" set="method"><f a=""><c path="String"/></f></toArgbHexString>
		<toRgbaCssString public="1" set="method"><f a=""><c path="String"/></f></toRgbaCssString>
	</class>
	<class path="tweenxcore.color.ArgbColor" params="" file="src/tweenxcore/tweenxcore/color/ArgbColor.hx">
		<extends path="tweenxcore.color.RgbColor"/>
		<implements path="tweenxcore.color.ITransparentColor"/>
		<argbToInt public="1" get="inline" set="null" line="12" static="1"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></argbToInt>
		<of public="1" get="inline" set="null" line="16" static="1"><f a="color">
	<x path="Int"/>
	<c path="tweenxcore.color.ArgbColor"/>
</f></of>
		<fromAhsv public="1" get="inline" set="null" line="49" static="1">
			<f a="a:h:s:v:?hueIndex" v="::::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="tweenxcore.color.ArgbColor"/>
			</f>
			<meta><m n=":value"><e>{ hueIndex : 0 }</e></m></meta>
		</fromAhsv>
		<a public="1"><x path="Float"/></a>
		<getAlpha public="1" get="inline" set="null" line="25"><f a=""><x path="Float"/></f></getAlpha>
		<toArgb public="1" get="inline" set="null" line="29"><f a=""><c path="tweenxcore.color.ArgbColor"/></f></toArgb>
		<toAhsv public="1" get="inline" set="null" line="33"><f a=""><c path="tweenxcore.color.AhsvColor"/></f></toAhsv>
		<toArgbInt public="1" get="inline" set="null" line="37"><f a=""><x path="Int"/></f></toArgbInt>
		<toArgbHexString public="1" get="inline" set="null" line="41"><f a=""><c path="String"/></f></toArgbHexString>
		<toRgbaCssString public="1" get="inline" set="null" line="45"><f a=""><c path="String"/></f></toRgbaCssString>
		<new public="1" set="method" line="7"><f a="alpha:red:green:blue">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenx909.rule.ArgbRuleX" params="" file="src/tweenx/tweenx909/rule/ArgbRuleX.hx">
		<inputClass public="1" set="null" expr="ArgbColor" line="10" static="1">
			<d/>
			<meta><m n=":value"><e>ArgbColor</e></m></meta>
		</inputClass>
		<calc public="1" set="method" line="12" static="1"><f a="_from:_to:t1:t2:tween">
	<c path="tweenxcore.color.ArgbColor"/>
	<c path="tweenxcore.color.ArgbColor"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
	<x path="Int"/>
</f></calc>
		<defaultFrom public="1" set="method" line="21" static="1"><f a="value:_to:tween">
	<x path="Int"/>
	<c path="tweenxcore.color.ArgbColor"/>
	<c path="tweenx909.TweenX"/>
	<c path="tweenxcore.color.ArgbColor"/>
</f></defaultFrom>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenxcore.color.HsvColor" params="" file="src/tweenxcore/tweenxcore/color/HsvColor.hx">
		<implements path="tweenxcore.color.IColor"/>
		<hsvToRgbInt public="1" set="method" line="16" static="1"><f a="h:s:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></hsvToRgbInt>
		<of public="1" get="inline" set="null" line="39" static="1">
			<f a="color:?hueIndex" v=":0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="tweenxcore.color.HsvColor"/>
			</f>
			<meta><m n=":value"><e>{ hueIndex : 0 }</e></m></meta>
		</of>
		<fromRgb public="1" set="method" line="46" static="1">
			<f a="r:g:b:?hueIndex" v=":::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="tweenxcore.color.HsvColor"/>
			</f>
			<meta><m n=":value"><e>{ hueIndex : 0 }</e></m></meta>
		</fromRgb>
		<h public="1"><x path="Float"/></h>
		<s public="1"><x path="Float"/></s>
		<v public="1"><x path="Float"/></v>
		<getRed public="1" get="inline" set="null" line="86"><f a=""><x path="Float"/></f></getRed>
		<getGreen public="1" get="inline" set="null" line="90"><f a=""><x path="Float"/></f></getGreen>
		<getBlue public="1" get="inline" set="null" line="94"><f a=""><x path="Float"/></f></getBlue>
		<getHue public="1" get="inline" set="null" line="98"><f a=""><x path="Float"/></f></getHue>
		<getSaturation public="1" get="inline" set="null" line="102"><f a=""><x path="Float"/></f></getSaturation>
		<getBrightness public="1" get="inline" set="null" line="106"><f a=""><x path="Float"/></f></getBrightness>
		<toRgb public="1" get="inline" set="null" line="110"><f a=""><c path="tweenxcore.color.RgbColor"/></f></toRgb>
		<toHsv public="1" get="inline" set="null" line="114"><f a=""><c path="tweenxcore.color.HsvColor"/></f></toHsv>
		<toHsvWithAlpha public="1" get="inline" set="null" line="118"><f a="alpha">
	<x path="Float"/>
	<c path="tweenxcore.color.AhsvColor"/>
</f></toHsvWithAlpha>
		<toRgbWithAlpha public="1" get="inline" set="null" line="122"><f a="alpha">
	<x path="Float"/>
	<c path="tweenxcore.color.ArgbColor"/>
</f></toRgbWithAlpha>
		<toRgbInt public="1" get="inline" set="null" line="126"><f a=""><x path="Int"/></f></toRgbInt>
		<toRgbHexString public="1" get="inline" set="null" line="130"><f a=""><c path="String"/></f></toRgbHexString>
		<toRgbCssString public="1" get="inline" set="null" line="134"><f a=""><c path="String"/></f></toRgbCssString>
		<new public="1" get="inline" set="null" line="10"><f a="hue:saturation:value">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenxcore.color.AhsvColor" params="" file="src/tweenxcore/tweenxcore/color/AhsvColor.hx">
		<extends path="tweenxcore.color.HsvColor"/>
		<implements path="tweenxcore.color.ITransparentColor"/>
		<ahsvToArgbInt public="1" get="inline" set="null" line="12" static="1"><f a="a:h:s:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></ahsvToArgbInt>
		<of public="1" get="inline" set="null" line="16" static="1">
			<f a="color:?hueIndex" v=":0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="tweenxcore.color.AhsvColor"/>
			</f>
			<meta><m n=":value"><e>{ hueIndex : 0 }</e></m></meta>
		</of>
		<fromArgb public="1" get="inline" set="null" line="21" static="1">
			<f a="a:r:g:b:?hueIndex" v="::::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="tweenxcore.color.AhsvColor"/>
			</f>
			<meta><m n=":value"><e>{ hueIndex : 0 }</e></m></meta>
		</fromArgb>
		<a public="1"><x path="Float"/></a>
		<getAlpha public="1" get="inline" set="null" line="25"><f a=""><x path="Float"/></f></getAlpha>
		<toArgb public="1" get="inline" set="null" line="29"><f a=""><c path="tweenxcore.color.ArgbColor"/></f></toArgb>
		<toAhsv public="1" get="inline" set="null" line="33"><f a=""><c path="tweenxcore.color.AhsvColor"/></f></toAhsv>
		<toArgbInt public="1" get="inline" set="null" line="37"><f a=""><x path="Int"/></f></toArgbInt>
		<toArgbHexString public="1" get="inline" set="null" line="41"><f a=""><c path="String"/></f></toArgbHexString>
		<toRgbaCssString public="1" get="inline" set="null" line="45"><f a=""><c path="String"/></f></toRgbaCssString>
		<new public="1" set="method" line="7"><f a="alpha:hue:saturation:value">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenx909.rule.AhsvRuleX" params="" file="src/tweenx/tweenx909/rule/AhsvRuleX.hx">
		<inputClass public="1" set="null" expr="AhsvColor" line="10" static="1">
			<d/>
			<meta><m n=":value"><e>AhsvColor</e></m></meta>
		</inputClass>
		<calc public="1" set="method" line="12" static="1"><f a="_from:_to:t1:t2:tween">
	<c path="tweenxcore.color.AhsvColor"/>
	<c path="tweenxcore.color.AhsvColor"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
	<x path="Int"/>
</f></calc>
		<defaultFrom public="1" set="method" line="21" static="1"><f a="value:_to:tween">
	<x path="Int"/>
	<c path="tweenxcore.color.AhsvColor"/>
	<c path="tweenx909.TweenX"/>
	<c path="tweenxcore.color.AhsvColor"/>
</f></defaultFrom>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenx909.rule.RgbRuleX" params="" file="src/tweenx/tweenx909/rule/RgbRuleX.hx">
		<inputClass public="1" set="null" expr="RgbColor" line="10" static="1">
			<d/>
			<meta><m n=":value"><e>RgbColor</e></m></meta>
		</inputClass>
		<calc public="1" set="method" line="12" static="1"><f a="_from:_to:t1:t2:tween">
	<c path="tweenxcore.color.RgbColor"/>
	<c path="tweenxcore.color.RgbColor"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
	<x path="Int"/>
</f></calc>
		<defaultFrom public="1" set="method" line="19" static="1"><f a="value:_to:tween">
	<x path="Int"/>
	<c path="tweenxcore.color.RgbColor"/>
	<c path="tweenx909.TweenX"/>
	<c path="tweenxcore.color.RgbColor"/>
</f></defaultFrom>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenx909.rule.HsvRuleX" params="" file="src/tweenx/tweenx909/rule/HsvRuleX.hx">
		<inputClass public="1" set="null" expr="HsvColor" line="10" static="1">
			<d/>
			<meta><m n=":value"><e>HsvColor</e></m></meta>
		</inputClass>
		<calc public="1" set="method" line="12" static="1"><f a="_from:_to:t1:t2:tween">
	<c path="tweenxcore.color.HsvColor"/>
	<c path="tweenxcore.color.HsvColor"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
	<x path="Int"/>
</f></calc>
		<defaultFrom public="1" set="method" line="20" static="1"><f a="value:_to:tween">
	<x path="Int"/>
	<c path="tweenxcore.color.HsvColor"/>
	<c path="tweenx909.TweenX"/>
	<c path="tweenxcore.color.HsvColor"/>
</f></defaultFrom>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenx909.rule.QuakeX" params="" file="src/tweenx/tweenx909/rule/QuakeX.hx">
		<ease public="1"><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<value public="1"><x path="Float"/></value>
		<scale public="1"><x path="Float"/></scale>
		<new public="1" set="method" line="14">
			<f a="value:scale:?ease" v="::null">
				<x path="Float"/>
				<x path="Float"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ease : null }</e></m></meta>
		</new>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenx909.rule.QuakeRuleX" params="" file="src/tweenx/tweenx909/rule/QuakeRuleX.hx">
		<inputClass public="1" set="null" expr="QuakeX" line="13" static="1">
			<d/>
			<meta><m n=":value"><e>QuakeX</e></m></meta>
		</inputClass>
		<calc public="1" set="method" line="14" static="1"><f a="_from:_to:t1:t2:tween">
	<c path="tweenx909.rule.QuakeX"/>
	<c path="tweenx909.rule.QuakeX"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
	<x path="Float"/>
</f></calc>
		<defaultFrom public="1" set="method" line="20" static="1"><f a="value:_to:tween">
	<x path="Float"/>
	<c path="tweenx909.rule.QuakeX"/>
	<c path="tweenx909.TweenX"/>
	<c path="tweenx909.rule.QuakeX"/>
</f></defaultFrom>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="tweenx909.advanced.UpdateModeX" params="" file="src/tweenx/tweenx909/advanced/UpdateModeX.hx">
		<MANUAL/>
		<TIME a="frameRate"><x path="Float"/></TIME>
		<FRAME/>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="tweenx909.TweenX" params="" file="src/tweenx/tweenx909/TweenX.hx">
		<extends path="tweenx909.advanced.CommandX"/>
		<_tweens expr="new Array&lt;TweenX&gt;()" line="32" static="1">
			<c path="Array"><c path="tweenx909.TweenX"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<TweenX>()]]></e></m></meta>
		</_tweens>
		<_addedTweens expr="new Array&lt;TweenX&gt;()" line="33" static="1">
			<c path="Array"><c path="tweenx909.TweenX"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<TweenX>()]]></e></m></meta>
		</_addedTweens>
		<tweens public="1" get="accessor" set="null" static="1"><t path="Iterable"><c path="tweenx909.TweenX"/></t></tweens>
		<get_tweens set="method" line="35" static="1"><f a=""><t path="Iterable"><c path="tweenx909.TweenX"/></t></f></get_tweens>
		<prevTime static="1"><x path="Float"/></prevTime>
		<managerInited expr="false" line="41" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</managerInited>
		<DEFAULT_EASE public="1" set="null" expr="EaseX.linear" line="46" static="1">
			<f a="">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>EaseX.linear</e></m></meta>
		</DEFAULT_EASE>
		<DEFAULT_TIME public="1" get="inline" set="null" expr="0.3" line="47" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.3</e></m></meta>
		</DEFAULT_TIME>
		<DEFAULT_DELAY public="1" get="inline" set="null" expr="0" line="48" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</DEFAULT_DELAY>
		<DEFAULT_REPEAT public="1" get="inline" set="null" expr="1" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DEFAULT_REPEAT>
		<DEFAULT_INTERVAL public="1" get="inline" set="null" expr="0" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</DEFAULT_INTERVAL>
		<DEFAULT_YOYO public="1" get="inline" set="null" expr="false" line="51" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</DEFAULT_YOYO>
		<DEFAULT_ZIGZAG public="1" get="inline" set="null" expr="false" line="52" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</DEFAULT_ZIGZAG>
		<DEFAULT_AUTO_PLAY public="1" get="inline" set="null" expr="true" line="53" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</DEFAULT_AUTO_PLAY>
		<DEFAULT_AUTO_FROM get="inline" set="null" expr="true" line="54" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</DEFAULT_AUTO_FROM>
		<defaultEase public="1" expr="TweenX.DEFAULT_EASE" line="56" static="1">
			<f a="">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>TweenX.DEFAULT_EASE</e></m></meta>
		</defaultEase>
		<defaultTime public="1" expr="TweenX.DEFAULT_TIME" line="57" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_TIME</e></m></meta>
		</defaultTime>
		<defaultDelay public="1" expr="TweenX.DEFAULT_DELAY" line="58" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_DELAY</e></m></meta>
		</defaultDelay>
		<defaultInterval public="1" expr="TweenX.DEFAULT_INTERVAL" line="59" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_INTERVAL</e></m></meta>
		</defaultInterval>
		<defaultRepeat public="1" expr="TweenX.DEFAULT_REPEAT" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_REPEAT</e></m></meta>
		</defaultRepeat>
		<defaultYoyo public="1" expr="TweenX.DEFAULT_YOYO" line="61" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_YOYO</e></m></meta>
		</defaultYoyo>
		<defaultZigZag public="1" expr="TweenX.DEFAULT_ZIGZAG" line="62" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_ZIGZAG</e></m></meta>
		</defaultZigZag>
		<defaultAutoPlay public="1" expr="TweenX.DEFAULT_AUTO_PLAY" line="63" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_AUTO_PLAY</e></m></meta>
		</defaultAutoPlay>
		<defaultAutoFrom expr="TweenX.DEFAULT_AUTO_FROM" line="64" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_AUTO_FROM</e></m></meta>
		</defaultAutoFrom>
		<_rules expr="[BoolRuleX, ArrayRuleX, TimelineRuleX, ArgbRuleX, AhsvRuleX, RgbRuleX, HsvRuleX, QuakeRuleX]" line="66" static="1">
			<c path="Array"><t path="tweenx909.rule.RuleX">
	<d/>
	<d/>
</t></c>
			<meta><m n=":value"><e>[BoolRuleX, ArrayRuleX, TimelineRuleX, ArgbRuleX, AhsvRuleX, RgbRuleX, HsvRuleX, QuakeRuleX]</e></m></meta>
		</_rules>
		<rules public="1" get="accessor" set="null" static="1"><t path="Iterable"><t path="tweenx909.rule.RuleX">
	<d/>
	<d/>
</t></t></rules>
		<get_rules set="method" line="68" static="1"><f a=""><t path="Iterable"><t path="tweenx909.rule.RuleX">
	<d/>
	<d/>
</t></t></f></get_rules>
		<topLevelTimeScale public="1" expr="1" line="71" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</topLevelTimeScale>
		<_groupDefaults expr="false" line="72" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</_groupDefaults>
		<dumpDefaults public="1" set="method" line="74" static="1"><f a=""><c path="tweenx909.advanced.DefaultsX"/></f></dumpDefaults>
		<setDefaults public="1" set="method" line="77" static="1"><f a="defaults">
	<c path="tweenx909.advanced.DefaultsX"/>
	<x path="Void"/>
</f></setDefaults>
		<initDefaults public="1" set="method" line="80" static="1"><f a=""><x path="Void"/></f></initDefaults>
		<updateMode public="1" set="accessor" expr="UpdateModeX.FRAME" line="85" static="1">
			<e path="tweenx909.advanced.UpdateModeX"/>
			<meta><m n=":value"><e>UpdateModeX.FRAME</e></m></meta>
		</updateMode>
		<set_updateMode set="method" line="87" static="1"><f a="value">
	<e path="tweenx909.advanced.UpdateModeX"/>
	<e path="tweenx909.advanced.UpdateModeX"/>
</f></set_updateMode>
		<initManager get="inline" set="null" line="96" static="1"><f a=""><x path="Void"/></f></initManager>
		<mainLoop set="method" line="110" static="1"><f a=""><x path="Void"/></f></mainLoop>
		<stopUpdater set="method" line="123" static="1"><f a=""><x path="Void"/></f></stopUpdater>
		<manualUpdate public="1" set="method" line="137" static="1"><f a="time">
	<x path="Float"/>
	<x path="Void"/>
</f></manualUpdate>
		<initTweens set="method" line="147" static="1"><f a=""><x path="Void"/></f></initTweens>
		<clear public="1" set="method" line="151" static="1"><f a=""><x path="Void"/></f></clear>
		<addRule public="1" set="method" line="159" static="1"><f a="rule">
	<t path="tweenx909.rule.RuleX">
		<d/>
		<d/>
	</t>
	<x path="Void"/>
</f></addRule>
		<addRules public="1" set="method" line="167" static="1"><f a="rules">
	<t path="Iterable"><t path="tweenx909.rule.RuleX">
	<d/>
	<d/>
</t></t>
	<x path="Void"/>
</f></addRules>
		<from public="1" params="T" set="method" line="174" static="1">
			<f a="target:?_to:?delay:?repeat:?interval:?autoPlay:?posInfos">
				<c path="from.T"/>
				<d/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<t path="haxe.PosInfos"/>
				<c path="tweenx909.advanced.StandardTweenX"><c path="from.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</from>
		<to public="1" params="T" set="method" line="179" static="1">
			<f a="target:?_to:?time:?ease:?delay:?repeat:?yoyo:?zigzag:?interval:?autoPlay:?posInfos">
				<c path="to.T"/>
				<d/>
				<x path="Float"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Bool"/>
				<t path="haxe.PosInfos"/>
				<c path="tweenx909.advanced.StandardTweenX"><c path="to.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</to>
		<tweenFunc public="1" set="method" line="184" static="1"><f a="func:_from:_to:?time:?ease:?delay:?repeat:?yoyo:?zigzag:?interval:?autoPlay:?posInfos">
	<d/>
	<t path="Iterable"><d/></t>
	<t path="Iterable"><d/></t>
	<x path="Float"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<c path="tweenx909.TweenX"/>
</f></tweenFunc>
		<tweenFunc1 public="1" set="method" line="187" static="1"><f a="func:from1:to1:?time:?ease:?delay:?repeat:?yoyo:?zigzag:?interval:?autoPlay:?posInfos">
	<f a="">
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<c path="tweenx909.TweenX"/>
</f></tweenFunc1>
		<tweenFunc2 public="1" set="method" line="190" static="1"><f a="func:from1:from2:to1:to2:?time:?ease:?delay:?repeat:?yoyo:?zigzag:?interval:?autoPlay:?posInfos">
	<f a=":">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<c path="tweenx909.TweenX"/>
</f></tweenFunc2>
		<tweenFunc3 public="1" set="method" line="193" static="1"><f a="func:from1:from2:from3:to1:to2:to3:?time:?ease:?delay:?repeat:?yoyo:?zigzag:?interval:?autoPlay:?posInfos">
	<f a="::">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<c path="tweenx909.TweenX"/>
</f></tweenFunc3>
		<tweenFunc4 public="1" set="method" line="196" static="1"><f a="func:from1:from2:from3:from4:to1:to2:to3:to4:?time:?ease:?delay:?repeat:?yoyo:?zigzag:?interval:?autoPlay:?posInfos">
	<f a=":::">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<c path="tweenx909.TweenX"/>
</f></tweenFunc4>
		<func public="1" set="method" line="199" static="1"><f a="func:?delay:?repeat:?interval:?posInfos">
	<f a=""><x path="Void"/></f>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<t path="haxe.PosInfos"/>
	<c path="tweenx909.TweenX"/>
</f></func>
		<playAll public="1" set="method" line="207" static="1"><f a="tweens">
	<t path="Iterable"><c path="tweenx909.TweenX"/></t>
	<x path="Void"/>
</f></playAll>
		<stopAll public="1" set="method" line="215" static="1"><f a="tweens">
	<t path="Iterable"><c path="tweenx909.TweenX"/></t>
	<x path="Void"/>
</f></stopAll>
		<gotoAll public="1" set="method" line="223" static="1">
			<f a="tweens:?time:?andPlay" v=":0:false">
				<t path="Iterable"><c path="tweenx909.TweenX"/></t>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ andPlay : false, time : 0 }</e></m></meta>
		</gotoAll>
		<updateAll public="1" set="method" line="231" static="1"><f a="tweens:time">
	<t path="Iterable"><c path="tweenx909.TweenX"/></t>
	<x path="Float"/>
	<x path="Void"/>
</f></updateAll>
		<serial public="1" set="method" line="245" static="1"><f a="tweens:?defaults:?posInfos">
	<t path="Iterable"><c path="tweenx909.advanced.CommandX"/></t>
	<c path="tweenx909.advanced.DefaultsX"/>
	<t path="haxe.PosInfos"/>
	<c path="tweenx909.TweenX"/>
</f></serial>
		<lag public="1" set="method" line="248" static="1">
			<f a="tweens:?delay:?defaults:?posInfos" v=":0.1::">
				<t path="Iterable"><c path="tweenx909.advanced.CommandX"/></t>
				<x path="Float"/>
				<c path="tweenx909.advanced.DefaultsX"/>
				<t path="haxe.PosInfos"/>
				<c path="tweenx909.TweenX"/>
			</f>
			<meta><m n=":value"><e>{ delay : 0.1 }</e></m></meta>
		</lag>
		<parallel public="1" set="method" line="251" static="1"><f a="tweens:?defaults:?posInfos">
	<t path="Iterable"><c path="tweenx909.advanced.CommandX"/></t>
	<c path="tweenx909.advanced.DefaultsX"/>
	<t path="haxe.PosInfos"/>
	<c path="tweenx909.TweenX"/>
</f></parallel>
		<wait public="1" set="method" line="254" static="1">
			<f a="?delay:?posInfos" v="0.1:">
				<x path="Float"/>
				<t path="haxe.PosInfos"/>
				<c path="tweenx909.advanced.CommandX"/>
			</f>
			<meta><m n=":value"><e>{ delay : 0.1 }</e></m></meta>
		</wait>
		<_group get="inline" set="null" line="255" static="1"><f a="tweens:type:defaults:posInfos">
	<t path="Iterable"><c path="tweenx909.advanced.CommandX"/></t>
	<e path="tweenx909.advanced._GroupX.GroupTypeX"/>
	<c path="tweenx909.advanced.DefaultsX"/>
	<t path="haxe.PosInfos"/>
	<c path="tweenx909.TweenX"/>
</f></_group>
		<_lock get="inline" set="null" line="268" static="1"><f a="o">
	<c path="tweenx909.TweenX"/>
	<x path="Void"/>
</f></_lock>
		<getTime get="inline" set="null" line="276" static="1"><f a=""><x path="Float"/></f></getTime>
		<_timer static="1"><c path="haxe.Timer"/></_timer>
		<setInterval get="inline" set="null" line="284" static="1"><f a="f:t">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Void"/>
</f></setInterval>
		<_engine static="1"><c path="flash.display.Sprite"/></_engine>
		<_frameHandler static="1"><f a="">
	<d/>
	<x path="Void"/>
</f></_frameHandler>
		<addFrameListener get="inline" set="null" line="293" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addFrameListener>
		<fields get="inline" set="null" line="300" static="1"><f a="t">
	<d/>
	<c path="Array"><c path="String"/></c>
</f></fields>
		<_initLog expr="[]" line="304" static="1">
			<c path="Array"><c path="Array"><t path="tweenx909._TweenX.Log"/></c></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</_initLog>
		<dictionary expr="new haxe.ds.()" line="306" static="1">
			<c path="haxe.ds.ObjectMap">
				<d/>
				<x path="Int"/>
			</c>
			<meta><m n=":value"><e>new haxe.ds.()</e></m></meta>
		</dictionary>
		<_objCounter expr="0" line="310" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</_objCounter>
		<hashObject get="inline" set="null" line="311" static="1"><f a="o">
	<d/>
	<t path="Null"><x path="Int"/></t>
</f></hashObject>
		<_resetLog set="method" line="338" static="1"><f a=""><x path="Void"/></f></_resetLog>
		<field get="inline" set="null" line="347" static="1">
			<f a="o:key">
				<d/>
				<c path="String"/>
				<unknown/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</field>
		<setField get="inline" set="null" line="358" static="1">
			<f a="o:key:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setField>
		<isIterable set="method" line="369" static="1"><f a="d">
	<d/>
	<x path="Bool"/>
</f></isIterable>
		<_MIN get="inline" set="null" expr="1 / 0x3FFFFFF" line="376" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1 / 0x3FFFFFF</e></m></meta>
		</_MIN>
		<eventIndex public="1" set="method" line="377" static="1"><f a="type">
	<c path="String"/>
	<x path="Int"/>
</f></eventIndex>
		<EVENT_ARRAY expr="[&quot;play&quot;, &quot;delay&quot;, &quot;head&quot;, &quot;update&quot;, &quot;foot&quot;, &quot;interval&quot;, &quot;repeat&quot;, &quot;rest&quot;, &quot;finish&quot;, &quot;stop&quot;]" line="380" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["play", "delay", "head", "update", "foot", "interval", "repeat", "rest", "finish", "stop"]</e></m></meta>
		</EVENT_ARRAY>
		<_PLAY get="inline" set="null" expr="0" line="381" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</_PLAY>
		<_DELAY get="inline" set="null" expr="1" line="382" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</_DELAY>
		<_HEAD get="inline" set="null" expr="2" line="383" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</_HEAD>
		<_UPDATE get="inline" set="null" expr="3" line="384" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</_UPDATE>
		<_FOOT get="inline" set="null" expr="4" line="385" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</_FOOT>
		<_INTERVAL get="inline" set="null" expr="5" line="386" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</_INTERVAL>
		<_REPEAT get="inline" set="null" expr="6" line="387" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</_REPEAT>
		<_REST get="inline" set="null" expr="7" line="388" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</_REST>
		<_FINISH get="inline" set="null" expr="8" line="389" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</_FINISH>
		<_STOP get="inline" set="null" expr="9" line="390" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</_STOP>
		<idCounter public="1" expr="0" line="522" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</idCounter>
		<playing public="1" set="null"><x path="Bool"/></playing>
		<backward public="1" set="null"><x path="Bool"/></backward>
		<_currentTime expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</_currentTime>
		<_singleTime><x path="Float"/></_singleTime>
		<_skip expr="null">
			<t path="Null"><x path="Float"/></t>
			<meta><m n=":value"><e>null</e></m></meta>
		</_skip>
		<_type><e path="tweenx909.advanced.TweenTypeX"/></_type>
		<_inited><x path="Bool"/></_inited>
		<_totalTime><x path="Float"/></_totalTime>
		<_dead><x path="Bool"/></_dead>
		<_parent><c path="tweenx909.TweenX"/></_parent>
		<_fastMode><x path="Bool"/></_fastMode>
		<_toKeys><c path="Array"><c path="String"/></c></_toKeys>
		<currentTime public="1" get="accessor" set="null"><x path="Float"/></currentTime>
		<singleTime public="1" get="accessor" set="null"><x path="Float"/></singleTime>
		<totalTime public="1" get="accessor" set="null"><x path="Float"/></totalTime>
		<timeScale public="1" set="accessor" expr="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</timeScale>
		<get_currentTime set="method" line="455"><f a=""><x path="Float"/></f></get_currentTime>
		<get_singleTime set="method" line="462"><f a=""><x path="Float"/></f></get_singleTime>
		<get_totalTime set="method" line="465"><f a=""><x path="Float"/></f></get_totalTime>
		<set_timeScale set="method" line="468"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_timeScale>
		<_inverted><x path="Bool"/></_inverted>
		<_odd><x path="Bool"/></_odd>
		<_time><x path="Float"/></_time>
		<_ease><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></_ease>
		<_interval><x path="Float"/></_interval>
		<_repeat><x path="Int"/></_repeat>
		<_zigzag><x path="Bool"/></_zigzag>
		<_yoyo><x path="Bool"/></_yoyo>
		<_delay><x path="Float"/></_delay>
		<_autoPlay><x path="Bool"/></_autoPlay>
		<_rest><x path="Float"/></_rest>
		<_timeIsDefault><x path="Bool"/></_timeIsDefault>
		<_easeIsDefault><x path="Bool"/></_easeIsDefault>
		<_intervalIsDefault><x path="Bool"/></_intervalIsDefault>
		<_repeatIsDefault><x path="Bool"/></_repeatIsDefault>
		<_zigzagIsDefault><x path="Bool"/></_zigzagIsDefault>
		<_yoyoIsDefault><x path="Bool"/></_yoyoIsDefault>
		<_delayIsDefault><x path="Bool"/></_delayIsDefault>
		<_autoPlayIsDefault><x path="Bool"/></_autoPlayIsDefault>
		<_onPlay><f a=""><x path="Void"/></f></_onPlay>
		<_onStop><f a=""><x path="Void"/></f></_onStop>
		<_onDelay><f a=""><x path="Void"/></f></_onDelay>
		<_onInterval><f a=""><x path="Void"/></f></_onInterval>
		<_onRepeat><f a=""><x path="Void"/></f></_onRepeat>
		<_onRest><f a=""><x path="Void"/></f></_onRest>
		<_onHead><f a=""><x path="Void"/></f></_onHead>
		<_onUpdate><f a=""><x path="Void"/></f></_onUpdate>
		<_onFoot><f a=""><x path="Void"/></f></_onFoot>
		<_onFinish><f a=""><x path="Void"/></f></_onFinish>
		<_eventListeners><c path="Array"><c path="Array"><d/></c></c></_eventListeners>
		<id public="1" set="null"><x path="Int"/></id>
		<error set="method" line="523"><f a="msg">
	<c path="String"/>
	<c path="String"/>
</f></error>
		<play public="1" set="method" line="529"><f a=""><c path="tweenx909.TweenX"/></f></play>
		<stop public="1" set="method" line="543"><f a=""><c path="tweenx909.TweenX"/></f></stop>
		<_stop set="method" line="548"><f a=""><x path="Void"/></f></_stop>
		<update public="1" set="method" line="555"><f a="time">
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
</f></update>
		<goto public="1" set="method" line="561">
			<f a="?time:?andPlay" v="0:false">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="tweenx909.TweenX"/>
			</f>
			<meta><m n=":value"><e>{ andPlay : false, time : 0 }</e></m></meta>
		</goto>
		<_invert set="method" line="572"><f a=""><x path="Void"/></f></_invert>
		<_init set="method" line="586"><f a=""><x path="Void"/></f></_init>
		<_initFromTo set="method" line="631"><f a="target:_from:_to">
	<unknown/>
	<unknown/>
	<unknown/>
	<x path="Void"/>
</f></_initFromTo>
		<_update set="method" line="638"><f a="spent">
	<x path="Float"/>
	<x path="Void"/>
</f></_update>
		<_head get="inline" set="null" line="733"><f a="repeatNum">
	<x path="Int"/>
	<x path="Void"/>
</f></_head>
		<_foot get="inline" set="null" line="740"><f a="repeatNum">
	<x path="Int"/>
	<x path="Void"/>
</f></_foot>
		<_finish get="inline" set="null" line="748"><f a=""><x path="Void"/></f></_finish>
		<_apply set="method" line="755"><f a="p:repeatNum">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></_apply>
		<_fastCalc get="inline" set="null" line="819"><f a="_from:_to:t1:t2">
	<d/>
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<d/>
</f></_fastCalc>
		<_calc get="inline" set="null" line="823"><f a="_from:_to:t1:t2">
	<d/>
	<d/>
	<x path="Float"/>
	<x path="Float"/>
	<d/>
</f></_calc>
		<time public="1" set="method" line="844"><f a="value">
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
</f></time>
		<ease public="1" set="method" line="851"><f a="value">
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<c path="tweenx909.TweenX"/>
</f></ease>
		<delay public="1" set="method" line="857"><f a="value">
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
</f></delay>
		<rest public="1" set="method" line="864"><f a="value">
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
</f></rest>
		<interval public="1" set="method" line="870"><f a="value">
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
</f></interval>
		<repeat public="1" set="method" line="877">
			<f a="?value" v="0">
				<x path="Int"/>
				<c path="tweenx909.TweenX"/>
			</f>
			<meta><m n=":value"><e>{ value : 0 }</e></m></meta>
		</repeat>
		<yoyo public="1" set="method" line="884">
			<f a="?value" v="true">
				<x path="Bool"/>
				<c path="tweenx909.TweenX"/>
			</f>
			<meta><m n=":value"><e>{ value : true }</e></m></meta>
		</yoyo>
		<zigzag public="1" set="method" line="890">
			<f a="?value" v="true">
				<x path="Bool"/>
				<c path="tweenx909.TweenX"/>
			</f>
			<meta><m n=":value"><e>{ value : true }</e></m></meta>
		</zigzag>
		<autoPlay public="1" set="method" line="896">
			<f a="?value" v="true">
				<x path="Bool"/>
				<c path="tweenx909.TweenX"/>
			</f>
			<meta><m n=":value"><e>{ value : true }</e></m></meta>
		</autoPlay>
		<skip public="1" set="method" line="902">
			<f a="?delay" v="0">
				<x path="Float"/>
				<c path="tweenx909.TweenX"/>
			</f>
			<meta><m n=":value"><e>{ delay : 0 }</e></m></meta>
		</skip>
		<setTimeScale public="1" set="method" line="907">
			<f a="?value" v="0">
				<x path="Float"/>
				<c path="tweenx909.TweenX"/>
			</f>
			<meta><m n=":value"><e>{ value : 0 }</e></m></meta>
		</setTimeScale>
		<onPlay public="1" set="method" line="915"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.TweenX"/>
</f></onPlay>
		<onStop public="1" set="method" line="919"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.TweenX"/>
</f></onStop>
		<onDelay public="1" set="method" line="923"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.TweenX"/>
</f></onDelay>
		<onHead public="1" set="method" line="927"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.TweenX"/>
</f></onHead>
		<onUpdate public="1" set="method" line="931"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.TweenX"/>
</f></onUpdate>
		<onFoot public="1" set="method" line="935"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.TweenX"/>
</f></onFoot>
		<onRest public="1" set="method" line="939"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.TweenX"/>
</f></onRest>
		<onInterval public="1" set="method" line="943"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.TweenX"/>
</f></onInterval>
		<onRepeat public="1" set="method" line="947"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.TweenX"/>
</f></onRepeat>
		<onFinish public="1" set="method" line="951"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.TweenX"/>
</f></onFinish>
		<addEventListener public="1" set="method" line="956"><f a="type:listener">
	<c path="String"/>
	<f a="">
		<c path="tweenx909.TweenX"/>
		<x path="Void"/>
	</f>
	<c path="tweenx909.TweenX"/>
</f></addEventListener>
		<removeEventListener public="1" set="method" line="960"><f a="type:listener">
	<c path="String"/>
	<f a="">
		<c path="tweenx909.TweenX"/>
		<x path="Void"/>
	</f>
	<c path="tweenx909.TweenX"/>
</f></removeEventListener>
		<_addEventListener get="inline" set="null" line="964"><f a="type:listener">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></_addEventListener>
		<_removeEventListener get="inline" set="null" line="971"><f a="type:listener">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></_removeEventListener>
		<_getPosition get="inline" set="null" line="982"><f a="p:back">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></_getPosition>
		<checkInited set="method" line="995"><f a=""><x path="Void"/></f></checkInited>
		<dispatch get="inline" set="null" line="998"><f a="num">
	<x path="Int"/>
	<x path="Void"/>
</f></dispatch>
		<initGroup set="method" line="1011"><f a="g">
	<c path="tweenx909.advanced.GroupX"/>
	<x path="Void"/>
</f></initGroup>
		<new set="method" line="396"><f a="type:?time:?ease:?delay:?repeat:?yoyo:?zigzag:?interval:?autoPlay:?posInfos">
	<e path="tweenx909.advanced.TweenTypeX"/>
	<x path="Float"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="tweenx909._TweenX.Log" params="" file="src/tweenx/tweenx909/TweenX.hx" private="1" module="tweenx909.TweenX"><a>
	<target><d/></target>
	<data><d/></data>
</a></typedef>
	<enum path="tweenx909.advanced.CommandTypeX" params="" file="src/tweenx/tweenx909/advanced/CommandTypeX.hx">
		<TWEEN a="tween"><c path="tweenx909.TweenX"/></TWEEN>
		<WAIT a="delay"><x path="Float"/></WAIT>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="tweenx909.advanced.DefaultsX" params="" file="src/tweenx/tweenx909/advanced/DefaultsX.hx">
		<_ease><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></_ease>
		<_time expr="TweenX.DEFAULT_TIME">
			<x path="Float"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_TIME</e></m></meta>
		</_time>
		<_delay expr="TweenX.DEFAULT_DELAY">
			<x path="Float"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_DELAY</e></m></meta>
		</_delay>
		<_interval expr="TweenX.DEFAULT_INTERVAL">
			<x path="Float"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_INTERVAL</e></m></meta>
		</_interval>
		<_repeat expr="TweenX.DEFAULT_REPEAT">
			<x path="Int"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_REPEAT</e></m></meta>
		</_repeat>
		<_yoyo expr="TweenX.DEFAULT_YOYO">
			<x path="Bool"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_YOYO</e></m></meta>
		</_yoyo>
		<_zigzag expr="TweenX.DEFAULT_ZIGZAG">
			<x path="Bool"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_ZIGZAG</e></m></meta>
		</_zigzag>
		<_autoPlay expr="TweenX.DEFAULT_AUTO_PLAY">
			<x path="Bool"/>
			<meta><m n=":value"><e>TweenX.DEFAULT_AUTO_PLAY</e></m></meta>
		</_autoPlay>
		<dump public="1" set="method" line="23"><f a=""><c path="tweenx909.advanced.DefaultsX"/></f></dump>
		<apply public="1" set="method" line="36"><f a=""><x path="Void"/></f></apply>
		<clone public="1" set="method" line="48"><f a=""><c path="tweenx909.advanced.DefaultsX"/></f></clone>
		<time public="1" set="method" line="64"><f a="value">
	<x path="Float"/>
	<c path="tweenx909.advanced.DefaultsX"/>
</f></time>
		<ease public="1" set="method" line="68"><f a="value">
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<c path="tweenx909.advanced.DefaultsX"/>
</f></ease>
		<delay public="1" set="method" line="72"><f a="value">
	<x path="Float"/>
	<c path="tweenx909.advanced.DefaultsX"/>
</f></delay>
		<interval public="1" set="method" line="76"><f a="value">
	<x path="Float"/>
	<c path="tweenx909.advanced.DefaultsX"/>
</f></interval>
		<repeat public="1" set="method" line="80">
			<f a="?value" v="0">
				<x path="Int"/>
				<c path="tweenx909.advanced.DefaultsX"/>
			</f>
			<meta><m n=":value"><e>{ value : 0 }</e></m></meta>
		</repeat>
		<yoyo public="1" set="method" line="84">
			<f a="?value" v="true">
				<x path="Bool"/>
				<c path="tweenx909.advanced.DefaultsX"/>
			</f>
			<meta><m n=":value"><e>{ value : true }</e></m></meta>
		</yoyo>
		<zigzag public="1" set="method" line="88">
			<f a="?value" v="true">
				<x path="Bool"/>
				<c path="tweenx909.advanced.DefaultsX"/>
			</f>
			<meta><m n=":value"><e>{ value : true }</e></m></meta>
		</zigzag>
		<autoPlay public="1" set="method" line="92">
			<f a="?value" v="true">
				<x path="Bool"/>
				<c path="tweenx909.advanced.DefaultsX"/>
			</f>
			<meta><m n=":value"><e>{ value : true }</e></m></meta>
		</autoPlay>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenx909.advanced.GroupX" params="" file="src/tweenx/tweenx909/advanced/GroupX.hx">
		<current public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<tweens public="1"><c path="Array"><c path="tweenx909.TweenX"/></c></tweens>
		<source public="1"><t path="Iterable"><c path="tweenx909.advanced.CommandX"/></t></source>
		<type public="1"><e path="tweenx909.advanced._GroupX.GroupTypeX"/></type>
		<defaults public="1"><c path="tweenx909.advanced.DefaultsX"/></defaults>
		<new public="1" set="method" line="13"><f a="source:type:defaults">
	<t path="Iterable"><c path="tweenx909.advanced.CommandX"/></t>
	<e path="tweenx909.advanced._GroupX.GroupTypeX"/>
	<c path="tweenx909.advanced.DefaultsX"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>@private</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<enum path="tweenx909.advanced._GroupX.GroupTypeX" params="" file="src/tweenx/tweenx909/advanced/GroupX.hx" private="1" module="tweenx909.advanced.GroupX">
		<SERIAL/>
		<LAG a="lag"><x path="Float"/></LAG>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="tweenx909.advanced.StandardTweenX" params="T" file="src/tweenx/tweenx909/advanced/StandardTweenX.hx">
		<extends path="tweenx909.TweenX"/>
		<clone set="method" line="26" static="1"><f a="obj">
	<d/>
	<a/>
</f></clone>
		<_autoFrom expr="true">
			<t path="Null"><x path="Bool"/></t>
			<meta><m n=":value"><e>true</e></m></meta>
		</_autoFrom>
		<checkField get="inline" set="null" line="32"><f a="target:key">
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></checkField>
		<_getTarget set="method" line="42"><f a=""><c path="tweenx909.advanced.StandardTweenX.T"/></f></_getTarget>
		<_setTo set="method" line="43"><f a="key:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></_setTo>
		<_setRelativeTo set="method" line="61"><f a="key:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></_setRelativeTo>
		<_setRelativeTo2 set="method" line="79"><f a="key:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></_setRelativeTo2>
		<_initFromTo set="method" line="98" override="1"><f a="target:_from:_to">
	<unknown/>
	<unknown/>
	<unknown/>
	<x path="Void"/>
</f></_initFromTo>
		<_initFrom get="inline" set="null" line="131"><f a="target:_from:_to">
	<unknown/>
	<unknown/>
	<unknown/>
	<x path="Void"/>
</f></_initFrom>
		<_defaultFrom set="method" line="170"><f a="value:_to">
	<d/>
	<d/>
	<d/>
</f></_defaultFrom>
		<play public="1" set="method" line="182" override="1"><f a=""><c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c></f></play>
		<stop public="1" set="method" line="186" override="1"><f a=""><c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c></f></stop>
		<update public="1" set="method" line="190" override="1"><f a="time">
	<x path="Float"/>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></update>
		<goto public="1" set="method" line="194" override="1">
			<f a="?time:?andPlay" v="0:false">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
			</f>
			<meta><m n=":value"><e>{ andPlay : false, time : 0 }</e></m></meta>
		</goto>
		<onDelay public="1" set="method" line="198" override="1"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></onDelay>
		<onFinish public="1" set="method" line="202" override="1"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></onFinish>
		<onFoot public="1" set="method" line="206" override="1"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></onFoot>
		<onHead public="1" set="method" line="210" override="1"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></onHead>
		<onInterval public="1" set="method" line="214" override="1"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></onInterval>
		<onStop public="1" set="method" line="218" override="1"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></onStop>
		<onPlay public="1" set="method" line="222" override="1"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></onPlay>
		<onRepeat public="1" set="method" line="226" override="1"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></onRepeat>
		<onRest public="1" set="method" line="230" override="1"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></onRest>
		<onUpdate public="1" set="method" line="234" override="1"><f a="handler">
	<f a=""><x path="Void"/></f>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></onUpdate>
		<addEventListener public="1" set="method" line="238" override="1"><f a="type:listener">
	<c path="String"/>
	<f a="">
		<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
		<x path="Void"/>
	</f>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></addEventListener>
		<removeEventListener public="1" set="method" line="242" override="1"><f a="type:listener">
	<c path="String"/>
	<f a="">
		<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
		<x path="Void"/>
	</f>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></removeEventListener>
		<time public="1" set="method" line="250" override="1"><f a="value">
	<x path="Float"/>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></time>
		<ease public="1" set="method" line="254" override="1"><f a="value">
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></ease>
		<delay public="1" set="method" line="258" override="1"><f a="value">
	<x path="Float"/>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></delay>
		<rest public="1" set="method" line="262" override="1"><f a="value">
	<x path="Float"/>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></rest>
		<interval public="1" set="method" line="266" override="1"><f a="value">
	<x path="Float"/>
	<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
</f></interval>
		<repeat public="1" set="method" line="270" override="1">
			<f a="?value" v="1">
				<x path="Int"/>
				<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
			</f>
			<meta><m n=":value"><e>{ value : 1 }</e></m></meta>
		</repeat>
		<yoyo public="1" set="method" line="274" override="1">
			<f a="?value" v="true">
				<x path="Bool"/>
				<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
			</f>
			<meta><m n=":value"><e>{ value : true }</e></m></meta>
		</yoyo>
		<zigzag public="1" set="method" line="278" override="1">
			<f a="?value" v="true">
				<x path="Bool"/>
				<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
			</f>
			<meta><m n=":value"><e>{ value : true }</e></m></meta>
		</zigzag>
		<autoPlay public="1" set="method" line="282" override="1">
			<f a="?value" v="true">
				<x path="Bool"/>
				<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
			</f>
			<meta><m n=":value"><e>{ value : true }</e></m></meta>
		</autoPlay>
		<setTimeScale public="1" set="method" line="286" override="1">
			<f a="?value" v="0">
				<x path="Float"/>
				<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
			</f>
			<meta><m n=":value"><e>{ value : 0 }</e></m></meta>
		</setTimeScale>
		<skip public="1" set="method" line="290" override="1">
			<f a="?delay" v="0">
				<x path="Float"/>
				<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
			</f>
			<meta><m n=":value"><e>{ delay : 0 }</e></m></meta>
		</skip>
		<autoFrom set="method" line="294">
			<f a="?value" v="true">
				<x path="Bool"/>
				<c path="tweenx909.advanced.StandardTweenX"><c path="tweenx909.advanced.StandardTweenX.T"/></c>
			</f>
			<meta><m n=":value"><e>{ value : true }</e></m></meta>
		</autoFrom>
		<new public="1" set="method" line="12"><f a="type:?time:?ease:?delay:?repeat:?yoyo:?zigzag:?interval:?autoPlay:?posInfos">
	<e path="tweenx909.advanced.TweenTypeX"/>
	<x path="Float"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="tweenx909.advanced.TweenTypeX" params="" file="src/tweenx/tweenx909/advanced/TweenTypeX.hx">
		<GROUP a="group"><c path="tweenx909.advanced.GroupX"/></GROUP>
		<ARRAY a="targets:_from:_to">
			<t path="Iterable"><d/></t>
			<c path="Array"><d/></c>
			<c path="Array"><d/></c>
		</ARRAY>
		<FROM_TO a="target:_from:_to">
			<d/>
			<d/>
			<d/>
		</FROM_TO>
		<FUNC a="func:_from:_to">
			<d/>
			<c path="Array"><d/></c>
			<c path="Array"><d/></c>
		</FUNC>
		<CALL a="func"><f a=""><x path="Void"/></f></CALL>
		<haxe_doc>*
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="tweenx909.rule._ArrayRuleX.ErrorHandler" params="" file="src/tweenx/tweenx909/rule/ArrayRuleX.hx" private="1" module="tweenx909.rule.ArrayRuleX"><a><error set="method"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></error></a></typedef>
	<typedef path="tweenx909.rule.RuleX" params="T1:T2" file="src/tweenx/tweenx909/rule/RuleX.hx">
		<a>
			<inputClass set="null"><d/></inputClass>
			<defaultFrom set="method"><f a="value:_to:tween">
	<c path="tweenx909.rule.RuleX.T2"/>
	<c path="tweenx909.rule.RuleX.T1"/>
	<c path="tweenx909.TweenX"/>
	<c path="tweenx909.rule.RuleX.T1"/>
</f></defaultFrom>
			<calc set="method"><f a="_from:_to:t1:t2:tween">
	<c path="tweenx909.rule.RuleX.T1"/>
	<c path="tweenx909.rule.RuleX.T1"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="tweenx909.TweenX"/>
	<c path="tweenx909.rule.RuleX.T2"/>
</f></calc>
		</a>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
	</typedef>
	<class path="tweenxcore.FloatTools" params="" file="src/tweenxcore/tweenxcore/Tools.hx" module="tweenxcore.Tools">
		<revert public="1" get="inline" set="null" line="381" static="1"><f a="rate">
	<x path="Float"/>
	<x path="Float"/>
</f></revert>
		<clamp public="1" get="inline" set="null" line="386" static="1">
			<f a="value:?min:?max" v=":0.0:1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ max : 1.0, min : 0.0 }</e></m></meta>
		</clamp>
		<lerp public="1" get="inline" set="null" line="391" static="1"><f a="rate:from:to">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></lerp>
		<inverseLerp public="1" get="inline" set="null" line="396" static="1"><f a="value:from:to">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></inverseLerp>
		<repeat public="1" get="inline" set="null" line="401" static="1">
			<f a="value:?from:?to" v=":0.0:1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ to : 1.0, from : 0.0 }</e></m></meta>
		</repeat>
		<shake public="1" get="inline" set="null" line="407" static="1">
			<f a="rate:?center:?randomFunc" v=":0.0:">
				<x path="Float"/>
				<x path="Float"/>
				<f a=""><x path="Float"/></f>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ center : 0.0 }</e></m></meta>
		</shake>
		<sinByRate public="1" get="inline" set="null" line="413" static="1"><f a="rate">
	<x path="Float"/>
	<x path="Float"/>
</f></sinByRate>
		<cosByRate public="1" get="inline" set="null" line="417" static="1"><f a="rate">
	<x path="Float"/>
	<x path="Float"/>
</f></cosByRate>
		<yoyo public="1" get="inline" set="null" line="428" static="1"><f a="rate:easing">
	<x path="Float"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="Float"/>
</f></yoyo>
		<zigzag public="1" get="inline" set="null" line="433" static="1"><f a="rate:easing">
	<x path="Float"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="Float"/>
</f></zigzag>
		<mixEasing public="1" get="inline" set="null" line="443" static="1">
			<f a="rate:easing1:easing2:?easing2Strength" v=":::0.5">
				<x path="Float"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ easing2Strength : 0.5 }</e></m></meta>
		</mixEasing>
		<crossfadeEasing public="1" get="inline" set="null" line="455" static="1">
			<f a="rate:easing1:easing2:easing2StrengthEasing:?easing2StrengthStart:?easing2StrengthEnd" v="::::0:1">
				<x path="Float"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ easing2StrengthEnd : 1, easing2StrengthStart : 0 }</e></m></meta>
		</crossfadeEasing>
		<connectEasing public="1" get="inline" set="null" line="472" static="1">
			<f a="time:easing1:easing2:?switchTime:?switchValue" v=":::0.5:0.5">
				<x path="Float"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ switchValue : 0.5, switchTime : 0.5 }</e></m></meta>
		</connectEasing>
		<oneTwoEasing public="1" get="inline" set="null" line="487" static="1">
			<f a="time:easingOne:easingTwo:?switchTime" v=":::0.5">
				<x path="Float"/>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<f a="">
					<x path="Float"/>
					<x path="Float"/>
				</f>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ switchTime : 0.5 }</e></m></meta>
		</oneTwoEasing>
		<binarySearch public="1" get="inline" set="null" line="505" static="1">
			<f a="sortedValues:value:?boundaryMode" v="::BoundaryMode.Low">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
				<x path="tweenxcore.structure.BoundaryMode"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ boundaryMode : BoundaryMode.Low }</e></m></meta>
		</binarySearch>
		<polyline public="1" get="inline" set="null" line="540" static="1"><f a="rate:values">
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></polyline>
		<bezier2 public="1" get="inline" set="null" line="558" static="1"><f a="rate:from:control:to">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></bezier2>
		<bezier3 public="1" get="inline" set="null" line="563" static="1"><f a="rate:from:control1:control2:to">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></bezier3>
		<bezier public="1" get="inline" set="null" line="568" static="1"><f a="rate:values">
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></bezier>
		<_bezier set="method" line="581" static="1"><f a="rate:values">
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></_bezier>
		<uniformQuadraticBSpline public="1" get="inline" set="null" line="593" static="1">
			<f a="rate:values">
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
			</f>
			<haxe_doc>* Uniform Quadratic B-spline</haxe_doc>
		</uniformQuadraticBSpline>
		<frameToSecond public="1" get="inline" set="null" line="615" static="1"><f a="frame:fps">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></frameToSecond>
		<secondToFrame public="1" get="inline" set="null" line="618" static="1"><f a="second:fps">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></secondToFrame>
		<degreeToRate public="1" get="inline" set="null" line="621" static="1"><f a="degree">
	<x path="Float"/>
	<x path="Float"/>
</f></degreeToRate>
		<rateToDegree public="1" get="inline" set="null" line="624" static="1"><f a="rate">
	<x path="Float"/>
	<x path="Float"/>
</f></rateToDegree>
		<radianToRate public="1" get="inline" set="null" line="627" static="1"><f a="radian">
	<x path="Float"/>
	<x path="Float"/>
</f></radianToRate>
		<rateToRadian public="1" get="inline" set="null" line="630" static="1"><f a="rate">
	<x path="Float"/>
	<x path="Float"/>
</f></rateToRadian>
		<millisecondToBeat public="1" get="inline" set="null" line="633" static="1"><f a="millisecond:bpm">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></millisecondToBeat>
		<beatToMillisecond public="1" get="inline" set="null" line="637" static="1"><f a="beat:bpm">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></beatToMillisecond>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenxcore.PointTools" params="" file="src/tweenxcore/tweenxcore/Tools.hx" module="tweenxcore.Tools">
		<bezier2 public="1" params="T" get="inline" set="null" line="646" static="1">
			<f a="outputPoint:rate:from:control:to">
				<c path="bezier2.T"/>
				<x path="Float"/>
				<c path="bezier2.T"/>
				<c path="bezier2.T"/>
				<c path="bezier2.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":generic"/></meta>
		</bezier2>
		<bezier3 public="1" params="T" get="inline" set="null" line="652" static="1">
			<f a="outputPoint:rate:from:control1:control2:to">
				<c path="bezier3.T"/>
				<x path="Float"/>
				<c path="bezier3.T"/>
				<c path="bezier3.T"/>
				<c path="bezier3.T"/>
				<c path="bezier3.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":generic"/></meta>
		</bezier3>
		<bezier public="1" params="T" get="inline" set="null" line="658" static="1">
			<f a="outputPoint:rate:points">
				<c path="bezier.T"/>
				<x path="Float"/>
				<t path="Iterable"><c path="bezier.T"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":generic"/></meta>
		</bezier>
	</class>
	<class path="tweenxcore.MatrixTools" params="" file="src/tweenxcore/tweenxcore/Tools.hx" module="tweenxcore.Tools"><createSimilarityTransform public="1" params="T" get="inline" set="null" line="673" static="1"><f a="outputMatrix:fromX:fromY:toX:toY">
	<c path="createSimilarityTransform.T"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createSimilarityTransform></class>
	<enum path="tweenxcore.expr.BinaryOpKind" params="" file="src/tweenxcore/tweenxcore/expr/BinaryOpKind.hx">
		<Composite/>
		<Multiply/>
		<Mix a="strength"><x path="Float"/></Mix>
		<Connect a="switchTime:switchValue">
			<x path="Float"/>
			<x path="Float"/>
		</Connect>
		<OneTwo a="switchTime"><x path="Float"/></OneTwo>
		<Op a="easing:operation">
			<e path="tweenxcore.expr.ComplexEasingKind"/>
			<e path="tweenxcore.expr.TernaryOpKind"/>
		</Op>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="tweenxcore.expr.BinaryOpKindTools" params="" file="src/tweenxcore/tweenxcore/expr/BinaryOpKindTools.hx">
		<toFunction public="1" get="inline" set="null" line="11" static="1"><f a="kind:easing1:easing2">
	<e path="tweenxcore.expr.BinaryOpKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
</f></toFunction>
		<toJsonable public="1" set="method" line="51" static="1"><f a="kind">
	<e path="tweenxcore.expr.BinaryOpKind"/>
	<d/>
</f></toJsonable>
		<fromJsonable public="1" set="method" line="79" static="1"><f a="data">
	<d/>
	<e path="tweenxcore.expr.BinaryOpKind"/>
</f></fromJsonable>
		<toExpr public="1" set="method" line="119" static="1"><f a="kind:easing1:easing2:valueExpr">
	<e path="tweenxcore.expr.BinaryOpKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
</f></toExpr>
		<toFunctionExpr public="1" set="method" line="152" static="1"><f a="kind:easing1:easing2">
	<e path="tweenxcore.expr.BinaryOpKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<t path="haxe.macro.ExprOf"><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></t>
</f></toFunctionExpr>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="tweenxcore.expr.ComplexEasingKind" params="" file="src/tweenxcore/tweenxcore/expr/ComplexEasingKind.hx">
		<Simple a="kind"><e path="tweenxcore.expr.SimpleEasingKind"/></Simple>
		<Op a="easing:operation">
			<e path="tweenxcore.expr.ComplexEasingKind"/>
			<e path="tweenxcore.expr.UnaryOpKind"/>
		</Op>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="tweenxcore.expr.ComplexEasingKindTools" params="" file="src/tweenxcore/tweenxcore/expr/ComplexEasingKindTools.hx">
		<toFunction public="1" get="inline" set="null" line="7" static="1"><f a="easing">
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
</f></toFunction>
		<toJsonable public="1" set="method" line="19" static="1"><f a="easing">
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<d/>
</f></toJsonable>
		<fromJsonable public="1" set="method" line="38" static="1"><f a="data">
	<d/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
</f></fromJsonable>
		<toExpr public="1" set="method" line="58" static="1"><f a="easing:valueExpr">
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
</f></toExpr>
		<toFunctionExpr public="1" set="method" line="70" static="1"><f a="easing">
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<t path="haxe.macro.ExprOf"><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></t>
</f></toFunctionExpr>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenxcore.expr.ExprMakeTools" params="" file="src/tweenxcore/tweenxcore/expr/ExprMaker.hx" module="tweenxcore.expr.ExprMaker">
		<floatToExpr public="1" set="method" line="9" static="1"><f a="float">
	<x path="Float"/>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
</f></floatToExpr>
		<floatArrayToExpr public="1" set="method" line="17" static="1"><f a="floats">
	<c path="Array"><x path="Float"/></c>
	<t path="haxe.macro.ExprOf"><c path="Array"><x path="Float"/></c></t>
</f></floatArrayToExpr>
		<pos public="1" set="method" line="25" static="1"><f a=""><t path="haxe.macro.Position"/></f></pos>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="tweenxcore.expr.InOutKind" params="" file="src/tweenxcore/tweenxcore/expr/InOutKind.hx">
		<In/>
		<Out/>
		<InOut/>
		<OutIn/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="tweenxcore.expr.LineKind" params="" file="src/tweenxcore/tweenxcore/expr/LineKind.hx">
		<Bezier/>
		<Polyline/>
		<UniformQuadraticBSpline/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="tweenxcore.expr.LineKindTools" params="" file="src/tweenxcore/tweenxcore/expr/LineKindTools.hx">
		<toFunction public="1" get="inline" set="null" line="12" static="1"><f a="kind:controls">
	<e path="tweenxcore.expr.LineKind"/>
	<c path="Array"><x path="Float"/></c>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
</f></toFunction>
		<toExpr public="1" set="method" line="27" static="1"><f a="kind:controls:valueExpr">
	<e path="tweenxcore.expr.LineKind"/>
	<c path="Array"><x path="Float"/></c>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
</f></toExpr>
		<toFunctionExpr public="1" set="method" line="43" static="1"><f a="kind:controls">
	<e path="tweenxcore.expr.LineKind"/>
	<c path="Array"><x path="Float"/></c>
	<t path="haxe.macro.ExprOf"><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></t>
</f></toFunctionExpr>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="tweenxcore.expr.RoundTripKind" params="" file="src/tweenxcore/tweenxcore/expr/RoundTripKind.hx">
		<Yoyo/>
		<Zigzag/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="tweenxcore.expr.RoundTripKindTools" params="" file="src/tweenxcore/tweenxcore/expr/RoundTripKindTools.hx">
		<toFunction public="1" get="inline" set="null" line="10" static="1"><f a="kind:easing">
	<e path="tweenxcore.expr.RoundTripKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
</f></toFunction>
		<toExpr public="1" set="method" line="30" static="1"><f a="kind:easing:valueExpr">
	<e path="tweenxcore.expr.RoundTripKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
</f></toExpr>
		<toFunctionExpr public="1" set="method" line="44" static="1"><f a="kind:easing">
	<e path="tweenxcore.expr.RoundTripKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<t path="haxe.macro.ExprOf"><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></t>
</f></toFunctionExpr>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="tweenxcore.expr.SimpleEasingKind" params="" file="src/tweenxcore/tweenxcore/expr/SimpleEasingKind.hx">
		<Linear/>
		<Standard a="easing:inOut">
			<e path="tweenxcore.expr.StandardEasingKind"/>
			<e path="tweenxcore.expr.InOutKind"/>
		</Standard>
		<Line a="kind:controls">
			<e path="tweenxcore.expr.LineKind"/>
			<c path="Array"><x path="Float"/></c>
		</Line>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="tweenxcore.expr.SimpleEasingKindTools" params="" file="src/tweenxcore/tweenxcore/expr/SimpleEasingKindTools.hx">
		<toFunction public="1" get="inline" set="null" line="11" static="1"><f a="easing">
	<e path="tweenxcore.expr.SimpleEasingKind"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
</f></toFunction>
		<toJsonable public="1" set="method" line="26" static="1"><f a="easing">
	<e path="tweenxcore.expr.SimpleEasingKind"/>
	<d/>
</f></toJsonable>
		<fromJsonable public="1" set="method" line="49" static="1"><f a="data">
	<d/>
	<e path="tweenxcore.expr.SimpleEasingKind"/>
</f></fromJsonable>
		<toExpr public="1" set="method" line="84" static="1"><f a="easing:valueExpr">
	<e path="tweenxcore.expr.SimpleEasingKind"/>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
</f></toExpr>
		<toFunctionExpr public="1" set="method" line="99" static="1"><f a="easing">
	<e path="tweenxcore.expr.SimpleEasingKind"/>
	<t path="haxe.macro.ExprOf"><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></t>
</f></toFunctionExpr>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="tweenxcore.expr.StandardEasingKind" params="" file="src/tweenxcore/tweenxcore/expr/StandardEasingKind.hx">
		<Quad/>
		<Cubic/>
		<Quart/>
		<Quint/>
		<Sine/>
		<Circ/>
		<Expo/>
		<Back/>
		<Bounce/>
		<Elastic/>
		<Warp/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="tweenxcore.expr.StandardEasingKindTools" params="" file="src/tweenxcore/tweenxcore/expr/StandardEasingKindTools.hx">
		<toFunction public="1" get="inline" set="null" line="8" static="1"><f a="easing:inOut">
	<e path="tweenxcore.expr.StandardEasingKind"/>
	<e path="tweenxcore.expr.InOutKind"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
</f></toFunction>
		<toExpr public="1" set="method" line="69" static="1"><f a="easing:inOut:valueExpr">
	<e path="tweenxcore.expr.StandardEasingKind"/>
	<e path="tweenxcore.expr.InOutKind"/>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
</f></toExpr>
		<toFunctionExpr public="1" set="method" line="130" static="1"><f a="easing:inOut">
	<e path="tweenxcore.expr.StandardEasingKind"/>
	<e path="tweenxcore.expr.InOutKind"/>
	<t path="haxe.macro.ExprOf"><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></t>
</f></toFunctionExpr>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="tweenxcore.expr.TernaryOpKind" params="" file="src/tweenxcore/tweenxcore/expr/TernaryOpKind.hx">
		<Crossfade a="start:end">
			<x path="Float"/>
			<x path="Float"/>
		</Crossfade>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="tweenxcore.expr.TernaryOpKindTools" params="" file="src/tweenxcore/tweenxcore/expr/TernaryOpKindTools.hx">
		<toFunction public="1" get="inline" set="null" line="11" static="1"><f a="kind:easing1:easing2:easing3">
	<e path="tweenxcore.expr.TernaryOpKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
</f></toFunction>
		<toJsonable public="1" set="method" line="23" static="1"><f a="kind">
	<e path="tweenxcore.expr.TernaryOpKind"/>
	<d/>
</f></toJsonable>
		<fromJsonable public="1" set="method" line="32" static="1"><f a="data">
	<d/>
	<e path="tweenxcore.expr.TernaryOpKind"/>
</f></fromJsonable>
		<toExpr public="1" set="method" line="44" static="1"><f a="kind:easing1:easing2:easing3:valueExpr">
	<e path="tweenxcore.expr.TernaryOpKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
</f></toExpr>
		<toFunctionExpr public="1" set="method" line="56" static="1"><f a="kind:easing1:easing2:easing3">
	<e path="tweenxcore.expr.TernaryOpKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<t path="haxe.macro.ExprOf"><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></t>
</f></toFunctionExpr>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="tweenxcore.expr.UnaryOpKind" params="" file="src/tweenxcore/tweenxcore/expr/UnaryOpKind.hx">
		<Repeat a="repeat"><x path="Float"/></Repeat>
		<Lerp a="from:to">
			<x path="Float"/>
			<x path="Float"/>
		</Lerp>
		<Clamp a="min:max">
			<x path="Float"/>
			<x path="Float"/>
		</Clamp>
		<RoundTrip a="kind"><e path="tweenxcore.expr.RoundTripKind"/></RoundTrip>
		<Op a="easing:operation">
			<e path="tweenxcore.expr.ComplexEasingKind"/>
			<e path="tweenxcore.expr.BinaryOpKind"/>
		</Op>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="tweenxcore.expr.UnaryOpKindTools" params="" file="src/tweenxcore/tweenxcore/expr/UnaryOpKindTools.hx">
		<toFunction public="1" get="inline" set="null" line="16" static="1"><f a="kind:easing">
	<e path="tweenxcore.expr.UnaryOpKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
</f></toFunction>
		<toJsonable public="1" set="method" line="49" static="1"><f a="kind">
	<e path="tweenxcore.expr.UnaryOpKind"/>
	<d/>
</f></toJsonable>
		<fromJsonable public="1" set="method" line="77" static="1"><f a="data">
	<d/>
	<e path="tweenxcore.expr.UnaryOpKind"/>
</f></fromJsonable>
		<toExpr public="1" set="method" line="106" static="1"><f a="kind:easing:valueExpr">
	<e path="tweenxcore.expr.UnaryOpKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
	<t path="haxe.macro.ExprOf"><x path="Float"/></t>
</f></toExpr>
		<toFunctionExpr public="1" set="method" line="132" static="1"><f a="kind:easing">
	<e path="tweenxcore.expr.UnaryOpKind"/>
	<e path="tweenxcore.expr.ComplexEasingKind"/>
	<t path="haxe.macro.ExprOf"><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></t>
</f></toFunctionExpr>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="tweenxcore.geom.Matrix" params="" file="src/tweenxcore/tweenxcore/geom/Matrix.hx"><a>
	<ty><x path="Float"/></ty>
	<tx><x path="Float"/></tx>
	<d><x path="Float"/></d>
	<c><x path="Float"/></c>
	<b><x path="Float"/></b>
	<a><x path="Float"/></a>
</a></typedef>
	<typedef path="tweenxcore.geom.Point" params="" file="src/tweenxcore/tweenxcore/geom/Point.hx"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></typedef>
	<class path="tweenxcore.geom.PolarPoint" params="" file="src/tweenxcore/tweenxcore/geom/PolarPoint.hx">
		<fromXy public="1" get="inline" set="null" line="23" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="tweenxcore.geom.PolarPoint"/>
</f></fromXy>
		<fromPoint public="1" get="inline" set="null" line="27" static="1"><f a="point">
	<t path="tweenxcore.geom.Point"/>
	<c path="tweenxcore.geom.PolarPoint"/>
</f></fromPoint>
		<distance public="1"><x path="Float"/></distance>
		<angle public="1"><x path="Float"/></angle>
		<x public="1" get="accessor" set="null"><x path="Float"/></x>
		<get_x set="method" line="9"><f a=""><x path="Float"/></f></get_x>
		<y public="1" get="accessor" set="null"><x path="Float"/></y>
		<get_y set="method" line="14"><f a=""><x path="Float"/></f></get_y>
		<setXy public="1" get="inline" set="null" line="31"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setXy>
		<setPoint public="1" get="inline" set="null" line="36"><f a="point">
	<t path="tweenxcore.geom.Point"/>
	<x path="Void"/>
</f></setPoint>
		<clone public="1" get="inline" set="null" line="41"><f a="point">
	<c path="tweenxcore.geom.PolarPoint"/>
	<c path="tweenxcore.geom.PolarPoint"/>
</f></clone>
		<new public="1" get="inline" set="null" line="18"><f a="distance:angle">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="tweenxcore.structure.BoundaryMode" params="" file="src/tweenxcore/tweenxcore/structure/BoundaryMode.hx">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="tweenxcore.structure._BoundaryMode.BoundaryMode_Impl_" params="" file="src/tweenxcore/tweenxcore/structure/BoundaryMode.hx" private="1" module="tweenxcore.structure.BoundaryMode" extern="1">
	<Low public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="tweenxcore.structure.BoundaryMode"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Low>
	<High public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="tweenxcore.structure.BoundaryMode"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</High>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="tweenxcore.structure._BoundaryMode.BoundaryMode_Impl_" params="" file="src/tweenxcore/tweenxcore/structure/BoundaryMode.hx" private="1" module="tweenxcore.structure.BoundaryMode" extern="1">
		<Low public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="tweenxcore.structure.BoundaryMode"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Low>
		<High public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="tweenxcore.structure.BoundaryMode"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</High>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="tweenxcore.structure.Direction" params="" file="src/tweenxcore/tweenxcore/structure/Direction.hx">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="tweenxcore.structure._Direction.Direction_Impl_" params="" file="src/tweenxcore/tweenxcore/structure/Direction.hx" private="1" module="tweenxcore.structure.Direction" extern="1">
	<Backward public="1" get="inline" set="null" expr="cast -1" line="4" static="1">
		<x path="tweenxcore.structure.Direction"/>
		<meta>
			<m n=":value"><e>cast -1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Backward>
	<Stopped public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
		<x path="tweenxcore.structure.Direction"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Stopped>
	<Forward public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
		<x path="tweenxcore.structure.Direction"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Forward>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="tweenxcore.structure._Direction.Direction_Impl_" params="" file="src/tweenxcore/tweenxcore/structure/Direction.hx" private="1" module="tweenxcore.structure.Direction" extern="1">
		<Backward public="1" get="inline" set="null" expr="cast -1" line="4" static="1">
			<x path="tweenxcore.structure.Direction"/>
			<meta>
				<m n=":value"><e>cast -1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Backward>
		<Stopped public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
			<x path="tweenxcore.structure.Direction"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Stopped>
		<Forward public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
			<x path="tweenxcore.structure.Direction"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Forward>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="tweenxcore.structure.FloatChange" params="" file="src/tweenxcore/tweenxcore/structure/FloatChange.hx">
		<previous public="1" set="null"><x path="Float"/></previous>
		<current public="1" set="null"><x path="Float"/></current>
		<direction public="1" get="inline" set="null" line="24"><f a=""><x path="tweenxcore.structure.Direction"/></f></direction>
		<mapFloatChange public="1" set="method" line="35"><f a="func">
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<c path="tweenxcore.structure.FloatChange"/>
</f></mapFloatChange>
		<isCrossOver public="1" set="method" line="40">
			<f a="threshold:?boundaryMode" v=":BoundaryMode.High">
				<x path="Float"/>
				<x path="tweenxcore.structure.BoundaryMode"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ boundaryMode : BoundaryMode.High }</e></m></meta>
		</isCrossOver>
		<handlePart public="1" get="inline" set="null" line="53"><f a="from:to:updatePart">
	<x path="Float"/>
	<x path="Float"/>
	<f a="">
		<c path="tweenxcore.structure.FloatChangePart"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></handlePart>
		<handleRepeatPart public="1" set="method" line="73"><f a="firstPartFrom:firstPartTo:repeatLimit:updateRepeatPart">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<f a="">
		<c path="tweenxcore.structure.FloatChangeRepeatPart"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></handleRepeatPart>
		<handleTimelinePart public="1" get="inline" set="null" line="123"><f a="timelineFrom:timelineTo:updatePartTimeline">
	<x path="Float"/>
	<x path="Float"/>
	<c path="tweenxcore.structure.Timeline"><f a="">
	<c path="tweenxcore.structure.FloatChangeTimelinePart"/>
	<x path="Void"/>
</f></c>
	<x path="Void"/>
</f></handleTimelinePart>
		<new public="1" get="inline" set="null" line="15"><f a="previousValue:currentValue">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenxcore.structure.FloatChangePart" params="" file="src/tweenxcore/tweenxcore/structure/FloatChangePart.hx">
		<extends path="tweenxcore.structure.FloatChange"/>
		<isEntrance public="1" get="inline" set="null" line="5"><f a=""><x path="Bool"/></f></isEntrance>
		<isExit public="1" get="inline" set="null" line="9"><f a=""><x path="Bool"/></f></isExit>
		<new public="1" get="inline" set="null" line="4"><f a="previousValue:currentValue">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenxcore.structure.FloatChangeRepeatPart" params="" file="src/tweenxcore/tweenxcore/structure/FloatChangeRepeatPart.hx">
		<extends path="tweenxcore.structure.FloatChangePart"/>
		<isMinerChange public="1" set="null"><x path="Bool"/></isMinerChange>
		<repeatIndex public="1" set="null"><x path="Int"/></repeatIndex>
		<repeatLength public="1" set="null"><x path="Int"/></repeatLength>
		<isFirstEntrance public="1" get="inline" set="null" line="18"><f a=""><x path="Bool"/></f></isFirstEntrance>
		<isLastExit public="1" get="inline" set="null" line="23"><f a=""><x path="Bool"/></f></isLastExit>
		<new public="1" get="inline" set="null" line="10"><f a="previousValue:currentValue:repeatIndex:repeatLength:isMinerChange">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenxcore.structure.FloatChangeTimelinePart" params="" file="src/tweenxcore/tweenxcore/structure/FloatChangeTimelinePart.hx">
		<extends path="tweenxcore.structure.FloatChangePart"/>
		<isMinerChange public="1" set="null"><x path="Bool"/></isMinerChange>
		<index public="1" set="null"><x path="Float"/></index>
		<rangeLeft public="1" set="null"><x path="Float"/></rangeLeft>
		<rangeRight public="1" set="null"><x path="Float"/></rangeRight>
		<new public="1" get="inline" set="null" line="11"><f a="previousValue:currentValue:index:rangeLeft:rangeRight:isMinerChange">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="tweenxcore.structure.Timeline" params="T" file="src/tweenxcore/tweenxcore/structure/Timeline.hx">
		<totalWeight public="1" set="null"><x path="Float"/></totalWeight>
		<dataArray><c path="Array"><c path="tweenxcore.structure.Timeline.T"/></c></dataArray>
		<weightArray><c path="Array"><x path="Float"/></c></weightArray>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length set="method" line="12"><f a=""><x path="Int"/></f></get_length>
		<add public="1" get="inline" set="null" line="24">
			<f a="data:?weight" v=":1.0">
				<c path="tweenxcore.structure.Timeline.T"/>
				<x path="Float"/>
				<c path="tweenxcore.structure.Timeline"><c path="tweenxcore.structure.Timeline.T"/></c>
			</f>
			<meta><m n=":value"><e>{ weight : 1.0 }</e></m></meta>
		</add>
		<search public="1" get="inline" set="null" line="39">
			<f a="rate:?boundaryMode" v=":BoundaryMode.High">
				<x path="Float"/>
				<x path="tweenxcore.structure.BoundaryMode"/>
				<c path="tweenxcore.structure.TimelineSearchResult"><c path="tweenxcore.structure.Timeline.T"/></c>
			</f>
			<meta><m n=":value"><e>{ boundaryMode : BoundaryMode.High }</e></m></meta>
		</search>
		<dataAt public="1" get="inline" set="null" line="66"><f a="index">
	<x path="Int"/>
	<c path="tweenxcore.structure.Timeline.T"/>
</f></dataAt>
		<rangeLeft public="1" get="inline" set="null" line="74"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></rangeLeft>
		<rangeRight public="1" get="inline" set="null" line="84"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></rangeRight>
		<new public="1" get="inline" set="null" line="17"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="tweenxcore.structure.TimelineSearchResult" params="T" file="src/tweenxcore/tweenxcore/structure/TimelineSearchResult.hx">
		<data public="1" set="null"><c path="tweenxcore.structure.TimelineSearchResult.T"/></data>
		<index public="1" set="null"><x path="Int"/></index>
		<rangeLeft public="1" set="null"><x path="Float"/></rangeLeft>
		<rangeRight public="1" set="null"><x path="Float"/></rangeRight>
		<innerRate public="1" get="inline" set="null" line="17"><f a="rate">
	<x path="Float"/>
	<x path="Float"/>
</f></innerRate>
		<new public="1" get="inline" set="null" line="10"><f a="data:index:rangeLeft:rangeRight">
	<c path="tweenxcore.structure.TimelineSearchResult.T"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
</haxe>