---
layout: default
title: TweenX - tween library for haxe
---
= TweenXCore
:showtitle:

TweenXCoreは気持ちの良いモーションをより簡単に作成するためのライブラリです。TweenXCoreはトゥイーンライブラリというよりも、**トゥイーンライブラリの代替**となるライブラリです。

トゥイーンライブラリを使うよりも、実行速度を速く、開発速度を速く、バグを少なく、学習コストを少なく、そしてモーションをより自由に面白くするために作られています。

{% include movie.html file="tweenxcore/Demo" %}



== 機能

* 46種類のイージング関数
* 繰り返し
* ヨーヨー、ジグザグ運動
* イージングのミックス、クロスフェード、連結などのカスタム機能
* HSVカラー、RGBカラー
* 極座標
*　ベジェ曲線
*　``lerp``、``inverseLerp``、``clamp``など、``Float``の機能の拡張



=== TweenXCoreが持たないもの

バックグラウンドでの動作::
  TweenXCoreがバックグラウンドでオブジェクトを操作することはありません。あなた自身が今どういう状態であるべきかを記述してください。

イベントリスナー::
  TweenXCoreでは何かしらの処理を予約しておくことはできません。モーションの終了タイミングなどはif文を書くことで判別します。

ツリー構造::
  TweenXCoreは独自のツリー構造を持ちません。

これらの機能は一見便利ですが、安易に使うとバグを生んだり設計を難しくしたりします。モーションを作るという目的に限れば、これらは不必要です。これらの要素をもたないことで、TweenXCore自身と、それを使用するコードはシンプルに保たれます。



== 速度

Flashプラットフォーム上で動作するトゥイーンライブラリとしておそらく最速であるBetweenAS3よりも、さらに高速に動作しています。

{% include repogitory_url.txt file="sample/tweenx/800_BenchMark/src" %}[[コードを見る(Github)\]]


== TweenXCoreの思想

=== 脱トゥイーンライブラリ

トゥイーンライブラリはバグの温床になりやすいものです。

同じオブジェクトに対して2つのトゥイーンが走ったときの挙動は混乱を生みます。常にメモリリークを気にかけながら実装を行う必要があります。イベントハンドラの取り扱いも厄介です。

トゥイーンライブラリはとりあえず動くコードを書くのに便利で、プロトタイプや小さなゲームを作るのに向いていますが、製品版のプログラムに使うには心もとないです。

例えば

* ゲームの場合、**「一時停止ボタンが押されたときにゲーム内のアニメーションをすべて一時停止した上で、さらにアニメーション付きでポップアップを表示させたい」**ことがあります。
* 通信待ちのインジケータなら、**「インジケータのフェードイン中に通信が終われば、フェードインの途中からフェードアウトに切り替えをしたい」**と思うはずです。

これらは、トゥイーンライブラリの苦手分野です。

もちろんTweenXはそういった用途にも耐えうるように細心の注意をはらって設計していますが、そういったものを作るには動作を詳細に知らなくてはいけませんし、コードの量も複雑度も大きくなりがちです。

わたし自身もTweenXのバックグラウンドで何かをやってくれるような機能は使わなくなり、TweenXのイージング関数を直接使ってモーションのコードを書くようになっていました。

そしてイージング関数とほんの少しの機能を用意すれれば、トゥイーンライブラリよりも自由で、簡単で、高速なライブラリができることに気が付きました。そうして作られたのがTweenXCoreです。



=== 0.0から始まり、1.0で終わる

TweenXCoreの世界では、始まりの値は0.0であり、終わりの値は1.0です。つまり、

* モーションの時刻の場合、開始時刻は0.0で表し終了時刻は1.0を使います。
* アルファ値の場合、完全な透明は0.0で完全な不透明は1.0です。
* 円の1周の場合、0度は0.0であり360度は1.0です。
* RGBカラーのRed値の場合、0.0が赤みが全くなく1.0が完全な赤です。

TweenXCoreでは、このような0.0から1.0を基準とする値について``rate``という変数名をよく使います。

TweenXCoreはトゥイーンライブラリではありません。**この0.0から1.0を基準とする値を、上手にあやつるためのツール**だと考えてください。



=== オープンソース

MITライセンスですので、商用、非商用、個人、法人を問わず、利用、改変、再配布ができます。



== TweenXCoreを始める

=== Haxeバージョン

http://haxe.org/[Haxe]の3.1.3での動作を確認しています。

=== インストール



=== Hello TweenXCore

TweenXCoreの最初のサンプルとして四角のx座標を0から420まで、動かすコードを見てみます。

{% include movie.html file="tweenxcore/301_Simplest" %}

[source,haxe,linenums]
---------
import sample.SampleSuport.GridSprite;
import sample.SampleSuport.Square;
import openfl.events.Event;

import tweenxcore.structure.FloatChange;
using tweenxcore.tools.Tools;

class SampleSprite extends GridSprite {
    var square:Square;
    var frame = 0;

	public function new() {
		super();
        addChild(square = new Square(0, GridSprite.CELL_SIZE * 4));
        addEventListener(Event.ENTER_FRAME, onFrame);
    }

    // フレームごとに実行される。
    function onFrame(e:Event) {
        var change = new FloatChange(frame, frame + 1);
        change.part(0, 20, updateSquare);
        frame++;
	}

    // 四角の位置を更新する。
    function updateSquare(change:FloatChangePart) {
        square.x = change.current.lerp(0, 420);
    }
}
---------
{% include repogitory_url.txt file="sample/tweenxcore/301_SimplestTween/Main.hx" %}[[コードを見る(Github)\]]

TweenXCoreの説明として重要なのは以下のコードです。

[source,haxe]
---------
using tweenxcore.Tools;
---------

[source,haxe]
---------
    // フレームごとに実行される。
    function onFrame(e:Event) {
        var change = new FloatChange(frame, frame + 1);
        change.part(0, 20, updateSquare);
        frame++;
	}

    // 四角の位置を更新する。
    function updateSquare(change:FloatChangePart) {
        square.x = change.current.lerp(0, 420);
    }
---------



それでは1つづつ要素を見ていきます。


==== tweenxcore.Tools

ここで読み込んでいるlink:{% include repogitory_url.txt file="src/tweenxcore/tweenxcore/Tools.hx" %}[Tools.hx]ファイルは4種類のクラスを持っています。

Easingクラス::
  モーションの曲線として使われる、イージング関数を持ちます

FloatToolsクラス::
  Floatの機能を拡張します。

PointToolsクラス::
  XY座標上の点の拡張です。ベジェ曲線の機能を付け加えます。FlashのPointクラスに対してだけではなく、様々なライブラリのPoint型に対して使えます。

MatrixToolsクラス::
  XY座標のアフィン変換の行列の拡張です。2次元的な動きを相似変換するための機能を付け加えます。FlashのMatrixクラスに対してだけではなく、link:{% include repogitory_url.txt file="src/tweenxcore/tweenxcore/geom/Matrix.hx" %}[似たインターフェース]を持つその他のライブラリのMatrix型に対して使えます。

``using tweenxcore.Tools;``で、このすべてを拡張として読みこみます。



==== FloatChange、FloatChangePart
``FloatChange``と``FloatChangePart``はTweenXCoreが提供している型で、直前のFloat値と現在のFloat値をまとめて1つの型に持つことで、値の変化を簡単に扱えるようにします。

この``FloatChange``の``part``関数は、値が指定した範囲にあった場合にすぐに関数呼び出しを行います。つまり例では、``frame``または``frame + 1``が``0 < 値 < 20``の範囲にあるとき、``updateSquare``関数を呼び出します。

``FloatChangePart``は、``FloatChange``のある範囲の値を0から1までの値に変換させた``FloatChange``です。例の場合、``frame``の0から20を、0.0から1.0の範囲に変換しています。

``FloatChange``と同様、変数``current``で現在の値を取得できます。この値は``0.0 < current <= 1.0``の範囲にあります。



==== lerp

``lerp`` は線形補間の関数で、``tweenxcore.tools.FloatTools``が持つ拡張です。0.0から1.0の値を指定した範囲の値、例の場合、0から420までの値に変換しています。これにより、``change.current``が0.0から1.0まで変化する間に、``square.x``は0から420へと移動します。



== TweenXCoreチュートリアル

=== イージング関数

{% include movie.html file="tweenxcore/EasingVisualizer" %}

TweenXCoreは、link:http://easings.net/[Robert Pennerのイージング関数]を基本とし、中央で減速して再度加速するInOutのモードと、瞬間的に移動を行うwarpが追加された計46個の関数を提供しています。

ただし、上の曲線をみても一般的なトゥイーンライブラリとの違いはありませんが、コードの面では大きな違いがあります。

一般的なものでは、cubicInの関数は以下の形です。

[source,haxe]
---------
function cubicIn(t:Float, b:Float, c:Float, d:Float):Float {
    return c * (t /= d) * t * t + b;
}
---------

この関数には4つの引数があり、それぞれ

* ``t``は動き始めてからの経過時刻
* ``b``は値の初期値
* ``c``は値の変化量
* ``d``は完了までの時間

です。

一方、TweenXCoreでの``cubicIn``関数は以下の通りです。

[source,haxe]
---------
function cubicIn(t:Float):Float {
    return t * t * t;
}
---------

引数が1つだけという、ずっとシンプルな形です。

これは前に説明したとおり、TweenXCoreの世界では**始まりの値は0.0であり、終わりの値は1.0**だからです。このルールでは、もとの4つの引数は以下のように考えることができます。

* ``t``は、経過時刻を0.0から1.0までで表したもの
* 値の初期値は0.0
* 値の変化量は1.0
* 完了までの時間は1.0

つまり、TweenXCoreの世界では変数なのはtのみで、他は3つは定数と考えられます。

イージング関数に引数が4つもあると直接利用するには不便ですが、引数が1つになることでイージング関数を直接使っても何をやっているのか明瞭でわかりやすくなります。

この関数を使って先ほどのサンプルコードにのイージングをつけてみます。たった1行、以下のように変更を加えます。

[source,haxe]
---------
        square.x = change.current.cubicIn().lerp(0, 420);
---------

``change.current``の0.0から1.0までの値を、``cubicIn()``を使ってカーブをつけた後に、``lerp``関数で0から420の値に変換しています。TweenXCoreを使用するコードでは、このようなFloatの値に対するメソッドチェーンがよく出てきます。

{% include movie.html file="tweenxcore/Easing" %}

{% include repogitory_url.txt file="sample/tweenxcore/302_Easing/Main.hx" %}[[コードを見る(Github)\]]

=== 基本的な動き

==== 繰り返し
==== ヨーヨー、ジグザグ
==== 特定のタイミングに処理をする

=== イージングの自作する
==== 多重のイージング
==== クロスフェード
==== 連結(connect)
==== 接合(join)

=== 2次元的な処理
==== マトリックス
==== 極座標
==== ベジェ曲線

=== いろんなものを動かす
==== RGBカラー、HSVカラー
==== 画像
