---
layout: default
title: TweenXCore - lightweight motion library for haxe
logo: +++<span class="tweenxcore">TweenX<span class="core">Core</span></span>+++
---
:showtitle:
:author: shohei909
:toc: macro
:toc-title: 目次
:toclevels: 4
:sampleLink: link:https://github.com/shohei909/tweenx/blob/develop/sample/
:sourceLink: link:https://github.com/shohei909/tweenx/blob/develop/src/tweenxcore/
:page-liquid:

= {{page.logo}}

{{page.logo}}は https://haxe.org/[Haxe] で気持ちの良いモーションをより簡単に作成するための、クロスプラットフォームな**トゥイーンライブラリ**です。

実行速度が速く、開発速度が速く、バグが少なく、学習コストが少なく、そしてモーションが自由で面白くなるように作られています。

++++
<div><canvas class="movie" id="CustomEasingSample" /></canvas></div>
++++

toc::[]


== 機能

* 44種類のイージング関数
* 繰り返し
* ヨーヨー、ジグザグ運動
* イージングのミックス、クロスフェード、連結などのカスタム機能
* HSVカラー、RGBカラー
* 極座標
*　ベジェ曲線
*　``lerp``、``inverseLerp``、``clamp``など、``Float``の機能の拡張


== 速度

余計な処理やインスタンス生成を行わないため、非常に高速に動作します。

以下は、多数のトゥイーンライブラリが作られているFlashプラットフォームでの比較です。



{sampleLink}tweenx/800_BenchMark/src[[コードを見る(Github)\]]


== ライセンス

MITライセンスですので、商用、非商用、個人、法人を問わず、利用、改変、再配布ができます。


== {{page.logo}}を始める

=== Haxeバージョン

http://haxe.org/[Haxe]の3.1.3以降をサポートしています。


=== インストール

Haxeのインストール後、コマンドラインから以下のコマンドを入力してください。

[source, shell]
---------
haxelib install tweenxcore
---------

=== Hello {{page.logo}}

{{page.logo}}の最初のサンプルとして、四角のx座標を0から450まで、動かすコードを見てみます。

{% include sample.asciidoc num="301" id="Simplest" %}

[source,haxe,linenums]
---------
import sample.Sprite;
import sample.Square;
using tweenxcore.Tools;

class SimplestSample extends Sprite {
    public static var TOTAL_FRAME:Int = 20;
    private var square:Square;
    private var frameCount = 0;

    public function new() {
        super();
        
        // 正方形を初期位置に配置
        addChild(square = new Square());
        square.y = Square.SIZE * 2.0;
    }

    // 毎フレーム、この関数を呼び出す
    public function update():Void {
        var rate = frameCount / TOTAL_FRAME;
        if (rate <= 1) {
            square.x = rate.quintOut().lerp(0, 450);
        }
        frameCount++;
    }
}
---------

{{page.logo}}に関係するコードは、以下の部分です。

[source,haxe]
---------
using tweenxcore.Tools;
---------

[source,haxe]
---------
square.x = rate.quintOut().lerp(0, 450);
---------



それでは1つづつ要素を見ていきます。


==== using tweenxcore.Tools

ここで読み込んでいる``tweenxcore.Tools``モジュールは4種類のクラスを持っています。

Easingクラス::
  モーションの曲線として使われる、イージング関数を持ちます

FloatToolsクラス::
  Floatの機能を拡張します。

PointToolsクラス::
  XY座標上の点の拡張です。ベジェ曲線の機能を付け加えます。Flashの``Point``クラスに対してだけではなく、様々なライブラリの``Point``型に対して使えます。

MatrixToolsクラス::
  XY座標のアフィン変換の行列の拡張です。2次元的な動きを相似変換するための機能を付け加えます。Flashの``Matrix``クラスに対してだけではなく、{sourceLink}tweenxcore/geom/Matrix.hx[似たインターフェース]を持つその他のライブラリの``Matrix``型に対して使えます。

``using tweenxcore.Tools;``でこのすべてを拡張として読みこみます。

チュートリアルで紹介する関数の多くはこの``Tools``のモジュールにありますから、そのソースを参照しながら読み進めると理解がしやすいかと思います。

{sourceLink}tweenxcore/Tools.hx[[ソースを見る(tweenxcore.Tools)\]]


==== イージング関数

``quintOut``はイージング関数です。0から1へと変化する``rate``の値を、5次関数をつかって後詰めの値へと変えています

{{page.logo}}が提供するイージング関数はもちろん``quintOut``のみではありません。

link:http://easings.net/[Robert Pennerのイージング関数]を基本とし、中央で減速して再度加速する``OutIn``のモードと、瞬間的に移動を行うwarpが追加された計44個の関数を提供しています。

{% include sample.asciidoc num="400" id="EasingVisualize" %}


これらの関数の中身が具体的にどうなっているのか少し見てみます。

{{page.logo}}での、``cubicIn``関数は以下の通りです。

[source,haxe]
---------
function cubicIn(t:Float):Float {
    return t * t * t;
}
---------

ただ単にFloatを受け取ってFloatを返す、シンプルな関数です。


この関数に先ほどのサンプルコードのイージングを差し替えてみます。たった1行、以下のように変更を加えます。

[source,haxe]
---------
square.x = rate.cubicIn().lerp(0, 450);
---------

{% include sample.asciidoc num="302" id="Easing" %}

動きが、もとの``quintOut``から変わっているのがわかると思います。


==== lerp

``lerp`` は線形補間の関数で、``tweenxcore.Tools.FloatTools``が持つ関数です。

さきほどのサンプルでは、0.0から1.0の値を指定した範囲の値を、0から450までの値に変換しています。これにより``rate``が0.0から1.0まで変化する間に、``square.x``は0から450へと移動します。



== {{page.logo}}の思想



=== 脱ブラックボックス

{{page.logo}}は、出発地点や到達地点を指定して自動で


例えば

* **「一時停止ボタンが押されたときにゲーム内のアニメーションをすべて一時停止した上で、さらにアニメーション付きでポップアップを表示させたい」**ことがあります。
* 通信待ちのインジケータなら、**「インジケータのフェードイン中に通信が終われば、フェードインの途中からフェードアウトに切り替えをしたい」**と思うはずです。


=== 0.0から始まり、1.0で終わる

{{page.logo}}の世界では、始まりの値は0.0であり、終わりの値は1.0です。つまり、

* モーションの時刻の場合、開始時刻は0.0で表し終了時刻は1.0を使います。
* アルファ値の場合、完全な透明は0.0で完全な不透明は1.0です。
* 円の1周の場合、0度は0.0であり360度は1.0です。
* RGBカラーのRed値の場合、0.0が赤みが全くなく1.0が完全な赤です。

{{page.logo}}では、このような0.0から1.0を基準とする値について``rate``という変数名をよく使います。


=== どこでも使える

{{page.logo}}は、プラットフォームや、合わせて使うフレームワーク、プログラミングのパラダイムに左右されることなく利用可能です。

* 目指しているスタイルが、オブジェクト指向でも、手続き型プログラミングでも、関数型プログラミングでも利用できます。
* 使用するフレームワークが、OpenFLであっても、Reactであっても、Unityであっても同じように動作します。
* クライアントサイドだけでなく、たとえサーバーサイドであっても動作します。


== {{page.logo}}チュートリアル


=== イージングを自作する

{{page.logo}}には44種類のイージングありますがこれらを単に使うだけでは、ありふれたモーションになりがちです。{{page.logo}}ではイージングを組み合わせたり混ぜ合わせたりして自分だけのイージングを作り出すことができます。


==== 多重のイージング（関数合成）

イージングを2重、3重に使うと、新しい動きを作ることができます。

{% include sample.asciidoc num="307" id="Composite" %}

```haxe
square.x = rate.cubicIn().bounceOut().lerp(0, 450);
```

``cubicIn``を使ってから``bounceOut``を使ってことで、加速していくバウンドのイージングを作っています。


==== ミックス

``mixEasing``は2つのイージングの中間的なイージングです。

{% include sample.asciidoc num="308" id="Mix" %}

```haxe
square.x = rate.mixEasing(Easing.expoOutIn, Easing.linear, 0.18).lerp(0, 450);
```

サンプルはゲームのカットイン演出にありそうな動きです。``expoOutIn``に``linear``関数を``0.18``ミックスすることで、``OutIn``のイージングの真ん中での静止を無くしています。


==== クロスフェード

``crossfadeEasing``は、始まりと終わりで別のイージングに徐々に変わっていくようなイージングです。

{% include sample.asciidoc num="309" id="Crossfade" %}

```haxe
square.x = rate.crossfadeEasing(
    Easing.quintOut,
    Easing.bounceOut,
    Easing.sineInOut
).lerp(0, 450);
```

サンプルは``quintOut``として始まって、徐々に``Easing.bounceOut``に変わっていくイージングです。変化の仕方の曲線として``Easing.sineInOut``を使っています。


==== ヨーヨー

ヨーヨーは0.0から1.0に行って、逆再生の動きで0.0に帰ってくるようなモーションです。

{% include sample.asciidoc num="304" id="Yoyo" %}

```haxe
// ヨーヨー
square.x = rate.yoyo(Easing.quintOut).lerp(0, 450);
```

==== ジグザグ

ジグザグは0.0から1.0に行って、移動方向を反転させた動きで0.0に帰ってくるようなモーションです。

{% include sample.asciidoc num="319" id="Zigzag" %}

```
// ジグザグ
square.x = rate.zigzag(Easing.quintOut).lerp(0, 450);
```


==== コネクト

``connectEasing``は、2つのイージングをつなげて再生する機能です。

{% include sample.asciidoc num="310" id="Connect" %}

```haxe
square.x = rate.connectEasing(Easing.backOut, Easing.linear, 0.9, 0.4).lerp(0, 450);
```

サンプルでは、最初の``0.9``の時間で``0.4``の位置まで``backOut``で移動した後、残りを``linear``で移動しています。


==== ワンツー

``oneTwoEasing``は、別々のイージングで2回移動を行うイージングです。

{% include sample.asciidoc num="311" id="OneTwo" %}

```haxe
square1.x = rate.oneTwoEasing(Easing.backIn, Easing.linear, 0.7).lerp(30, 420);
```

``backIn``で1回目の移動を、``linear``で2回目の移動を行っています。


==== CustomEasingクラス

このようなイージングのカスタム機能を何度も使う場合、自作のイージングをまとめたCustomEasingクラスを作っておくと便利です。

```haxe
using tweenxcore.Tools;

class CustomEasing {
    public static inline function quintQuintInOut(rate:Float) {
       return rate.quintInOut().quintInOut();
    }
}
```

このように``CustomEasing``クラスを定義しておけば、自分の作ったイージングを``using packageName.CustomEasing;``して簡単に利用できるようになります。


==== イージングエディタ

イージングエディタは、イージングを自作するためのツールです。イージングを組み合わせをブラウザ上で実際に試しながら作ることができます。

image::/images/easing_editor_ja.png[alt="イージングエディタ" class="large" link="./custom/"]
link:./custom/[イージングエディタ | TweenXCore]


=== 値の変化をあつかう（FloatChange）

これまでのサンプルは現在の値のみを使うものでしたが、直前の値と現在の値の両方を使うことで、さまざまな動作を作ることができます。

{{page.logo}}では、直前の値と現在の値をあつかう``FloatChange``というクラスを提供しています。

==== 値を横切った瞬間を取得

``FloatChange``を使用する例として、フレームカウントが特定の値を横切った瞬間の判定があります。

{% include sample.asciidoc num="305" id="CrossOver" %}

```haxe
public function update():Void {
    var floatChange = new FloatChange(frameCount, frameCount += 1);
    
    // フレームカウントが30.0を横切った瞬間に、画面全体に四角を表示
    if (floatChange.isCrossOver(30.0)) {
        addChild(square = new Square());
        square.width = 481;
        square.height = 151;
    }
}
```

``new FloatChange``の第1引数は直前の値``previous``、第2引数は現在の値``current``で、``FloatChange``はこの2つの値をあつかうための便利関数を提供します。

``isCrossOver``関数は、この``previous``と``current``が指定した値を横切った瞬間のみ``true``になります。

この例の場合は``previous \<= 30.0 && 30.0 < current``または``current \<= 30.0 && 30.0 < previous``の条件で判定されます。

``FloatChange``は時間ベースでモーションをさせる場合に特に役に立ちます。例えば、``new FloatChange(previousTime, currentTime)``としたときに、**``previousTime``と``currentTime``がたまたま同一の値になったとしても、``isCrossOver``で判定した処理が2重に呼び出されることはありません。**

{sourceLink}tweenxcore/structure/FloatChange.hx[[ソースを見る(tweenxcore.structure.FloatChange)\]]


==== 値がある区間にいる間を取得

フレームが特定の区間にある時のモーションです。

{% include sample.asciidoc num="305" id="FloatChangePart" %}

```haxe
public function update():Void {
    var floatChange = new FloatChange(frameCount, frameCount += 1);
    floatChange.handlePart(20.0, 50.5, updatePart);
}

private function updatePart(part:FloatChangePart):Void {
    var left  = part.previous.expoOutIn().lerp(0, 480);
    var right = part.current.expoOutIn().lerp(0, 480);
    
    square.x = left;
    square.width = right - left; 
}
```

``handlePart``関数は、``FloatChange``が指定した区間を移動しているときに、すぐに（同期処理で）第3引数であたえた関数を呼び出します。

この例では``20.0``から``50.5``の区間を通過しているときに、``updatePart``関数を呼び出します。

``updatePart``の第1引数の``FloatChangePart``は、開始値が``0.0``、終了値が``1.0``であるような``FloatChange``です。この場合、元の``FloatChange``値が``20.0``のとき``0.0``、``50.5``のとき``1.0``になるように対応させて渡されます。

この時、``FloatChangePart``の``current``と``previous``の値が``0.0``より低い値や、``1.0``より高い値で、``updatePart``が呼び出されることはありません。

{sourceLink}tweenxcore/structure/FloatChangePart.hx[[ソースを見る(tweenxcore.structure.FloatChangePart)\]]


==== 区間の開始と、終了を取得する

``FloatChangePart``には、モーションの開始タイミングや、終了タイミングを取得するための関数が用意されています。

{% include sample.asciidoc num="305" id="EntranceExit" %}

```haxe
private function updatePart(part:FloatChangePart) {
    if (part.isEntrance()) {
        var topBar = new Square();
        addChild(topBar);
        topBar.width = 481;
    }

    square.x = part.current.expoIn().lerp(0, 450);

    if (part.isExit()) {
        var bottomBar = new Square();
        addChild(bottomBar);
        bottomBar.y = 120;
        bottomBar.width = 481;
    }
}
```

==== 繰り返し

1つのパートを、複数回繰り返したい場合、``handlePart``の代わりに``handleRepeatPart``を使います。

{% include sample.asciidoc num="303" id="Repeat" %}

[source,haxe]
---------
change.handleRepeatPart(20, 40, 3, updatePart);
---------

このサンプルでは、20フレーム目から80フレーム目までの60フレームの間に``FloatChangePart``の0.0から1.0の移動が3回繰り返されています。

``handleRepeatPart``が``updateSquare``に引数として渡す``FloatChangePart``は``FloatChangeRepeatPart``として拡張したもので、現在が何回目の繰り返しかなどの追加の情報にアクセスができます。

{sourceLink}tweenxcore/structure/FloatChangeRepeatPart.hx[[ソースを見る(tweenxcore.structure.FloatChangeRepeatPart)\]]


====　連続したモーションをあつかう

連続したモーションをあつかうには、``FloatChange``の``handleTimelinePart``が使えます。

{% include sample.asciidoc num="306" id="TimelinePart" %}

右、下、左の三つの移動を行いました。

```haxe
var timeline:Timeline<FloatChangeTimelinePart->Void>;

public function new() {
    // (中略)

    // 重み付きのupdate関数の配列を作成。
    timeline = new Timeline().add(update1, 1).add(update2, 2).add(update3, 5);
}

public function update():Void {
    var floatChange = new FloatChange(frameCount, frameCount += 1);

    floatChange.handleTimelinePart(0, 80, timeline);
}

private function update1(part:FloatChangeTimelinePart):Void {
    // 右へ移動
    square.x = part.current.lerp(0, 450);
}

private function update2(part:FloatChangeTimelinePart):Void {
    // 下へ移動
    square.y = part.current.cubicInOut().lerp(0, 120);
}

private function update3(part:FloatChangeTimelinePart):Void {
    // 左へ移動
    square.x = part.current.quartIn().cubicIn().lerp(450, 0);
}
```

``Timeline``は重み付きの配列です。配列の各要素に``Float``で重みがつけられています。サンプルでは``update1, update2, update3``に``1:2:5``の重みを付けています。

``handleTimelinePart``は、この重みに従ってupdate関数を呼び出します。サンプルでは、10フレームかけて``update1``を、20フレームかけて``update2``を、50フレームかけて``update3``を呼び出しています。

``FloatChangeTimelinePart``は``FloatChangePart``を継承しており、現在タイムラインのどの位置にいるかなどの情報が追加で取得できます。

{sourceLink}tweenxcore/structure/Timeline.hx[[ソースを見る(tweenxcore.structure.Timeline)\]]
{sourceLink}tweenxcore/structure/FloatChangeTimelinePart.hx[[ソースを見る(tweenxcore.structure.FloatChangeTimelinePart)\]]


=== 2次元の動き
==== 単純な動き
いままでのモーションはすべてX方向の動きをあつかってきましたが、Y方向の動きも入れてみます。

{% include sample.asciidoc num="313" id="Xy" %}

```haxe
square.x = part.current.lerp(0, 450);
square.y = part.current.sinByRate().lerp(60, 105);
```

四角をY方向に揺らしてみました。ここで使っている``sinByRate``は円の一周を1.0としてあつかう``sin``関数です。

このサンプルはそれほど目新しくはありません。問題は同じようなモーションを斜め方向に行う場合です。

==== マトリックス

これまで0.0から1.0の値を実際の``x``座標に変換するのには``lerp``関数を使ってきましたが、回転が加わる場合``lerp``関数では表現できません。

そういった場合は、``MatrixTools.createSimilarityTransform``を使います。

{% include sample.asciidoc num="314" id="Matrix" %}

```haxe
private var matrix:MatrixImpl;

public function new() {
    // (中略)

    // Flashプラットフォームなら、flash.geom.Matrixを使える。
    // pixi.jsや、OpenFLのなど場合、それぞれのフレームワークで定義されているMatrixが使える。
    // 実際のサンプルコードでは、自前でサンプル用に定義したクラスを使っている。
    matrix = new MatrixImpl();
    
    // (0, 0)から(1, 0)への移動を、(100, 0)から(350, 120)への移動に相似変換する行列を作成。
    matrix.createSimilarityTransform(100, 0, 350, 120);
}

private function updatePart(part:FloatChangePart):Void {
    var x = part.current;
    var y = part.current.sinByRate().lerp(0, 0.1);

    square.x = matrix.a * x + matrix.c * y + matrix.tx;
    square.y = matrix.b * x + matrix.d * y + matrix.ty;
}
```

``createSimilarityTransform(fromX, fromY, toX, toY)``関数は、X方向の0.0から1.0までの移動を、X方向に``fromX``から``toX``Y方向に``fromY``から``toY``の移動に相似変換するような行列を作成します。

==== 極座標

{{page.logo}}は極座標をサポートしています。

{% include sample.asciidoc num="315" id="Polar" %}

```haxe
public function new() {
    // (中略)

    // 相似変換を作成
    matrix = new MatrixImpl();
    matrix.createSimilarityTransform(210, 60, 0, 0);
}

private function updatePart(part:FloatChangePart) {
    // 原点に近づいていく
    var distance = part.current.expoOut().lerp(1, 0);
    // 反時計回りに2周する。
    var angle = part.current.lerp(0, -2);
    
    // 極座標からXY座標へ変換
    var polarPoint = new PolarPoint(distance, angle);
    var x = polarPoint.x;
    var y = polarPoint.y;

    // 実際の座標へ変換
    square.x = matrix.a * x + matrix.c * y + matrix.tx;
    square.y = matrix.b * x + matrix.d * y + matrix.ty;
}
```

サンプルは、``(210, 60)``を極座標の中心として、そこに``(0, 0)``の位置から回転しながら近づいていくモーションです。

{sourceLink}tweenxcore/geom/PolarPoint.hx[[ソースを見る(tweenxcore.geom.PolarPoint)\]]


==== ベジェ曲線

{{page.logo}}はベジェ曲線もサポートしています。

{% include sample.asciidoc num="316" id="Bezier" %}

```haxe
square.x = rate.bezier3(0, 50, 400, 450);
square.y = rate.bezier3(0, 200, -50, 120);
```

サンプルは、始点が``(0, 0)``、制御点が``(50, 200)``と``(400, -50)``、終点が``(450, 120)``の3次ベジェ曲線です。

ベジェ曲線は3次だけでなく任意の次数ののベジェ曲線が使えます。詳しくは``tweenxcore.Tools``モジュールを確認してください。

{sourceLink}tweenxcore/Tools.hx[[ソースを見る(tweenxcore.Tools)\]]



=== いろんなものを動かす

==== RGBカラー、HSVカラー

{{page.logo}}では、RGBカラーとHSVカラーが使えます。

{% include sample.asciidoc num="317" id="Hsv" %}

```haxe
var prevX = part.previous.expoInOut().lerp(0, 480);
var currentX = part.current.expoInOut().lerp(0, 480);

var hsvCurve = part.current.expoInOut();
var hue = hsvCurve.lerp(0.0, 1.0);
var saturation = hsvCurve.lerp(0.0, 0.8);
var value = 0.95;

var square = new Square();
addChild(square);
square.color = new HsvColor(hue, saturation, value);
square.x = prevX;
square.y = 60;
square.width = currentX - prevX;
```

サンプルはHSVのそれぞれの値を動かしながら帯を描いています。

{sourceLink}tweenxcore/color[[ソースを見る(tweenxcore.color)\]]



==== 画像

連続したモーションをあつかうのに重み付き配列の``Timeline``を紹介しましたが、この``Timeline``は連続でない値のアニメーションの指定にも使用できます。

つまり、例えば画像のパラパラアニメーションを作るのにも使えます。

{% include sample.asciidoc num="318" id="Image"%}

++++
<script src="/js/Sample.js"></script>
++++
