
<!-- saved from url=(0051)https://translate.googleusercontent.com/translate_f -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body><pre>- -
Layout: default
Title: TweenXCore - lightweight motion library for haxe
Tweenxcore: +++ &lt;span class = "tweenxcore"&gt; TweenX &lt;span class = "core"&gt; Core &lt;/ span&gt; &lt;/ span&gt; +++
- -
: Showtitle:
: Author: shohei 909
: Toc: macro
: Toc-title: Table of Contents
: Toclevels: 4
: SampleLink: link: https: //github.com/shohei909/tweenx/blob/develop/sample/
: SourceLink: link: https: //github.com/shohei909/tweenx/blob/develop/src/tweenxcore/
: Page-liquid:

= {{Page.tweenxcore}}

{{Page.tweenxcore}} is a cross-platform ** tweening library ** for easier creation of pleasant motion at https://haxe.org/[Haxe].

It is designed to make execution speed faster, development speed faster, less buggy, less learning cost, and motion free and interesting.

++++
&lt;Div&gt; &lt;canvas class = "movie" id = "CustomEasingSample" /&gt; &lt;/ canvas&gt; &lt;/ div&gt;
++++

Toc :: []

== Function

* 44 types of easing function
* Repeat
* Yo-yo, zigzag movement
* Custom functions such as easing mix, crossfade, concatenation
* HSV color, RGB color
* Polar coordinates
* Bezier curve
* Enhancements to `` Float``, such as `` lerp``, `` inverseLerp``, `` clamp``


== speed

It does not do any extra processing or instance creation, so it works very fast.

The following is a comparison with each tween library on the Flash platform. We measured the FPS when tweeding 250000 objects at the same time.

Image :: / images / benchmark1.png [Benchmark result]

Link: /sample/bench1/TweensyBench.swf? Width = 401 &amp; height = 401 [[Tweensy \]] +
Link: /sample/bench1/TweenXBench.swf? Width = 401 &amp; height = 401 [[TweenX \]] +
Link: /sample/bench1/ActuateBench.swf? Width = 401 &amp; height = 401 [[Actuate \]] +
Link: /sample/bench1/BetweenAS3Bench.swf? Width = 401 &amp; height = 401 [[BetweenAS3 \]] +
Link: /sample/bench1/TweenXCoreBench.swf? Width = 401 &amp; height = 401 [[TweenXCore \]]

{SampleLink} tweenx / 800 _ BenchMark / src [[View the code (Github) \]]


== License

Because it is MIT license, it can use, modify, redistribute regardless of commercial, non-commercial, individual, corporation.


== Start {{page.tweenxcore}}

=== Haxe version

It supports 3.1.3 or later of http://haxe.org/[ Haxe].


=== Installation

After installing Haxe, enter the following command from the command line.

[Source, shell]
---------
Haxelib install tweenxcore
---------

=== Hello {{page.tweenxcore}}

As the first sample of {{page.tweenxcore}}, let's look at the code that moves the rectangular x coordinate from 0 to 450.

{% Include sample.asciidoc id = "Simplest"%}

[Source, haxe, linenums]
---------
Import sample.Sprite;
Import sample.Square;
Using tweenxcore.Tools;

Class SimplestSample extends Sprite {
&nbsp;&nbsp;&nbsp;&nbsp;Public static var TOTAL_FRAME: Int = 20;
&nbsp;&nbsp;&nbsp;&nbsp;Private var square: Square;
&nbsp;&nbsp;&nbsp;&nbsp;Private var frameCount = 0;

&nbsp;&nbsp;&nbsp;&nbsp;Public function new () {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Super ();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Place the square in the initial position
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddChild (square = new Square ());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Square.y = Square.SIZE * 2.0;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;// Call this function every frame
&nbsp;&nbsp;&nbsp;&nbsp;Public function update (): Void {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var rate = frameCount / TOTAL_FRAME;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// animation when rate is 0 to 1.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If (rate &lt;= 1) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Move x from 0 to 450 according to the value of rate.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Square.x = rate.quintOut (). Lerp (0, 450);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FrameCount ++;
&nbsp;&nbsp;&nbsp;&nbsp;}
}
---------

The code related to {{page.tweenxcore}} is:

[Source, haxe]
---------
Using tweenxcore.Tools;
---------

[Source, haxe]
---------
Square.x = rate.quintOut (). Lerp (0, 450);
---------



Let's look at each element one by one.


==== using tweenxcore.Tools

The `` tweenxcore.Tools`` module that we load here has four classes.

Easing Class ::
&nbsp;&nbsp;It has an easing function used as a curve of motion

FloatTools class ::
&nbsp;&nbsp;Extend the functionality of Float.

PointTools class ::
&nbsp;&nbsp;Extension of points on XY coordinates. Add Bezier curve function. It can be used not only for the `` Point`` class in Flash, but also for `` Point`` types in various libraries.

MatrixTools Class ::
&nbsp;&nbsp;Extension of matrix of affine transformation of XY coordinates. We add a function for similarity transformation of two-dimensional motion. It can be used not only for the Flash `` Matrix`` class but also for the `` Matrix`` type of other library with {sourceLink} tweenxcore / geom / Matrix.hx [similar interface].

`` Using tweenxcore.Tools; `` will read all of this as extensions.

Many of the functions introduced in the tutorial are in this `` Tools`` module, so I think that it is easy to understand by reading the source while referring to that source.

{SourceLink} tweenxcore / Tools.hx [[View source (tweenxcore.Tools) \]]


==== easing function

`` QuintOut`` is the easing function. We change the value of `` rate`` which changes from 0 to 1 to the value after the quadratic function

Of course the easing function provided by {{page.tweenxcore}} is not only `` quintOut``.

Link: http: // easings.net/ Based on [easing function of Robert Penner], the mode of `` OutIn`` which decelerates and accelerates again in the center and warp which instantaneously moves are added We provide 44 functions.
&nbsp;&nbsp;&nbsp;
{% Include sample.asciidoc id = "EasingVisualize"%}


Let's see what the contents of these functions are concretely.

In {{page.tweenxcore}}, the `` cubicIn`` function is as follows.

[Source, haxe]
---------
Function cubicIn (t: Float): Float {
&nbsp;&nbsp;&nbsp;&nbsp;Return t * t * t;
}
---------

It is simply a function that simply receives a Float and returns Float.


I will replace the easing of the previous sample code with this function. Just one line, make the changes as follows.

[Source, haxe]
---------
Square.x = rate.cubicIn (). Lerp (0, 450);
---------

{% Include sample.asciidoc id = "Easing"%}

I think you can see that the movement has changed from the original `` quintOut``.


==== lerp

`` Lerp`` is a function of linear interpolation, a function of `` tweenxcore.Tools.FloatTools``.

In the example above, values ​​in the range specified values ​​from 0.0 to 1.0 are converted to values ​​from 0 to 450. This will cause `` square.x`` to move from 0 to 450 while `` rate`` changes from 0.0 to 1.0.



== thought of {{page.tweenxcore}}



=== Starting with 0.0 and ending with 1.0

In the world of {{page.tweenxcore}}, the start value is 0.0 and the end value is 1.0.

That is,

* For time of motion, start time is expressed as 0.0 and end time is used as 1.0.
* For alpha values, the complete transparency is 0.0 and the complete opacity is 1.0.
* In case of circle 1 turn, 0 degree is 0.0 and 360 degree is 1.0.
* For red values ​​of RGB color, 0.0 is no reddish and 1.0 is perfect red.

For {{page.tweenxcore}}, we often use the variable name `` rate`` for such values ​​that are based on 0.0 to 1.0.



=== blackout box

{{Page.tweenxcore}} does not have such a function as to automatically move objects by designating a departure point or a reaching point.

The function that the tween library automatically moves the object is easy if you just play the motion, but it will be difficult when you try to do somewhat elaborate things.

For example, it is as follows

* Pause the ** animation in the game when the pause button is pushed, want to display the popup with further animation **
* When the indicator is fading in ** ** When the communication is over, ** I want to switch to fade out immediately **
* For certain motion, only during mouse down ** I want to play slowly **

Many tween libraries can not realize such contents or have to remember complex specifications.

In contrast, the solution for {{page.tweenxcore}} is straightforward.

* If you want to stop motion, stop ** if you stop updating the place you want to stop **
* Fade in and fade out can be switched with a simple ** `` if`` statement **
* If you increase the frame count ( `` frameCount``) one by one, ** 0.5 one by one, the motion will be played at 0.5 times speed **

Nothing is difficult.

{{Page.tweenxcore}} offers three things:

Function to convert values ​​not in the range of 0.0 to 1.0 from 0.0 to 1.0. ( `` FloatTools.inverseLerp`` function, `` FloatChange`` class)
* Function to convert a numeric value from 0.0 to 1.0 to a numeric value from 0.0 to 1.0 to draw another curve. ( `` Easing`` and custom easing functions)
* Function to convert numeric values ​​from 0.0 to 1.0 to various values. ( `` FloatTools.lerp`` and `` Timeline`` class)

If you have only this function, you can freely create your own motions. The method will be explained in the tutorial.



=== Anywhere you can use

{{Page.tweenxcore}} can be used without being influenced by the platform, the framework used together, and the programming paradigm.

* The style you are aiming is well matched in object oriented, procedural programming, and functional programming.
* Whether the framework you use is OpenFL, React or Unity will work the same way.
* Works on client side, server side, compile time as well.



== {{page.tweenxcore}} Tutorial

=== Create your own easing

There are 44 types of easing in {{page.tweenxcore}}, but using these simply tends to be a common motion. In {{page.tweenxcore}} you can combine and blend easing to create your own easing.


==== Multiple easing (function synthesis)

If easing is used in duplicate, triplicate, you can make new movements.

{% Include sample.asciidoc id = "Composite"%}

`` `Haxe
Square.x = rate.cubicIn (). BounceOut (). Lerp (0, 450);
`` `

By using `` cubicIn`` and using `` bounceOut``, we are making an easing of accelerating bounds.


==== Mix

`` MixEasing`` is intermediate easing between the two easings.

{% Include sample.asciidoc id = "Mix"%}

`` `Haxe
Square.x = rate.mixEasing (Easing.expoOutIn, Easing.linear, 0.18) .lerp (0, 450);
`` `

The sample is likely to be in the cut-in directing of the game. Mixing the `` linear`` function to `` expoOutIn`` `` 0.18`` eliminates stillness in the middle of `` OutIn`` easing.


==== cross fade

`` CrossfadeEasing`` is easing that gradually changes to another easing at the beginning and at the end.

{% Include sample.asciidoc id = "Crossfade"%}

`` `Haxe
Square.x = rate.crossfadeEasing (
&nbsp;&nbsp;&nbsp;&nbsp;Easing.quintOut,
&nbsp;&nbsp;&nbsp;&nbsp;Easing. BounceOut,
&nbsp;&nbsp;&nbsp;&nbsp;Easing.sine InOut
) .lerp (0, 450);
`` `

The sample begins as `` quintOut`` and gradually changes to `` Easing.bounceOut`` in easing. I use `` Easing.sineInOut`` as a curve of how to change.


==== Yo-yo

Yo-yo is a motion like going from 0.0 to 1.0 and returning to 0.0 in the reverse playback movement.

{% Include sample.asciidoc id = "Yoyo"%}

`` `Haxe
// YoYo
Square.x = rate.yoyo (Easing.quintOut) .lerp (0, 450);
`` `

==== zigzag

The zigzag is a motion that goes from 0.0 to 1.0 and returns to 0.0 with the movement in which the moving direction is reversed.

{% Include sample.asciidoc id = "Zigzag"%}

`` `
// Zigzag
Square.x = rate.zigzag (Easing.quintOut) .lerp (0, 450);
`` `


==== Connect

`` ConnectEasing`` is a function that connects two easings and plays them.

{% Include sample.asciidoc id = "Connect"%}

`` `Haxe
Square.x = rate.connectEasing (Easing.backOut, Easing.linear, 0.9, 0.4) .lerp (0, 450);
`` `

In the sample, we move `` backOut`` to `` 0.4`` in the first `` 0.9`` time and then move the rest in `` linear``.


==== one-to-one

`` OneTwoEasing`` is easing to move twice in separate easing.

{% Include sample.asciidoc id = "OneTwo"%}

`` `Haxe
Square1.x = rate.oneTwoEasing (Easing.backIn, Easing.linear, 0.7) .lerp (30, 420);
`` `

``backIn`` makes the first move, ``linear`` makes the second move.


==== CustomEasing class

If you use such easing custom features over and over again, it is useful to create a CustomEasing class that summarizes your own easing.

`` `Haxe
Using tweenxcore.Tools;

Class CustomEasing {
&nbsp;&nbsp;&nbsp;&nbsp;Public static inline function quintQuintInOut (rate: Float) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return rate.quintInOut (). QuintInOut ();
&nbsp;&nbsp;&nbsp;&nbsp;}
}
`` `

If you define the `` CustomEasing`` class like this, you can easily use it by `` using packageName.CustomEasing; ``, for your own easing.


==== easing editor

The easing editor is a tool for making Easing yourself. You can make easing while actually trying combinations on a browser.

Image :: / images / easing_editor_en.png [alt = "easing editor" class = "large" link = "./ custom /"]
Link: ./ custom / [easing editor | TweenXCore]


=== Handle changes in value (FloatChange)

Previous samples used only the current value, but you can make various actions by using both the previous value and the current value.

{{Page.tweenxcore}} provides a class called `` FloatChange`` that handles the previous and current values.

==== Get the moment when you cross the value

As an example of using `` FloatChange``, there is a judgment at the moment when the frame count crosses a specific value.

{% Include sample.asciidoc id = "CrossOver"%}

`` `Haxe
Public function update (): Void {
&nbsp;&nbsp;&nbsp;&nbsp;Var floatChange = new FloatChange (frameCount, frameCount + = 1);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;// At the moment when the frame count crossed 30.0, a rectangle is displayed on the whole screen
&nbsp;&nbsp;&nbsp;&nbsp;If (floatChange.isCrossOver (30.0)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddChild (square = new Square ());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Square. Width = 481;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Square.height = 151;
&nbsp;&nbsp;&nbsp;&nbsp;}
}
`` `

The first argument of `` new FloatChange`` is the previous value `` previous``, the second argument is the current value `` current``, `` FloatChange`` is a convenience function to handle these two values .

The `` isCrossOver`` function is `` true`` only at the moment when it crosses the value specified by `` previous`` and `` current``.

In this example, it is judged under the condition of `` previous \ &lt;= 30.0 &amp;&amp; 30.0 &lt;current`` or `` current \ &lt;= 30.0 &amp;&amp; 30.0 &lt;previous``.

`` FloatChange`` is particularly useful for making time-based motion. For example, even if `* new FloatChange (previousTime, currentTime)` `is set, **` `previousTime`` and` `currentTime`` happen to be the same value, they are determined by` `isCrossOver`` Processing is never called twice. **

{SourceLink} tweenxcore / structure / FloatChange.hx [[View Source (tweenxcore.structure.FloatChange) \]]


==== Get while you are in a section with values

The motion when the frame is in a specific section.

{% Include sample.asciidoc id = "FloatChangePart"%}

`` `Haxe
Public function update (): Void {
&nbsp;&nbsp;&nbsp;&nbsp;Var floatChange = new FloatChange (frameCount, frameCount + = 1);
&nbsp;&nbsp;&nbsp;&nbsp;FloatChange.handlePart (20.0, 50.5, updatePart);
}

Private function updatePart (part: FloatChangePart): Void {
&nbsp;&nbsp;&nbsp;&nbsp;Var left = part.previous.expoOutIn (). Lerp (0, 480);
&nbsp;&nbsp;&nbsp;&nbsp;Var right = part.current.expoOutIn (). Lerp (0, 480);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;Square.x = left;
&nbsp;&nbsp;&nbsp;&nbsp;Square.width = right - left;
}
`` `

The `` handlePart`` function calls the function given in the third argument (by synchronous processing) as soon as it moves in the section specified by `` FloatChange``.

In this example we call the `` updatePart`` function when passing through the section `` 20.0`` to `` 50.5``.

`` FloatChangePart``, the first argument of `` updatePart``, is `` FloatChange`` whose start value is `` 0.0`` and whose exit value is `` 1.0``. In this case, it is passed in correspondence so that it becomes `` 0.0`` when `` FloatChange`` value is `` 20.0`` and `` 1.0`` when `` 50.5``.

At this time, `` updatePart`` is called with `` current`` and `` previous`` of `` FloatChangePart`` at a value lower than `` 0.0`` or `` 1.0`` There is nothing to be done.

{SourceLink} tweenxcore / structure / FloatChangePart.hx [[View source (tweenxcore.structure.FloatChangePart) \]]


==== Acquire the start and end of the section

In `` FloatChangePart``, functions are provided to obtain the start and end timing of motion.

{% Include sample.asciidoc id = "EntranceExit"%}

`` `Haxe
Private function updatePart (part: FloatChangePart) {
&nbsp;&nbsp;&nbsp;&nbsp;If (part.isEntrance ()) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var topBar = new Square ();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddChild (topBar);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TopBar.width = 481;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;Square.x = part.current.expoIn (). Lerp (0, 450);

&nbsp;&nbsp;&nbsp;&nbsp;If (part.isExit ()) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var bottomBar = new Square ();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AddChild (bottomBar);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BottomBar.y = 120;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BottomBar.width = 481;
&nbsp;&nbsp;&nbsp;&nbsp;}
}
`` `

==== Repeat

If you want to repeat a part more than once, use `` handleRepeatPart`` instead of `` handlePart``.

{% Include sample.asciidoc id = "Repeat"%}

[Source, haxe]
---------
Change.handleRepeatPart (20, 40, 3, updatePart);
---------

In this sample, the movement of 0.0 to 1.0 of `` FloatChangePart`` has been repeated three times between 60 frames from the 20th frame to the 80th frame.

`` FloatChangePart`` which `` handleRepeatPart`` passes as an argument to `` updateSquare`` is extended as `` FloatChangeRepeatPart``, so you can access additional information such as how many times you are currently repeating.

{SourceLink} tweenxcore / structure / FloatChangeRepeatPart.hx [[View source (tweenxcore.structure.FloatChangeRepeatPart) \]]


==== Handle Continuous Motion

To handle consecutive motions, you can use `` handleTimelinePart`` of `` FloatChange``.

{% Include sample.asciidoc id = "TimelinePart"%}

We made three movements, right, down, left.

`` `Haxe
Var timeline: Timeline &lt;FloatChangeTimelinePart-&gt; Void&gt;;

Public function new () {
&nbsp;&nbsp;&nbsp;&nbsp;// (Abbreviation)

&nbsp;&nbsp;&nbsp;&nbsp;// Create an array of weighted update functions.
&nbsp;&nbsp;&nbsp;&nbsp;Timeline = new Timeline (). Add (update 1, 1). Add (update 2, 2). Add (update 3, 5);
}

Public function update (): Void {
&nbsp;&nbsp;&nbsp;&nbsp;Var floatChange = new FloatChange (frameCount, frameCount + = 1);

&nbsp;&nbsp;&nbsp;&nbsp;FloatChange.handleTimelinePart (0, 80, timeline);
}

Private function update 1 (part: FloatChangeTimelinePart): Void {
&nbsp;&nbsp;&nbsp;&nbsp;// Move to the right
&nbsp;&nbsp;&nbsp;&nbsp;Square.x = part.current.lerp (0, 450);
}

Private function update 2 (part: FloatChangeTimelinePart): Void {
&nbsp;&nbsp;&nbsp;&nbsp;// move down
&nbsp;&nbsp;&nbsp;&nbsp;Square.y = part.current.cubicInOut (). Lerp (0, 120);
}

Private function update 3 (part: FloatChangeTimelinePart): Void {
&nbsp;&nbsp;&nbsp;&nbsp;// Move to the left
&nbsp;&nbsp;&nbsp;&nbsp;Square.x = part.current.quartIn (). CubicIn (). Lerp (450, 0);
}
`` `

`` Timeline`` is a weighted array. Each element of the array is weighted with `` Float``. In the sample, `` update1, update2, update3`` is weighted by `` 1: 2: 5``.

`` HandleTimelinePart`` calls the update function according to this weight. In the sample, we call `` update1`` over 10 frames, `` update2`` over 20 frames, and `` update3`` over 50 frames.

`` FloatChangeTimelinePart`` inherits from `` FloatChangePart`` and you can get additional information such as where you are currently on the timeline.

{SourceLink} tweenxcore / structure / Timeline.hx [[View source (tweenxcore.structure.Timeline) \]]
{SourceLink} tweenxcore / structure / FloatChangeTimelinePart.hx [[View source (tweenxcore.structure.FloatChangeTimelinePart) \]]


=== Two-dimensional motion

==== Simple motion
All of the motion up to now has been compensated for movement in the X direction, but I will also add motion in the Y direction.

{% Include sample.asciidoc id = "Xy"%}

`` `Haxe
Square.x = part.current.lerp (0, 450);
Square.y = part.current.sinByRate (). Lerp (60, 105);
`` `

I shook the square in the Y direction. The `` sinByRate`` we use here is the `` sin`` function which treats circle circularity as 1.0.

This sample is not very new. The problem is when doing similar motion diagonally.

==== similarity transformation
We have used the `` lerp`` function to convert a value between 0.0 and 1.0 to an actual `` x`` coordinate, but it can not be expressed by the `` lerp`` function when rotation is added.

In that case, use `` MatrixTools.createSimilarityTransform``.

{% Include sample.asciidoc id = "Matrix"%}

`` `Haxe
Private var matrix: MatrixImpl;

Public function new () {
&nbsp;&nbsp;&nbsp;&nbsp;// (Abbreviation)

&nbsp;&nbsp;&nbsp;&nbsp;// Flash platform, you can use flash.geom.Matrix.
&nbsp;&nbsp;&nbsp;&nbsp;In the case of // pixi.js, OpenFL etc, you can use Matrix defined in each framework.
&nbsp;&nbsp;&nbsp;&nbsp;// In the actual sample code, I use classes I defined for my own sample.
&nbsp;&nbsp;&nbsp;&nbsp;Matrix = new MatrixImpl ();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;Create a matrix that similarly transforms the movement from (/ 0, 0) to (1, 0) to (100, 0) to (350, 120).
&nbsp;&nbsp;&nbsp;&nbsp;Matrix.createSimilarityTransform (100, 0, 350, 120);
}

Private function updatePart (part: FloatChangePart): Void {
&nbsp;&nbsp;&nbsp;&nbsp;Var x = part.current;
&nbsp;&nbsp;&nbsp;&nbsp;Var y = part.current.sinByRate (). Lerp (0, 0.1);

&nbsp;&nbsp;&nbsp;&nbsp;Square.x = matrix.a * x + matrix.c * y + matrix.tx;
&nbsp;&nbsp;&nbsp;&nbsp;Square.y = matrix.b * x + matrix.d * y + matrix.ty;
}
`` `

`` CreateSimilarityTransform (fromX, fromY, toX, toY) The `` function moves from 0.0 to 1.0 in the X direction from `` fromX`` to `` fromY`` in the X direction `` fromY`` To the movement of `` toY``.

Polar coordinates

{{Page.tweenxcore}} supports polar coordinates.

{% Include sample.asciidoc id = "Polar"%}

`` `Haxe
Public function new () {
&nbsp;&nbsp;&nbsp;&nbsp;// (Abbreviation)

&nbsp;&nbsp;&nbsp;&nbsp;// Create similarity transformation
&nbsp;&nbsp;&nbsp;&nbsp;Matrix = new MatrixImpl ();
&nbsp;&nbsp;&nbsp;&nbsp;Matrix.createSimilarityTransform (210, 60, 0, 0);
}

Private function updatePart (part: FloatChangePart) {
&nbsp;&nbsp;&nbsp;&nbsp;/ / Approaching to the origin
&nbsp;&nbsp;&nbsp;&nbsp;Var distance = part.current.expoOut (). Lerp (1, 0);
&nbsp;&nbsp;&nbsp;&nbsp;/ / I make two laps counterclockwise.
&nbsp;&nbsp;&nbsp;&nbsp;Var angle = part.current.lerp (0, -2);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;// Convert from polar coordinates to XY coordinates
&nbsp;&nbsp;&nbsp;&nbsp;Var polarPoint = new PolarPoint (distance, angle);
&nbsp;&nbsp;&nbsp;&nbsp;Var x = polarPoint.x;
&nbsp;&nbsp;&nbsp;&nbsp;Var y = polarPoint.y;

&nbsp;&nbsp;&nbsp;&nbsp;// Convert to actual coordinates
&nbsp;&nbsp;&nbsp;&nbsp;Square.x = matrix.a * x + matrix.c * y + matrix.tx;
&nbsp;&nbsp;&nbsp;&nbsp;Square.y = matrix.b * x + matrix.d * y + matrix.ty;
}
`` `

The sample is a motion that rotates from `` (0, 0) `` position with `(210, 60)` `as the center of polar coordinates.

{SourceLink} tweenxcore / geom / PolarPoint.hx [[View source (tweenxcore.geom.PolarPoint) \]]


==== Bezier curve

{{Page.tweenxcore}} also supports Bezier curves.

{% Include sample.asciidoc id = "Bezier"%}

`` `Haxe
Square.x = rate.bezier 3 (0, 50, 400, 450);
Square.y = rate.bezier 3 (0, 200, -50, 120);
`` `

The sample has a starting point of `` (0, 0) ``, a control point of `` (50, 200) `` and `` (400, - 50) `` and an end point `` (450, 120) `` The cubic Bezier curve of.

Bezier curves can be used for Bezier curves of arbitrary order as well as third order. Please check the `` tweenxcore.Tools`` module for details.

{SourceLink} tweenxcore / Tools.hx [[View source (tweenxcore.Tools) \]]



=== Move various things

==== RGB color, HSV color

In {{page.tweenxcore}} you can use RGB color and HSV color.

{% Include sample.asciidoc id = "Hsv"%}

`` `Haxe
Var curve = part.current.expoInOut ();
Var hue = hsvCurve.lerp (0.0, 1.0); // make one hue around hue
Var saturation = hsvCurve.lerp (0.0, 0.8); // Increase saturation
Var value = 0.95; // lightness fixed
Var color = new HsvColor (hue, saturation, value);
`` `

The sample draws a band while moving each value of HSV.

{SourceLink} tweenxcore / color [[View source (tweenxcore.color) \]]



The image

I introduced a weighted array `` Timeline`` to deal with consecutive motions, but this `` Timeline`` can also be used to move non-contiguous values.

In other words, it can be used to create a flawless animation of images, for example.

{% Include sample.asciidoc id = "Image"%}



=== Based on non-time tween

==== Tweening based on mouse coordinates

If it is possible to convert from 0.0 to 1.0, the value that is the source of the tween does not have to be time. In the following sample, the rectangular position is moved based on the mouse coordinates.

{% Include sample.asciidoc id = "Mouse"%}

`` `Haxe
Var rate X = mouseX.inverseLerp (10, 800). Clamp (0, 1);
Var rateY = mouseY.repeat (0, 400);

Square.x = rateX.expoInOut (). Lerp (0, 450);
Square.y = rateY.yoyo (Easing.expoInOut) .lerp (0, 120);
`` `

`` InverseLerp`` is a linear interpolation in the opposite direction to `` lerp``, which converts values ​​from 0 to 800 from 0 to 1 in the example.

`` Clamp`` is a function that sets the lower and upper limits, in our example we convert a value less than 0 to 0 and a value greater than 1 to 1.

`` Repeat`` is a iterating function, which is the same as `` inverseLerp`` until converting a value from 0 to 400 from 0 to 1, but specifying a value less than 0 or a value greater than 400 Behavior is different outside the spacing.
In other words, `` repeat`` converts from 0 to 1 with values ​​of -400 to 0, 0 to 400, 400 to 800, 800 to 1200, and so on.



++++
&lt;Script src = "/ js / Sample.js"&gt; &lt;/ script&gt;
++++
</pre></body></html>