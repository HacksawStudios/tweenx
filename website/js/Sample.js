// Generated by Haxe 3.3.0
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var sample_context_Drawable = function() { };
sample_context_Drawable.__name__ = ["sample","context","Drawable"];
sample_context_Drawable.prototype = {
	__class__: sample_context_Drawable
};
var sample_Sprite = function() {
	this.children = [];
};
sample_Sprite.__name__ = ["sample","Sprite"];
sample_Sprite.__interfaces__ = [sample_context_Drawable];
sample_Sprite.prototype = {
	addChild: function(child) {
		this.children.push(child);
	}
	,draw: function(context) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.draw(context);
		}
	}
	,onMouseMove: function(e) {
	}
	,__class__: sample_Sprite
};
var BezierSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
};
BezierSample.__name__ = ["BezierSample"];
BezierSample.__super__ = sample_Sprite;
BezierSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var previousValue = this.frameCount;
		var currentValue = this.frameCount += 1;
		if((20.0 < previousValue && currentValue < 50.5 || 20.0 < currentValue && previousValue < 50.5 || 50.5 < previousValue && currentValue < 20.0 || 50.5 < currentValue && previousValue < 20.0) && previousValue != currentValue) {
			var value = (previousValue - 20.0) / 30.5;
			var tmp = value <= 0.0?0.0:1.0 <= value?1.0:value;
			var value1 = (currentValue - 20.0) / 30.5;
			this.updatePart(new tweenxcore_structure_FloatChangePart(tmp,value1 <= 0.0?0.0:1.0 <= value1?1.0:value1));
		}
	}
	,updatePart: function(part) {
		var rate = part.current;
		var control = 50 * (1 - rate) + 400 * rate;
		this.square.x = ((0 * (1 - rate) + 50 * rate) * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + (400 * (1 - rate) + 450 * rate) * rate) * rate;
		var control1 = 200 * (1 - rate) + -50 * rate;
		this.square.y = ((0 * (1 - rate) + 200 * rate) * (1 - rate) + control1 * rate) * (1 - rate) + (control1 * (1 - rate) + (-50 * (1 - rate) + 120 * rate) * rate) * rate;
	}
	,__class__: BezierSample
});
var CompositeSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
};
CompositeSample.__name__ = ["CompositeSample"];
CompositeSample.__super__ = sample_Sprite;
CompositeSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var rate = this.frameCount / CompositeSample.TOTAL_FRAME;
		if(rate <= 1) {
			var t = rate * rate * rate;
			var rate1;
			if(t < 0.36363636363636365) {
				rate1 = 7.5625 * t * t;
			} else if(t < 0.72727272727272729) {
				t -= 0.54545454545454541;
				rate1 = 7.5625 * t * t + 0.75;
			} else if(t < 0.90909090909090906) {
				t -= 0.81818181818181823;
				rate1 = 7.5625 * t * t + 0.9375;
			} else {
				t -= 0.95454545454545459;
				rate1 = 7.5625 * t * t + 0.984375;
			}
			this.square.x = 0 * (1 - rate1) + 450 * rate1;
		}
		this.frameCount++;
	}
	,__class__: CompositeSample
});
var ConnectSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
};
ConnectSample.__name__ = ["ConnectSample"];
ConnectSample.__super__ = sample_Sprite;
ConnectSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var rate = this.frameCount / ConnectSample.TOTAL_FRAME;
		if(rate <= 1) {
			var rate1;
			if(rate < 0.9) {
				var rate2 = tweenxcore_Easing.backOut(rate / 0.9);
				rate1 = 0 * (1 - rate2) + 0.4 * rate2;
			} else {
				var rate3 = tweenxcore_Easing.linear((rate - 0.9) / 0.099999999999999978);
				rate1 = 0.4 * (1 - rate3) + rate3;
			}
			this.square.x = 0 * (1 - rate1) + 450 * rate1;
		}
		this.frameCount++;
	}
	,__class__: ConnectSample
});
var CrossOverSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
};
CrossOverSample.__name__ = ["CrossOverSample"];
CrossOverSample.__super__ = sample_Sprite;
CrossOverSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		if(new tweenxcore_structure_FloatChange(this.frameCount,this.frameCount += 1).isCrossOver(30.0)) {
			this.addChild(this.square = new sample_Square());
			this.square.width = 481;
			this.square.height = 151;
		}
	}
	,__class__: CrossOverSample
});
var CrossfadeSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
};
CrossfadeSample.__name__ = ["CrossfadeSample"];
CrossfadeSample.__super__ = sample_Sprite;
CrossfadeSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var rate = this.frameCount / CrossfadeSample.TOTAL_FRAME;
		if(rate <= 1) {
			var rate1 = tweenxcore_Easing.sineInOut(rate);
			var rate2 = 0 * (1 - rate1) + rate1;
			var rate3 = tweenxcore_Easing.quintOut(rate) * (1 - rate2) + tweenxcore_Easing.bounceOut(rate) * rate2;
			this.square.x = this.square.x = 0 * (1 - rate3) + 450 * rate3;
		}
		this.frameCount++;
	}
	,__class__: CrossfadeSample
});
var CustomEasingSample = function() {
	this.frame = 0;
	sample_Sprite.call(this);
	this.squares = [];
	var _g = 0;
	while(_g < 5) {
		var i = _g++;
		var square = new sample_Square();
		square.x = 30;
		square.y = 30 * i;
		this.addChild(square);
		this.squares.push(square);
	}
};
CustomEasingSample.__name__ = ["CustomEasingSample"];
CustomEasingSample.__super__ = sample_Sprite;
CustomEasingSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		new tweenxcore_structure_FloatChange(this.frame,this.frame += 1).handleRepeatPart(0,60,3,$bind(this,this.updatePart));
	}
	,updatePart: function(part) {
		var start = 30;
		var end = 420;
		if(part.repeatIndex % 2 == 1) {
			end = 30;
			start = 420;
		}
		var max = this.squares.length - 1;
		var _g1 = 0;
		var _g = this.squares.length;
		while(_g1 < _g) {
			var i = _g1++;
			var rate = i / max;
			var from = 0 * (1 - rate) + 0.2 * rate;
			var to = 0.2 * (1 - rate) + rate;
			if((from < part.previous && part.current < to || from < part.current && part.previous < to || to < part.previous && part.current < from || to < part.current && part.previous < from) && part.previous != part.current) {
				var tmp = (function(a2,a1,i1,f) {
					return function(a3) {
						f[0](i1[0],a1[0],a2[0],a3);
					};
				})([end],[start],[i],[$bind(this,this.updateSquare)]);
				var value = (part.previous - from) / (to - from);
				var tmp1 = value <= 0.0?0.0:1.0 <= value?1.0:value;
				var value1 = (part.current - from) / (to - from);
				tmp(new tweenxcore_structure_FloatChangePart(tmp1,value1 <= 0.0?0.0:1.0 <= value1?1.0:value1));
			}
		}
	}
	,updateSquare: function(i,start,end,part) {
		var square = this.squares[i];
		var rate = part.current;
		var rate1 = tweenxcore_Easing.linear(rate);
		var rate2 = 0 * (1 - rate1) + 0.2 * rate1;
		var rate3 = tweenxcore_FloatTools.yoyo(rate,tweenxcore_Easing.backIn) * (1 - rate2) + tweenxcore_FloatTools.yoyo(rate,tweenxcore_Easing.sineIn) * rate2;
		var curve = 1 - rate3 + 0.1 * rate3;
		square.width = 30 / curve;
		square.height = 30 * curve;
		var rate4 = part.current;
		var rate5 = CustomEasing.quintQuintInOut(rate4);
		var rate6 = 0 * (1 - rate5) + rate5;
		var rate7 = tweenxcore_Easing.backIn(rate4) * (1 - rate6) + CustomEasing.littleBackOut(rate4) * rate6;
		square.x = start * (1 - rate7) + end * rate7 - (square.width - 30) / 2;
		square.y = (i + (1 - curve) / 2) * 30;
	}
	,__class__: CustomEasingSample
});
var CustomEasing = function() { };
CustomEasing.__name__ = ["CustomEasing"];
CustomEasing.stylishBackIn = function(rate) {
	var rate1 = CustomEasing.quintQuintInOut(rate);
	var rate2 = 0 * (1 - rate1) + rate1;
	return tweenxcore_Easing.backIn(rate) * (1 - rate2) + CustomEasing.littleBackOut(rate) * rate2;
};
CustomEasing.quintQuintInOut = function(rate) {
	var t = rate;
	var t1;
	t = rate * 2;
	if(t < 1) {
		var tmp = 0.5 * t;
		t *= t;
		t1 = tmp * t * t;
	} else {
		t -= 2;
		var tmp1 = 0.5 * t;
		t *= t;
		t1 = tmp1 * t * t + 1;
	}
	t1 *= 2;
	if(t1 < 1) {
		var tmp2 = 0.5 * t1;
		t1 *= t1;
		return tmp2 * t1 * t1;
	} else {
		t1 -= 2;
		var tmp3 = 0.5 * t1;
		t1 *= t1;
		return tmp3 * t1 * t1 + 1;
	}
};
CustomEasing.littleBackOut = function(rate) {
	return tweenxcore_Easing.expoOut(rate) * 0.85 + tweenxcore_Easing.backOut(rate) * 0.15;
};
CustomEasing.customYoyo = function(rate) {
	var rate1 = tweenxcore_Easing.linear(rate);
	var rate2 = 0 * (1 - rate1) + 0.2 * rate1;
	return tweenxcore_FloatTools.yoyo(rate,tweenxcore_Easing.backIn) * (1 - rate2) + tweenxcore_FloatTools.yoyo(rate,tweenxcore_Easing.sineIn) * rate2;
};
var EasingSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
};
EasingSample.__name__ = ["EasingSample"];
EasingSample.__super__ = sample_Sprite;
EasingSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var rate = this.frameCount / EasingSample.TOTAL_FRAME;
		if(rate <= 1) {
			var rate1 = rate * rate * rate;
			this.square.x = 0 * (1 - rate1) + 450 * rate1;
		}
		this.frameCount++;
	}
	,__class__: EasingSample
});
var sample_player_Player = function() { };
sample_player_Player.__name__ = ["sample","player","Player"];
sample_player_Player.prototype = {
	__class__: sample_player_Player
};
var EasingVisualizeSample = function(canvas) {
	this.canvas = canvas;
	this.frameCount = 0;
	var eases = [[["linear",tweenxcore_Easing.linear]],[["quadIn",tweenxcore_Easing.quadIn],["quadOut",tweenxcore_Easing.quadOut],["quadInOut",tweenxcore_Easing.quadInOut],["quadOutIn",tweenxcore_Easing.quadOutIn]],[["cubicIn",tweenxcore_Easing.cubicIn],["cubicOut",tweenxcore_Easing.cubicOut],["cubicInOut",tweenxcore_Easing.cubicInOut],["cubicOutIn",tweenxcore_Easing.cubicOutIn]],[["quartIn",tweenxcore_Easing.quartIn],["quartOut",tweenxcore_Easing.quartOut],["quartInOut",tweenxcore_Easing.quartInOut],["quartOutIn",tweenxcore_Easing.quartOutIn]],[["quintIn",tweenxcore_Easing.quintIn],["quintOut",tweenxcore_Easing.quintOut],["quintInOut",tweenxcore_Easing.quintInOut],["quintOutIn",tweenxcore_Easing.quintOutIn]],[["sineIn",tweenxcore_Easing.sineIn],["sineOut",tweenxcore_Easing.sineOut],["sineInOut",tweenxcore_Easing.sineInOut],["sineOutIn",tweenxcore_Easing.sineOutIn]],[["circIn",tweenxcore_Easing.circIn],["circOut",tweenxcore_Easing.circOut],["circInOut",tweenxcore_Easing.circInOut],["circOutIn",tweenxcore_Easing.circOutIn]],[["expoIn",tweenxcore_Easing.expoIn],["expoOut",tweenxcore_Easing.expoOut],["expoInOut",tweenxcore_Easing.expoInOut],["expoOutIn",tweenxcore_Easing.expoOutIn]],[["backIn",tweenxcore_Easing.backIn],["backOut",tweenxcore_Easing.backOut],["backInOut",tweenxcore_Easing.backInOut],["backOutIn",tweenxcore_Easing.backOutIn]],[["bounceIn",tweenxcore_Easing.bounceIn],["bounceOut",tweenxcore_Easing.bounceOut],["bounceInOut",tweenxcore_Easing.bounceInOut],["bounceOutIn",tweenxcore_Easing.bounceOutIn]],[["elasticIn",tweenxcore_Easing.elasticIn],["elasticOut",tweenxcore_Easing.elasticOut],["elasticInOut",tweenxcore_Easing.elasticInOut],["elasticOutIn",tweenxcore_Easing.elasticOutIn]],[["warpIn",tweenxcore_Easing.warpIn],["warpOut",tweenxcore_Easing.warpOut],["warpInOut",tweenxcore_Easing.warpInOut],["warpOutIn",tweenxcore_Easing.warpOutIn]]];
	var y = 20;
	var i = 0;
	var sx = 10.;
	this.charts = [];
	var _g = 0;
	while(_g < eases.length) {
		var arr = eases[_g];
		++_g;
		var x = sx;
		var _g1 = 0;
		while(_g1 < arr.length) {
			var e = arr[_g1];
			++_g1;
			this.charts.push(new _$EasingVisualizeSample_Chart(x,y,e[0],e[1],canvas.getContext("2d",null)));
			x += 90.;
		}
		if(++i % 6 == 0) {
			y = 20;
			sx = 20 * (19. * (i / 6) + 0.5);
		} else {
			y += 80;
		}
	}
	this.frameCount = 120;
	this.updatePart(new tweenxcore_structure_FloatChange(0,1));
};
EasingVisualizeSample.__name__ = ["EasingVisualizeSample"];
EasingVisualizeSample.__interfaces__ = [sample_player_Player];
EasingVisualizeSample.prototype = {
	update: function() {
		var previousValue = this.frameCount;
		var currentValue = this.frameCount += 1;
		if((0 < previousValue && currentValue < 120 || 0 < currentValue && previousValue < 120 || 120 < previousValue && currentValue < 0 || 120 < currentValue && previousValue < 0) && previousValue != currentValue) {
			var value = previousValue / 120;
			var tmp = value <= 0.0?0.0:1.0 <= value?1.0:value;
			var value1 = currentValue / 120;
			this.updatePart(new tweenxcore_structure_FloatChangePart(tmp,value1 <= 0.0?0.0:1.0 <= value1?1.0:value1));
		}
	}
	,updatePart: function(change) {
		var curvedChange = change.mapFloatChange(tweenxcore_Easing.cubicInOut);
		var length = this.charts.length;
		var _g1 = 0;
		while(_g1 < length) {
			var i = _g1++;
			var rate = i / (length - 1);
			var start = 0 * (1 - rate) + 0.7 * rate;
			var to = start + 0.3;
			if((start < curvedChange.previous && curvedChange.current < to || start < curvedChange.current && curvedChange.previous < to || to < curvedChange.previous && curvedChange.current < start || to < curvedChange.current && curvedChange.previous < start) && curvedChange.previous != curvedChange.current) {
				var value = (curvedChange.previous - start) / (to - start);
				var tmp = value <= 0.0?0.0:1.0 <= value?1.0:value;
				var value1 = (curvedChange.current - start) / (to - start);
				this.charts[i].update(new tweenxcore_structure_FloatChangePart(tmp,value1 <= 0.0?0.0:1.0 <= value1?1.0:value1));
			}
		}
	}
	,onClick: function() {
		this.canvas.getContext("2d",null).clearRect(0,0,this.canvas.width,this.canvas.height);
		this.frameCount = 0;
		var _g = 0;
		var _g1 = this.charts;
		while(_g < _g1.length) {
			var chart = _g1[_g];
			++_g;
			chart.init();
		}
	}
	,onMouseMove: function(e) {
	}
	,__class__: EasingVisualizeSample
};
var _$EasingVisualizeSample_Chart = function(x,y,title,easing,context) {
	if(title == null) {
		title = "ease";
	}
	this.prevRate = 0;
	this.repeat = 128;
	this.x = x;
	this.y = y;
	this.context = context;
	this.title = title;
	this.easing = easing;
	this.init();
};
_$EasingVisualizeSample_Chart.__name__ = ["_EasingVisualizeSample","Chart"];
_$EasingVisualizeSample_Chart.prototype = {
	init: function() {
		this.context.fillStyle = "#EEEEEE";
		var _g = 0;
		while(_g < 4) this.context.fillRect(this.x,this.y + _g++ * 20,80,1);
		var _g1 = 0;
		while(_g1 < 5) this.context.fillRect(this.x + _g1++ * 20,this.y,1,60);
		this.context.fillStyle = "#666666";
		this.context.font = "12px monospace";
		this.context.fillText(this.title,this.x,this.y - 1);
		this.prevRate = 0;
	}
	,update: function(change) {
		change.handleRepeatPart(0,1 / this.repeat,this.repeat,$bind(this,this.updatePart));
	}
	,updatePart: function(change) {
		if(change.current <= 0.0 && 0.0 < change.previous || change.previous < 1.0 && 1.0 <= change.current) {
			var index = change.repeatIndex;
			var rate = this.easing((change.current + index) / change.repeatLength);
			var _this = Style.DARKEN_THEME_COLOR;
			this.context.strokeStyle = "rgb(" + (_this.r * 255 | 0) + "," + (_this.g * 255 | 0) + "," + (_this.b * 255 | 0) + ")";
			this.context.lineWidth = 1;
			this.context.beginPath();
			this.context.moveTo(this.x + 80 * index / this.repeat,this.y + 60 * (1 - this.prevRate));
			this.context.lineTo(this.x + 80 * ((index + 1) / this.repeat),this.y + 60 * (1 - rate));
			this.context.stroke();
			this.prevRate = rate;
		}
	}
	,__class__: _$EasingVisualizeSample_Chart
};
var EntranceExitSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
};
EntranceExitSample.__name__ = ["EntranceExitSample"];
EntranceExitSample.__super__ = sample_Sprite;
EntranceExitSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var previousValue = this.frameCount;
		var currentValue = this.frameCount += 1;
		if((20.0 < previousValue && currentValue < 50.5 || 20.0 < currentValue && previousValue < 50.5 || 50.5 < previousValue && currentValue < 20.0 || 50.5 < currentValue && previousValue < 20.0) && previousValue != currentValue) {
			var value = (previousValue - 20.0) / 30.5;
			var tmp = value <= 0.0?0.0:1.0 <= value?1.0:value;
			var value1 = (currentValue - 20.0) / 30.5;
			this.updatePart(new tweenxcore_structure_FloatChangePart(tmp,value1 <= 0.0?0.0:1.0 <= value1?1.0:value1));
		}
	}
	,updatePart: function(part) {
		if(part.previous <= 0 && 0 < part.current || part.current < 1.0 && 1.0 <= part.previous) {
			var topBar = new sample_Square();
			this.addChild(topBar);
			topBar.width = 481;
		}
		var t = part.current;
		var rate = t == 0?0:Math.exp(6.931471805599453 * (t - 1));
		this.square.x = 0 * (1 - rate) + 450 * rate;
		if(part.current <= 0.0 && 0.0 < part.previous || part.previous < 1.0 && 1.0 <= part.current) {
			var bottomBar = new sample_Square();
			this.addChild(bottomBar);
			bottomBar.y = 120;
			bottomBar.width = 481;
		}
	}
	,__class__: EntranceExitSample
});
var FloatChangePartSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
	this.square.width = 0;
};
FloatChangePartSample.__name__ = ["FloatChangePartSample"];
FloatChangePartSample.__super__ = sample_Sprite;
FloatChangePartSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var previousValue = this.frameCount;
		var currentValue = this.frameCount += 1;
		if((20.0 < previousValue && currentValue < 50.5 || 20.0 < currentValue && previousValue < 50.5 || 50.5 < previousValue && currentValue < 20.0 || 50.5 < currentValue && previousValue < 20.0) && previousValue != currentValue) {
			var value = (previousValue - 20.0) / 30.5;
			var tmp = value <= 0.0?0.0:1.0 <= value?1.0:value;
			var value1 = (currentValue - 20.0) / 30.5;
			this.updatePart(new tweenxcore_structure_FloatChangePart(tmp,value1 <= 0.0?0.0:1.0 <= value1?1.0:value1));
		}
	}
	,updatePart: function(part) {
		var t = part.previous;
		var rate = t == 0?0:Math.exp(6.931471805599453 * (t - 1));
		var left = 0 * (1 - rate) + 480 * rate;
		var t1 = part.current;
		var rate1 = t1 == 0?0:Math.exp(6.931471805599453 * (t1 - 1));
		var right = 0 * (1 - rate1) + 480 * rate1;
		this.square.x = left;
		this.square.width = right - left;
	}
	,__class__: FloatChangePartSample
});
var HsvSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
};
HsvSample.__name__ = ["HsvSample"];
HsvSample.__super__ = sample_Sprite;
HsvSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var previousValue = this.frameCount;
		var currentValue = this.frameCount += 1;
		if((0 < previousValue && currentValue < 40 || 0 < currentValue && previousValue < 40 || 40 < previousValue && currentValue < 0 || 40 < currentValue && previousValue < 0) && previousValue != currentValue) {
			var value = previousValue / 40;
			var tmp = value <= 0.0?0.0:1.0 <= value?1.0:value;
			var value1 = currentValue / 40;
			this.updatePart(new tweenxcore_structure_FloatChangePart(tmp,value1 <= 0.0?0.0:1.0 <= value1?1.0:value1));
		}
	}
	,updatePart: function(part) {
		var t = part.previous;
		var rate;
		if(t == 0) {
			rate = 0;
		} else if(t == 1) {
			rate = 1;
		} else {
			t *= 2;
			if(t < 1) {
				rate = 0.5 * Math.exp(6.931471805599453 * (t - 1));
			} else {
				rate = 0.5 * (2 - Math.exp(-6.9314718055994531 * (t - 1)));
			}
		}
		var prevX = 0 * (1 - rate) + 480 * rate;
		var t1 = part.current;
		var rate1;
		if(t1 == 0) {
			rate1 = 0;
		} else if(t1 == 1) {
			rate1 = 1;
		} else {
			t1 *= 2;
			if(t1 < 1) {
				rate1 = 0.5 * Math.exp(6.931471805599453 * (t1 - 1));
			} else {
				rate1 = 0.5 * (2 - Math.exp(-6.9314718055994531 * (t1 - 1)));
			}
		}
		var currentX = 0 * (1 - rate1) + 480 * rate1;
		var t2 = part.current;
		var curve;
		if(t2 == 0) {
			curve = 0;
		} else if(t2 == 1) {
			curve = 1;
		} else {
			t2 *= 2;
			if(t2 < 1) {
				curve = 0.5 * Math.exp(6.931471805599453 * (t2 - 1));
			} else {
				curve = 0.5 * (2 - Math.exp(-6.9314718055994531 * (t2 - 1)));
			}
		}
		var color = new tweenxcore_color_HsvColor(0.0 * (1 - curve) + curve,0.0 * (1 - curve) + 0.8 * curve,0.95);
		var square = new sample_Square();
		square.color = color;
		square.x = prevX;
		square.y = 60;
		square.width = currentX - prevX;
		this.addChild(square);
	}
	,__class__: HsvSample
});
var ImageSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.image = new _$ImageSample_FaceImage());
	this.timeline = new tweenxcore_structure_Timeline();
	var _this = this.timeline;
	if(_this.dataArray.length == 0) {
		_this.totalWeight = 0.5;
	} else {
		_this.weightArray.push(_this.totalWeight);
		_this.totalWeight += 0.5;
	}
	_this.dataArray.push(0);
	var _g = 1;
	while(_g < 16) {
		var i = _g++;
		var _this1 = this.timeline;
		if(_this1.dataArray.length == 0) {
			_this1.totalWeight = 1.0;
		} else {
			_this1.weightArray.push(_this1.totalWeight);
			_this1.totalWeight += 1.0;
		}
		_this1.dataArray.push(i);
	}
	var _this2 = this.timeline;
	if(_this2.dataArray.length == 0) {
		_this2.totalWeight = 0.5;
	} else {
		_this2.weightArray.push(_this2.totalWeight);
		_this2.totalWeight += 0.5;
	}
	_this2.dataArray.push(0);
};
ImageSample.__name__ = ["ImageSample"];
ImageSample.__super__ = sample_Sprite;
ImageSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		new tweenxcore_structure_FloatChange(this.frameCount,this.frameCount += 1).handleRepeatPart(0,100,10,$bind(this,this.updatePart));
	}
	,updatePart: function(part) {
		var rate = part.current;
		var curve = tweenxcore_Easing.linear(rate) * 0.5 + tweenxcore_FloatTools.connectEasing(rate,tweenxcore_Easing.quadInOut,tweenxcore_Easing.quadInOut) * 0.5;
		var _this = this.timeline;
		if(_this.dataArray.length == 0) {
			throw new js__$Boot_HaxeError("timeline is not initialized");
		}
		var sortedValues = _this.weightArray;
		var value = curve * _this.totalWeight;
		var min = 0;
		var max = sortedValues.length;
		while(true) {
			var next = ((max - min) / 2 | 0) + min;
			if(sortedValues[next] < value) {
				min = next + 1;
			} else {
				max = next;
			}
			if(min == max) {
				break;
			}
		}
		var searchResult = min;
		this.image.index = new tweenxcore_structure_TimelineSearchResult(_this.dataArray[searchResult],searchResult,searchResult == 0?0:_this.weightArray[searchResult - 1] / _this.totalWeight,searchResult == _this.dataArray.length - 1?1:_this.weightArray[searchResult] / _this.totalWeight).data;
	}
	,__class__: ImageSample
});
var _$ImageSample_FaceImage = function() {
	this.index = 0;
	this.image = new Image();
	this.image.src = "/images/character.png";
};
_$ImageSample_FaceImage.__name__ = ["_ImageSample","FaceImage"];
_$ImageSample_FaceImage.__interfaces__ = [sample_context_Drawable];
_$ImageSample_FaceImage.prototype = {
	draw: function(context) {
		context.context.drawImage(this.image,_$ImageSample_FaceImage.WIDTH * this.index,0,_$ImageSample_FaceImage.WIDTH,_$ImageSample_FaceImage.HEIGHT,0,0,_$ImageSample_FaceImage.WIDTH,_$ImageSample_FaceImage.HEIGHT);
	}
	,__class__: _$ImageSample_FaceImage
};
var Main = function() { };
Main.__name__ = ["Main"];
Main.main = function() {
	Main.players = [];
	Main.attach(CustomEasingSample,481,151,PlayMode.ClickToPlay);
	Main.attach(SimplestSample,481,151,PlayMode.ClickToPlay);
	Main.attach(EasingSample,481,151,PlayMode.ClickToPlay);
	Main.attach(YoyoSample,481,151,PlayMode.ClickToPlay);
	Main.attach(ZigzagSample,481,151,PlayMode.ClickToPlay);
	Main.attach(CompositeSample,481,151,PlayMode.ClickToPlay);
	Main.attach(MixSample,481,151,PlayMode.ClickToPlay);
	Main.attach(CrossfadeSample,481,151,PlayMode.ClickToPlay);
	Main.attach(ConnectSample,481,151,PlayMode.ClickToPlay);
	Main.attach(OneTwoSample,481,151,PlayMode.ClickToPlay);
	Main.attach(CrossOverSample,481,151,PlayMode.ClickToPlay);
	Main.attach(FloatChangePartSample,481,151,PlayMode.ClickToPlay);
	Main.attach(EntranceExitSample,481,151,PlayMode.ClickToPlay);
	Main.attach(RepeatSample,481,151,PlayMode.ClickToPlay);
	Main.attach(TimelinePartSample,481,151,PlayMode.ClickToPlay);
	Main.attach(XySample,481,151,PlayMode.ClickToPlay);
	Main.attach(MatrixSample,481,151,PlayMode.ClickToPlay);
	Main.attach(PolarSample,481,151,PlayMode.ClickToPlay);
	Main.attach(BezierSample,481,151,PlayMode.ClickToPlay);
	Main.attach(HsvSample,481,151,PlayMode.ClickToPlay);
	Main.attach(ImageSample,96,96,PlayMode.ClickToPlay);
	Main.attach(MouseSample,481,151,PlayMode.ClickToPlay);
	Main.attach(EasingVisualizeSample,800,500,PlayMode.Direct);
	window.setInterval(Main.onFrame,16);
};
Main.onFrame = function() {
	var _g = 0;
	var _g1 = Main.players;
	while(_g < _g1.length) {
		var player = _g1[_g];
		++_g;
		player.update();
	}
};
Main.attach = function(clazz,width,height,playMode) {
	var name = Type.getClassName(clazz);
	var element = window.document.getElementById(name);
	if(element != null && js_Boot.__instanceof(element,HTMLCanvasElement)) {
		var canvas = js_Boot.__cast(element , HTMLCanvasElement);
		canvas.width = width;
		canvas.height = height;
		switch(playMode[1]) {
		case 0:
			var totalFrame = clazz.TOTAL_FRAME;
			Main.addPlayer(canvas,new sample_player_ClickToPlaySamplePlayer(canvas,clazz,totalFrame));
			break;
		case 1:
			Main.addPlayer(canvas,Type.createInstance(clazz,[canvas]));
			break;
		}
	}
};
Main.addPlayer = function(canvas,player) {
	Main.players.push(player);
	canvas.addEventListener("click",$bind(player,player.onClick));
	window.addEventListener("mousemove",$bind(player,player.onMouseMove));
};
var PlayMode = { __ename__ : true, __constructs__ : ["ClickToPlay","Direct"] };
PlayMode.ClickToPlay = ["ClickToPlay",0];
PlayMode.ClickToPlay.__enum__ = PlayMode;
PlayMode.Direct = ["Direct",1];
PlayMode.Direct.__enum__ = PlayMode;
Math.__name__ = ["Math"];
var _$MatrixSample_MatrixImpl = function() {
	this.ty = 0;
	this.tx = 0;
	this.d = 1;
	this.c = 0;
	this.b = 0;
	this.a = 1;
};
_$MatrixSample_MatrixImpl.__name__ = ["_MatrixSample","MatrixImpl"];
_$MatrixSample_MatrixImpl.prototype = {
	__class__: _$MatrixSample_MatrixImpl
};
var MatrixSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
	this.matrix = new _$MatrixSample_MatrixImpl();
	var outputMatrix = this.matrix;
	var dx = 250;
	var dy = 120;
	var rot = Math.atan2(dy,dx);
	var d = Math.sqrt(dx * dx + dy * dy);
	outputMatrix.a = d * Math.cos(rot);
	outputMatrix.b = d * Math.sin(rot);
	outputMatrix.c = -d * Math.sin(rot);
	outputMatrix.d = d * Math.cos(rot);
	outputMatrix.tx = 100;
	outputMatrix.ty = 0;
};
MatrixSample.__name__ = ["MatrixSample"];
MatrixSample.__super__ = sample_Sprite;
MatrixSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var previousValue = this.frameCount;
		var currentValue = this.frameCount += 1;
		if((0.0 < previousValue && currentValue < 40.0 || 0.0 < currentValue && previousValue < 40.0 || 40.0 < previousValue && currentValue < 0.0 || 40.0 < currentValue && previousValue < 0.0) && previousValue != currentValue) {
			var value = previousValue / 40.0;
			var tmp = value <= 0.0?0.0:1.0 <= value?1.0:value;
			var value1 = currentValue / 40.0;
			this.updatePart(new tweenxcore_structure_FloatChangePart(tmp,value1 <= 0.0?0.0:1.0 <= value1?1.0:value1));
		}
	}
	,updatePart: function(part) {
		var x = part.current;
		var rate = Math.sin(part.current * 2 * Math.PI);
		var y = 0 * (1 - rate) + 0.1 * rate;
		this.square.x = this.matrix.a * x + this.matrix.c * y + this.matrix.tx;
		this.square.y = this.matrix.b * x + this.matrix.d * y + this.matrix.ty;
	}
	,__class__: MatrixSample
});
var MixSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
};
MixSample.__name__ = ["MixSample"];
MixSample.__super__ = sample_Sprite;
MixSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var rate = this.frameCount / MixSample.TOTAL_FRAME;
		if(rate <= 1) {
			var rate1 = tweenxcore_Easing.expoOutIn(rate) * 0.82000000000000006 + tweenxcore_Easing.linear(rate) * 0.18;
			this.square.x = 0 * (1 - rate1) + 450 * rate1;
		}
		this.frameCount++;
	}
	,__class__: MixSample
});
var MouseSample = function() {
	sample_Sprite.call(this);
	this.square = new sample_Square();
	this.addChild(this.square);
};
MouseSample.__name__ = ["MouseSample"];
MouseSample.__super__ = sample_Sprite;
MouseSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
	}
	,onMouseMove: function(e) {
		var mouseX = e.clientX;
		var mouseY = e.clientY;
		var value = (mouseX - 10) / 790;
		var rateX = value <= 0?0:1 <= value?1:value;
		var p = mouseY / 400;
		var rateY = p - Math.floor(p);
		var t = rateX;
		var rate;
		if(t == 0) {
			rate = 0;
		} else if(t == 1) {
			rate = 1;
		} else {
			t *= 2;
			if(t < 1) {
				rate = 0.5 * Math.exp(6.931471805599453 * (t - 1));
			} else {
				rate = 0.5 * (2 - Math.exp(-6.9314718055994531 * (t - 1)));
			}
		}
		this.square.x = 0 * (1 - rate) + 450 * rate;
		var rate1 = tweenxcore_Easing.expoInOut((rateY < 0.5?rateY:1 - rateY) * 2);
		this.square.y = 0 * (1 - rate1) + 120 * rate1;
	}
	,__class__: MouseSample
});
var OneTwoSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
};
OneTwoSample.__name__ = ["OneTwoSample"];
OneTwoSample.__super__ = sample_Sprite;
OneTwoSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var rate = this.frameCount / OneTwoSample.TOTAL_FRAME;
		if(rate <= 1) {
			var rate1 = rate < 0.7?tweenxcore_Easing.backIn(rate / 0.7):tweenxcore_Easing.linear((rate - 0.7) / 0.30000000000000004);
			this.square.x = 30 * (1 - rate1) + 420 * rate1;
		}
		this.frameCount++;
	}
	,__class__: OneTwoSample
});
var _$PolarSample_MatrixImpl = function() {
	this.ty = 0;
	this.tx = 0;
	this.d = 1;
	this.c = 0;
	this.b = 0;
	this.a = 1;
};
_$PolarSample_MatrixImpl.__name__ = ["_PolarSample","MatrixImpl"];
_$PolarSample_MatrixImpl.prototype = {
	__class__: _$PolarSample_MatrixImpl
};
var PolarSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
	this.matrix = new _$PolarSample_MatrixImpl();
	var outputMatrix = this.matrix;
	var dx = -210;
	var dy = -60;
	var rot = Math.atan2(dy,dx);
	var d = Math.sqrt(dx * dx + dy * dy);
	outputMatrix.a = d * Math.cos(rot);
	outputMatrix.b = d * Math.sin(rot);
	outputMatrix.c = -d * Math.sin(rot);
	outputMatrix.d = d * Math.cos(rot);
	outputMatrix.tx = 210;
	outputMatrix.ty = 60;
};
PolarSample.__name__ = ["PolarSample"];
PolarSample.__super__ = sample_Sprite;
PolarSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var previousValue = this.frameCount;
		var currentValue = this.frameCount += 1;
		if((0.0 < previousValue && currentValue < 40.0 || 0.0 < currentValue && previousValue < 40.0 || 40.0 < previousValue && currentValue < 0.0 || 40.0 < currentValue && previousValue < 0.0) && previousValue != currentValue) {
			var value = previousValue / 40.0;
			var tmp = value <= 0.0?0.0:1.0 <= value?1.0:value;
			var value1 = currentValue / 40.0;
			this.updatePart(new tweenxcore_structure_FloatChangePart(tmp,value1 <= 0.0?0.0:1.0 <= value1?1.0:value1));
		}
	}
	,updatePart: function(part) {
		var t = part.current;
		var rate = t == 1?1:1 - Math.exp(-6.9314718055994531 * t);
		var distance = 1 - rate + 0 * rate;
		var rate1 = part.current;
		var polarPoint = new tweenxcore_geom_PolarPoint(distance,0 * (1 - rate1) + -2 * rate1);
		var x = polarPoint.get_x();
		var y = polarPoint.get_y();
		this.square.x = this.matrix.a * x + this.matrix.c * y + this.matrix.tx;
		this.square.y = this.matrix.b * x + this.matrix.d * y + this.matrix.ty;
	}
	,__class__: PolarSample
});
var RepeatSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
};
RepeatSample.__name__ = ["RepeatSample"];
RepeatSample.__super__ = sample_Sprite;
RepeatSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		new tweenxcore_structure_FloatChange(this.frameCount,this.frameCount += 1).handleRepeatPart(20,60,3,$bind(this,this.updatePart));
	}
	,updatePart: function(part) {
		var t = part.current;
		var rate = t == 0?0:Math.exp(6.931471805599453 * (t - 1));
		this.square.x = 0 * (1 - rate) + 450 * rate;
	}
	,__class__: RepeatSample
});
var SimplestSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
};
SimplestSample.__name__ = ["SimplestSample"];
SimplestSample.__super__ = sample_Sprite;
SimplestSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var rate = this.frameCount / SimplestSample.TOTAL_FRAME;
		if(rate <= 1) {
			var t = rate;
			t = rate - 1;
			var tmp = t;
			t *= t;
			var rate1 = tmp * t * t + 1;
			this.square.x = 0 * (1 - rate1) + 450 * rate1;
		}
		this.frameCount++;
	}
	,__class__: SimplestSample
});
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var tweenxcore_color_IColor = function() { };
tweenxcore_color_IColor.__name__ = ["tweenxcore","color","IColor"];
tweenxcore_color_IColor.prototype = {
	__class__: tweenxcore_color_IColor
};
var tweenxcore_color_RgbColor = function(red,green,blue) {
	this.r = red;
	this.g = green;
	this.b = blue;
};
tweenxcore_color_RgbColor.__name__ = ["tweenxcore","color","RgbColor"];
tweenxcore_color_RgbColor.__interfaces__ = [tweenxcore_color_IColor];
tweenxcore_color_RgbColor.rgbToInt = function(r,g,b) {
	if(r <= 0.0) {
		r = 0.0;
	} else if(1.0 <= r) {
		r = 1.0;
	} else {
		r = r;
	}
	if(g <= 0.0) {
		g = 0.0;
	} else if(1.0 <= g) {
		g = 1.0;
	} else {
		g = g;
	}
	if(b <= 0.0) {
		b = 0.0;
	} else if(1.0 <= b) {
		b = 1.0;
	} else {
		b = b;
	}
	return (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0);
};
tweenxcore_color_RgbColor.of = function(color) {
	return new tweenxcore_color_RgbColor((color >> 16 & 255) / 255,(color >> 8 & 255) / 255,(color & 255) / 255);
};
tweenxcore_color_RgbColor.fromHsv = function(h,s,v) {
	h = (h - Math.floor(h)) * 6;
	var hi = Math.floor(h);
	if(s <= 0.0) {
		s = 0.0;
	} else if(1.0 <= s) {
		s = 1.0;
	} else {
		s = s;
	}
	if(v <= 0.0) {
		v = 0.0;
	} else if(1.0 <= v) {
		v = 1.0;
	} else {
		v = v;
	}
	var m = v * (1 - s);
	var f = h - hi;
	var r = 0.0;
	var g = 0.0;
	var b = 0.0;
	switch(hi) {
	case 0:
		r = v;
		g = v * (1 - s * (1 - f));
		b = m;
		break;
	case 1:
		r = v * (1 - s * f);
		g = v;
		b = m;
		break;
	case 2:
		r = m;
		g = v;
		b = v * (1 - s * (1 - f));
		break;
	case 3:
		r = m;
		g = v * (1 - s * f);
		b = v;
		break;
	case 4:
		r = v * (1 - s * (1 - f));
		g = m;
		b = v;
		break;
	case 5:
		r = v;
		g = m;
		b = v * (1 - s * f);
		break;
	}
	return new tweenxcore_color_RgbColor(r,g,b);
};
tweenxcore_color_RgbColor.prototype = {
	getRed: function() {
		return this.r;
	}
	,getGreen: function() {
		return this.g;
	}
	,getBlue: function() {
		return this.b;
	}
	,getHue: function() {
		return tweenxcore_color_HsvColor.fromRgb(this.r,this.g,this.b).h;
	}
	,getSaturation: function() {
		return tweenxcore_color_HsvColor.fromRgb(this.r,this.g,this.b).s;
	}
	,getBrightness: function() {
		return tweenxcore_color_HsvColor.fromRgb(this.r,this.g,this.b).v;
	}
	,toRgb: function() {
		return new tweenxcore_color_RgbColor(this.r,this.g,this.b);
	}
	,toHsv: function() {
		return tweenxcore_color_HsvColor.fromRgb(this.r,this.g,this.b);
	}
	,toRgbWithAlpha: function(alpha) {
		return new tweenxcore_color_ArgbColor(alpha,this.r,this.g,this.b);
	}
	,toHsvWithAlpha: function(alpha) {
		var _this = tweenxcore_color_HsvColor.fromRgb(this.r,this.g,this.b,0);
		return new tweenxcore_color_AhsvColor(alpha,_this.h,_this.s,_this.v);
	}
	,toRgbInt: function() {
		var r = this.r;
		var g = this.g;
		var b = this.b;
		if(r <= 0.0) {
			r = 0.0;
		} else if(1.0 <= r) {
			r = 1.0;
		} else {
			r = r;
		}
		if(g <= 0.0) {
			g = 0.0;
		} else if(1.0 <= g) {
			g = 1.0;
		} else {
			g = g;
		}
		if(b <= 0.0) {
			b = 0.0;
		} else if(1.0 <= b) {
			b = 1.0;
		} else {
			b = b;
		}
		return (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0);
	}
	,toRgbHexString: function() {
		var r = this.r;
		var g = this.g;
		var b = this.b;
		if(r <= 0.0) {
			r = 0.0;
		} else if(1.0 <= r) {
			r = 1.0;
		} else {
			r = r;
		}
		if(g <= 0.0) {
			g = 0.0;
		} else if(1.0 <= g) {
			g = 1.0;
		} else {
			g = g;
		}
		if(b <= 0.0) {
			b = 0.0;
		} else if(1.0 <= b) {
			b = 1.0;
		} else {
			b = b;
		}
		return StringTools.hex((r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0),6);
	}
	,toRgbCssString: function() {
		return "rgb(" + (this.r * 255 | 0) + "," + (this.g * 255 | 0) + "," + (this.b * 255 | 0) + ")";
	}
	,__class__: tweenxcore_color_RgbColor
};
var Style = function() { };
Style.__name__ = ["Style"];
Style.startEasing = function(rate) {
	if(rate < 0.62) {
		var rate1 = Style.fastOut(rate / 0.62);
		return 0 * (1 - rate1) + -0.30 * rate1;
	} else {
		var rate2 = tweenxcore_Easing.quintIn((rate - 0.62) / 0.38);
		return -0.30 * (1 - rate2) + rate2;
	}
};
Style.finishEasing = function(rate) {
	return tweenxcore_Easing.linear(rate) * 0.19999999999999996 + Style.fastOut(rate) * 0.8;
};
Style.fastOut = function(rate) {
	var t = rate;
	t = rate - 1;
	var t1 = t * t * t + 1;
	return --t1 * t1 * t1 + 1;
};
var TimelinePartSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	var _this = new tweenxcore_structure_Timeline();
	if(_this.dataArray.length == 0) {
		_this.totalWeight = 1;
	} else {
		_this.weightArray.push(_this.totalWeight);
		_this.totalWeight += 1;
	}
	_this.dataArray.push($bind(this,this.update1));
	if(_this.dataArray.length == 0) {
		_this.totalWeight = 2;
	} else {
		_this.weightArray.push(_this.totalWeight);
		_this.totalWeight += 2;
	}
	_this.dataArray.push($bind(this,this.update2));
	if(_this.dataArray.length == 0) {
		_this.totalWeight = 5;
	} else {
		_this.weightArray.push(_this.totalWeight);
		_this.totalWeight += 5;
	}
	_this.dataArray.push($bind(this,this.update3));
	this.timeline = _this;
};
TimelinePartSample.__name__ = ["TimelinePartSample"];
TimelinePartSample.__super__ = sample_Sprite;
TimelinePartSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var updatePartTimeline = this.timeline;
		var p = this.frameCount / 80;
		var c = (this.frameCount += 1) / 80;
		if(0 < p && c < 1 || 0 < c && p < 1) {
			if(p <= 0) {
				p = 0;
			} else if(1 <= p) {
				p = 1;
			} else {
				p = p;
			}
			if(c <= 0) {
				c = 0;
			} else if(1 <= c) {
				c = 1;
			} else {
				c = c;
			}
			if(updatePartTimeline.dataArray.length == 0) {
				throw new js__$Boot_HaxeError("timeline is not initialized");
			}
			var sortedValues = updatePartTimeline.weightArray;
			var value = p * updatePartTimeline.totalWeight;
			var min = 0;
			var max = sortedValues.length;
			while(true) {
				var next = ((max - min) / 2 | 0) + min;
				if(sortedValues[next] < value) {
					min = next + 1;
				} else {
					max = next;
				}
				if(min == max) {
					break;
				}
			}
			var searchResult = min;
			var baseWeight = searchResult == 0?0:updatePartTimeline.weightArray[searchResult - 1] / updatePartTimeline.totalWeight;
			var nextWeight = searchResult == updatePartTimeline.dataArray.length - 1?1:updatePartTimeline.weightArray[searchResult] / updatePartTimeline.totalWeight;
			var pResult_rangeLeft = baseWeight;
			var pResult_rangeRight = nextWeight;
			if(updatePartTimeline.dataArray.length == 0) {
				throw new js__$Boot_HaxeError("timeline is not initialized");
			}
			var sortedValues1 = updatePartTimeline.weightArray;
			var value1 = c * updatePartTimeline.totalWeight;
			var min1 = 0;
			var max1 = sortedValues1.length;
			while(true) {
				var next1 = ((max1 - min1) / 2 | 0) + min1;
				if(sortedValues1[next1] < value1) {
					min1 = next1 + 1;
				} else {
					max1 = next1;
				}
				if(min1 == max1) {
					break;
				}
			}
			var searchResult1 = min1;
			var baseWeight1 = searchResult1 == 0?0:updatePartTimeline.weightArray[searchResult1 - 1] / updatePartTimeline.totalWeight;
			var nextWeight1 = searchResult1 == updatePartTimeline.dataArray.length - 1?1:updatePartTimeline.weightArray[searchResult1] / updatePartTimeline.totalWeight;
			var cResult_rangeLeft = baseWeight1;
			var cResult_rangeRight = nextWeight1;
			var pCount = searchResult;
			var pRate = (p - pResult_rangeLeft) / (pResult_rangeRight - pResult_rangeLeft);
			var cRate = (c - cResult_rangeLeft) / (cResult_rangeRight - cResult_rangeLeft);
			var hasNext = false;
			if(p < c) {
				while(true) {
					if(pCount == searchResult1) {
						hasNext = false;
						var part = new tweenxcore_structure_FloatChangeTimelinePart(pRate,cRate,pCount,pCount == 0?0.0:updatePartTimeline.weightArray[pCount - 1] / updatePartTimeline.totalWeight,pCount == updatePartTimeline.dataArray.length?1.0:updatePartTimeline.weightArray[pCount] / updatePartTimeline.totalWeight,false);
						if(updatePartTimeline.dataArray.length == 0) {
							throw new js__$Boot_HaxeError("timeline is not initialized");
						}
						updatePartTimeline.dataArray[pCount](part);
					} else {
						if(pCount + 1 == searchResult1) {
							hasNext = cRate != 0;
						} else {
							hasNext = true;
						}
						var part1 = new tweenxcore_structure_FloatChangeTimelinePart(pRate,1,pCount,pCount == 0?0.0:updatePartTimeline.weightArray[pCount - 1] / updatePartTimeline.totalWeight,pCount == updatePartTimeline.dataArray.length?1.0:updatePartTimeline.weightArray[pCount] / updatePartTimeline.totalWeight,hasNext);
						if(updatePartTimeline.dataArray.length == 0) {
							throw new js__$Boot_HaxeError("timeline is not initialized");
						}
						updatePartTimeline.dataArray[pCount](part1);
					}
					pRate = 0;
					++pCount;
					if(!hasNext) {
						break;
					}
				}
			} else {
				while(true) {
					if(pCount == searchResult1) {
						hasNext = false;
						var part2 = new tweenxcore_structure_FloatChangeTimelinePart(pRate,cRate,pCount,pCount == 0?0.0:updatePartTimeline.weightArray[pCount - 1] / updatePartTimeline.totalWeight,pCount == updatePartTimeline.dataArray.length?1.0:updatePartTimeline.weightArray[pCount] / updatePartTimeline.totalWeight,false);
						if(updatePartTimeline.dataArray.length == 0) {
							throw new js__$Boot_HaxeError("timeline is not initialized");
						}
						updatePartTimeline.dataArray[pCount](part2);
					} else {
						if(pCount - 1 == searchResult1) {
							hasNext = cRate != 1;
						} else {
							hasNext = true;
						}
						var part3 = new tweenxcore_structure_FloatChangeTimelinePart(pRate,0,pCount,pCount == 0?0.0:updatePartTimeline.weightArray[pCount - 1] / updatePartTimeline.totalWeight,pCount == updatePartTimeline.dataArray.length?1.0:updatePartTimeline.weightArray[pCount] / updatePartTimeline.totalWeight,hasNext);
						if(updatePartTimeline.dataArray.length == 0) {
							throw new js__$Boot_HaxeError("timeline is not initialized");
						}
						updatePartTimeline.dataArray[pCount](part3);
					}
					pRate = 1;
					--pCount;
					if(!hasNext) {
						break;
					}
				}
			}
		}
	}
	,update1: function(part) {
		var rate = part.current;
		this.square.x = 0 * (1 - rate) + 450 * rate;
	}
	,update2: function(part) {
		var t = part.current;
		var rate;
		t *= 2;
		if(t < 1) {
			rate = 0.5 * t * t * t;
		} else {
			t -= 2;
			rate = 0.5 * (t * t * t + 2);
		}
		this.square.y = 0 * (1 - rate) + 120 * rate;
	}
	,update3: function(part) {
		var t = part.current;
		t *= t;
		var t1 = t * t;
		var rate = t1 * t1 * t1;
		this.square.x = 450 * (1 - rate) + 0 * rate;
	}
	,__class__: TimelinePartSample
});
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
var XySample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
};
XySample.__name__ = ["XySample"];
XySample.__super__ = sample_Sprite;
XySample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var previousValue = this.frameCount;
		var currentValue = this.frameCount += 1;
		if((0.0 < previousValue && currentValue < 40.0 || 0.0 < currentValue && previousValue < 40.0 || 40.0 < previousValue && currentValue < 0.0 || 40.0 < currentValue && previousValue < 0.0) && previousValue != currentValue) {
			var value = previousValue / 40.0;
			var tmp = value <= 0.0?0.0:1.0 <= value?1.0:value;
			var value1 = currentValue / 40.0;
			this.updatePart(new tweenxcore_structure_FloatChangePart(tmp,value1 <= 0.0?0.0:1.0 <= value1?1.0:value1));
		}
	}
	,updatePart: function(part) {
		var rate = part.current;
		this.square.x = 0 * (1 - rate) + 450 * rate;
		var rate1 = Math.sin(part.current * 2 * Math.PI);
		this.square.y = 60 * (1 - rate1) + 105 * rate1;
	}
	,__class__: XySample
});
var YoyoSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
};
YoyoSample.__name__ = ["YoyoSample"];
YoyoSample.__super__ = sample_Sprite;
YoyoSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var rate = this.frameCount / YoyoSample.TOTAL_FRAME;
		if(rate <= 1) {
			var rate1 = tweenxcore_Easing.quintOut((rate < 0.5?rate:1 - rate) * 2);
			this.square.x = 0 * (1 - rate1) + 450 * rate1;
		}
		this.frameCount++;
	}
	,__class__: YoyoSample
});
var ZigzagSample = function() {
	this.frameCount = 0;
	sample_Sprite.call(this);
	this.addChild(this.square = new sample_Square());
	this.square.y = 60;
};
ZigzagSample.__name__ = ["ZigzagSample"];
ZigzagSample.__super__ = sample_Sprite;
ZigzagSample.prototype = $extend(sample_Sprite.prototype,{
	update: function() {
		var rate = this.frameCount / ZigzagSample.TOTAL_FRAME;
		if(rate <= 1) {
			var easing = tweenxcore_Easing.quintOut;
			var rate1 = rate < 0.5?easing(rate * 2):1 - easing((rate - 0.5) * 2);
			this.square.x = 0 * (1 - rate1) + 450 * rate1;
		}
		this.frameCount++;
	}
	,__class__: ZigzagSample
});
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var sample_Square = function() {
	this.height = 30;
	this.width = 30;
	this.y = 0;
	this.x = 0;
	this.color = Style.THEME_COLOR;
};
sample_Square.__name__ = ["sample","Square"];
sample_Square.__interfaces__ = [sample_context_Drawable];
sample_Square.prototype = {
	draw: function(context) {
		context.context.fillStyle = this.color.toRgbCssString();
		context.context.fillRect(this.x,this.y,this.width,this.height);
	}
	,__class__: sample_Square
};
var sample_context_DrawContext = function(canvas,context) {
	this.context = context;
	this.canvas = canvas;
};
sample_context_DrawContext.__name__ = ["sample","context","DrawContext"];
sample_context_DrawContext.prototype = {
	__class__: sample_context_DrawContext
};
var sample_player_ClickToPlaySamplePlayer = function(canvas,clazz,totalFrame) {
	this.totalFrame = totalFrame + Style.DELAY_FRAME;
	this.clazz = clazz;
	this.canvas = canvas;
	this.context = canvas.getContext("2d",null);
	this.enterStay();
};
sample_player_ClickToPlaySamplePlayer.__name__ = ["sample","player","ClickToPlaySamplePlayer"];
sample_player_ClickToPlaySamplePlayer.__interfaces__ = [sample_player_Player];
sample_player_ClickToPlaySamplePlayer.prototype = {
	onClick: function() {
		switch(this.state[1]) {
		case 1:case 2:
			this.enterPlaying();
			break;
		case 0:case 3:
			this.enterStarting();
			break;
		}
	}
	,update: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			break;
		case 1:
			var frame = _g[2];
			if(frame < Style.START_FRAME) {
				this.drawStay(1 - Style.startEasing(frame / Style.START_FRAME));
				this.state = sample_player__$ClickToPlaySamplePlayer_PlayerState.Starting(frame + 1);
			} else {
				this.enterPlaying();
			}
			break;
		case 2:
			var child = _g[3];
			var frame1 = _g[2];
			if(frame1 < this.totalFrame) {
				child.update();
				this.clear();
				this.drawGrid();
				child.draw(new sample_context_DrawContext(this.canvas,this.context));
				this.state = sample_player__$ClickToPlaySamplePlayer_PlayerState.Playing(frame1 + 1,child);
			} else {
				this.enterFinishing();
			}
			break;
		case 3:
			var frame2 = _g[2];
			if(frame2 < Style.FINISH_FRAME) {
				this.drawStay(Style.finishEasing(frame2 / Style.FINISH_FRAME));
				this.state = sample_player__$ClickToPlaySamplePlayer_PlayerState.Finishing(frame2 + 1);
			} else {
				this.enterStay();
			}
			break;
		}
	}
	,enterFinishing: function() {
		this.changeState(sample_player__$ClickToPlaySamplePlayer_PlayerState.Finishing(0));
	}
	,enterStarting: function() {
		this.changeState(sample_player__$ClickToPlaySamplePlayer_PlayerState.Starting(0));
	}
	,enterStay: function() {
		this.changeState(sample_player__$ClickToPlaySamplePlayer_PlayerState.Stay);
		this.drawStay(1.0);
	}
	,enterPlaying: function() {
		this.changeState(sample_player__$ClickToPlaySamplePlayer_PlayerState.Playing(0,Type.createInstance(this.clazz,[])));
	}
	,drawStay: function(rate) {
		this.clear();
		this.drawGrid();
		this.drawButton(rate);
	}
	,changeState: function(newState) {
		this.state = newState;
	}
	,clear: function() {
		this.context.clearRect(0,0,this.canvas.width,this.canvas.height);
	}
	,drawGrid: function() {
		var _this = Style.GRID_COLOR;
		this.context.fillStyle = "rgb(" + (_this.r * 255 | 0) + "," + (_this.g * 255 | 0) + "," + (_this.b * 255 | 0) + ")";
		var _g1 = 0;
		var _g = Math.ceil(this.canvas.width / Style.GRID_SCALE);
		while(_g1 < _g) this.context.fillRect(_g1++ * Style.GRID_SCALE,0,1,this.canvas.height);
		var _g11 = 0;
		var _g2 = Math.ceil(this.canvas.height / Style.GRID_SCALE);
		while(_g11 < _g2) this.context.fillRect(0,_g11++ * Style.GRID_SCALE,this.canvas.width,1);
	}
	,drawButton: function(rate) {
		var _this = Style.THEME_COLOR;
		this.context.fillStyle = "rgb(" + (_this.r * 255 | 0) + "," + (_this.g * 255 | 0) + "," + (_this.b * 255 | 0) + ")";
		var size = Style.BUTTON_SIZE * (0.2 * (1 - rate) + rate);
		var centerX = this.canvas.width / 2;
		var centerY = this.canvas.height / 2;
		this.context.beginPath();
		this.context.arc(centerX,centerY,size,0,Math.PI * 2);
		this.context.fill();
		var side = size * 0.63;
		this.context.fillStyle = "#FFFFFF";
		this.context.beginPath();
		this.context.moveTo(centerX + side,centerY);
		this.context.lineTo(centerX - side / 2,centerY + 0.866 * side);
		this.context.lineTo(centerX - side / 2,centerY - 0.866 * side);
		this.context.fill();
		var _this1 = Style.THEME_COLOR;
		var _this2 = tweenxcore_color_HsvColor.fromRgb(_this1.r,_this1.g,_this1.b,0);
		var color = new tweenxcore_color_AhsvColor(0.4,_this2.h,_this2.s,_this2.v);
		var t = color.s;
		color.s = t == 0?0:t == 1?1:Math.sin(t * 1.5707963267948966);
		var rate1 = color.v;
		color.v = 0.1 * (1 - rate1) + 0.3 * rate1;
		var a = color.a;
		var _this3 = tweenxcore_color_RgbColor.fromHsv(color.h,color.s,color.v);
		var _this4 = new tweenxcore_color_ArgbColor(a,_this3.r,_this3.g,_this3.b);
		this.context.fillStyle = "rgba(" + (_this4.r * 255 | 0) + "," + (_this4.g * 255 | 0) + "," + (_this4.b * 255 | 0) + "," + _this4.a + ")";
		var height = this.canvas.height;
		var size1 = size * 1.1;
		this.context.beginPath();
		this.context.moveTo(centerX,height - 2);
		this.context.lineTo(centerX - size1,height);
		this.context.lineTo(centerX + size1,height);
		this.context.fill();
	}
	,onMouseMove: function(e) {
		var _g = this.state;
		switch(_g[1]) {
		case 0:case 1:case 3:
			break;
		case 2:
			_g[3].onMouseMove(e);
			break;
		}
	}
	,__class__: sample_player_ClickToPlaySamplePlayer
};
var sample_player__$ClickToPlaySamplePlayer_PlayerState = { __ename__ : true, __constructs__ : ["Stay","Starting","Playing","Finishing"] };
sample_player__$ClickToPlaySamplePlayer_PlayerState.Stay = ["Stay",0];
sample_player__$ClickToPlaySamplePlayer_PlayerState.Stay.__enum__ = sample_player__$ClickToPlaySamplePlayer_PlayerState;
sample_player__$ClickToPlaySamplePlayer_PlayerState.Starting = function(frame) { var $x = ["Starting",1,frame]; $x.__enum__ = sample_player__$ClickToPlaySamplePlayer_PlayerState; return $x; };
sample_player__$ClickToPlaySamplePlayer_PlayerState.Playing = function(frame,child) { var $x = ["Playing",2,frame,child]; $x.__enum__ = sample_player__$ClickToPlaySamplePlayer_PlayerState; return $x; };
sample_player__$ClickToPlaySamplePlayer_PlayerState.Finishing = function(frame) { var $x = ["Finishing",3,frame]; $x.__enum__ = sample_player__$ClickToPlaySamplePlayer_PlayerState; return $x; };
var tweenxcore_Easing = function() { };
tweenxcore_Easing.__name__ = ["tweenxcore","Easing"];
tweenxcore_Easing.linear = function(t) {
	return t;
};
tweenxcore_Easing.sineIn = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		return 1 - Math.cos(t * 1.5707963267948966);
	}
};
tweenxcore_Easing.sineOut = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		return Math.sin(t * 1.5707963267948966);
	}
};
tweenxcore_Easing.sineInOut = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		return -0.5 * (Math.cos(3.1415926535897932384626433832795 * t) - 1);
	}
};
tweenxcore_Easing.sineOutIn = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else if(t < 0.5) {
		return 0.5 * Math.sin(t * 2 * 1.5707963267948966);
	} else {
		return -0.5 * Math.cos((t * 2 - 1) * 1.5707963267948966) + 1;
	}
};
tweenxcore_Easing.quadIn = function(t) {
	return t * t;
};
tweenxcore_Easing.quadOut = function(t) {
	return -t * (t - 2);
};
tweenxcore_Easing.quadInOut = function(t) {
	if(t < 0.5) {
		return 2 * t * t;
	} else {
		return -2 * (--t * t) + 1;
	}
};
tweenxcore_Easing.quadOutIn = function(t) {
	if(t < 0.5) {
		t *= 2;
		return -0.5 * t * (t - 2);
	} else {
		t = t * 2 - 1;
		return 0.5 * t * t + 0.5;
	}
};
tweenxcore_Easing.cubicIn = function(t) {
	return t * t * t;
};
tweenxcore_Easing.cubicOut = function(t) {
	return --t * t * t + 1;
};
tweenxcore_Easing.cubicInOut = function(t) {
	t *= 2;
	if(t < 1) {
		return 0.5 * t * t * t;
	} else {
		t -= 2;
		return 0.5 * (t * t * t + 2);
	}
};
tweenxcore_Easing.cubicOutIn = function(t) {
	t = t * 2 - 1;
	return 0.5 * (t * t * t + 1);
};
tweenxcore_Easing.quartIn = function(t) {
	t *= t;
	return t * t;
};
tweenxcore_Easing.quartOut = function(t) {
	t = --t * t;
	return 1 - t * t;
};
tweenxcore_Easing.quartInOut = function(t) {
	t *= 2;
	if(t < 1) {
		t *= t;
		return 0.5 * t * t;
	} else {
		t -= 2;
		t = t * t;
		return -0.5 * (t * t - 2);
	}
};
tweenxcore_Easing.quartOutIn = function(t) {
	if(t < 0.5) {
		t = t * 2 - 1;
		t = t * t;
		return -0.5 * t * t + 0.5;
	} else {
		t = t * 2 - 1;
		t = t * t;
		return 0.5 * t * t + 0.5;
	}
};
tweenxcore_Easing.quintIn = function(t) {
	var tmp = t;
	t *= t;
	return tmp * t * t;
};
tweenxcore_Easing.quintOut = function(t) {
	var tmp = --t;
	t *= t;
	return tmp * t * t + 1;
};
tweenxcore_Easing.quintInOut = function(t) {
	t *= 2;
	if(t < 1) {
		var tmp = 0.5 * t;
		t *= t;
		return tmp * t * t;
	} else {
		t -= 2;
		var tmp1 = 0.5 * t;
		t *= t;
		return tmp1 * t * t + 1;
	}
};
tweenxcore_Easing.quintOutIn = function(t) {
	t = t * 2 - 1;
	var tmp = t;
	t *= t;
	return 0.5 * (tmp * t * t + 1);
};
tweenxcore_Easing.expoIn = function(t) {
	if(t == 0) {
		return 0;
	} else {
		return Math.exp(6.931471805599453 * (t - 1));
	}
};
tweenxcore_Easing.expoOut = function(t) {
	if(t == 1) {
		return 1;
	} else {
		return 1 - Math.exp(-6.9314718055994531 * t);
	}
};
tweenxcore_Easing.expoInOut = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		t *= 2;
		if(t < 1) {
			return 0.5 * Math.exp(6.931471805599453 * (t - 1));
		} else {
			return 0.5 * (2 - Math.exp(-6.9314718055994531 * (t - 1)));
		}
	}
};
tweenxcore_Easing.expoOutIn = function(t) {
	if(t < 0.5) {
		return 0.5 * (1 - Math.exp(-13.862943611198906 * t));
	} else if(t == 0.5) {
		return 0.5;
	} else {
		return 0.5 * (Math.exp(13.862943611198906 * (t - 1)) + 1);
	}
};
tweenxcore_Easing.circIn = function(t) {
	return 1 - Math.sqrt(1 - t * t);
};
tweenxcore_Easing.circOut = function(t) {
	return Math.sqrt(t * (2 - t));
};
tweenxcore_Easing.circInOut = function(t) {
	t *= 2;
	if(t < 1) {
		return -0.5 * (Math.sqrt(1 - t * t) - 1);
	} else {
		t -= 2;
		return 0.5 * (Math.sqrt(1 - t * t) + 1);
	}
};
tweenxcore_Easing.circOutIn = function(t) {
	if(t < 0.5) {
		t = t * 2 - 1;
		return 0.5 * Math.sqrt(1 - t * t);
	} else {
		t = t * 2 - 1;
		return -0.5 * (Math.sqrt(1 - t * t) - 1 - 1);
	}
};
tweenxcore_Easing.bounceIn = function(t) {
	t = 1 - t;
	if(t < 0.36363636363636365) {
		return 1 - 7.5625 * t * t;
	} else if(t < 0.72727272727272729) {
		t -= 0.54545454545454541;
		return 1 - (7.5625 * t * t + 0.75);
	} else if(t < 0.90909090909090906) {
		t -= 0.81818181818181823;
		return 1 - (7.5625 * t * t + 0.9375);
	} else {
		t -= 0.95454545454545459;
		return 1 - (7.5625 * t * t + 0.984375);
	}
};
tweenxcore_Easing.bounceOut = function(t) {
	if(t < 0.36363636363636365) {
		return 7.5625 * t * t;
	} else if(t < 0.72727272727272729) {
		t -= 0.54545454545454541;
		return 7.5625 * t * t + 0.75;
	} else if(t < 0.90909090909090906) {
		t -= 0.81818181818181823;
		return 7.5625 * t * t + 0.9375;
	} else {
		t -= 0.95454545454545459;
		return 7.5625 * t * t + 0.984375;
	}
};
tweenxcore_Easing.bounceInOut = function(t) {
	if(t < 0.5) {
		t = 1 - t * 2;
		if(t < 0.36363636363636365) {
			return (1 - 7.5625 * t * t) * 0.5;
		} else if(t < 0.72727272727272729) {
			t -= 0.54545454545454541;
			return (1 - (7.5625 * t * t + 0.75)) * 0.5;
		} else if(t < 0.90909090909090906) {
			t -= 0.81818181818181823;
			return (1 - (7.5625 * t * t + 0.9375)) * 0.5;
		} else {
			t -= 0.95454545454545459;
			return (1 - (7.5625 * t * t + 0.984375)) * 0.5;
		}
	} else {
		t = t * 2 - 1;
		if(t < 0.36363636363636365) {
			return 7.5625 * t * t * 0.5 + 0.5;
		} else if(t < 0.72727272727272729) {
			t -= 0.54545454545454541;
			return (7.5625 * t * t + 0.75) * 0.5 + 0.5;
		} else if(t < 0.90909090909090906) {
			t -= 0.81818181818181823;
			return (7.5625 * t * t + 0.9375) * 0.5 + 0.5;
		} else {
			t -= 0.95454545454545459;
			return (7.5625 * t * t + 0.984375) * 0.5 + 0.5;
		}
	}
};
tweenxcore_Easing.bounceOutIn = function(t) {
	if(t < 0.5) {
		t *= 2;
		if(t < 0.36363636363636365) {
			return 0.5 * (7.5625 * t * t);
		} else if(t < 0.72727272727272729) {
			t -= 0.54545454545454541;
			return 0.5 * (7.5625 * t * t + 0.75);
		} else if(t < 0.90909090909090906) {
			t -= 0.81818181818181823;
			return 0.5 * (7.5625 * t * t + 0.9375);
		} else {
			t -= 0.95454545454545459;
			return 0.5 * (7.5625 * t * t + 0.984375);
		}
	} else {
		t = 1 - (t * 2 - 1);
		if(t < 0.36363636363636365) {
			return 0.5 - 0.5 * (7.5625 * t * t) + 0.5;
		} else if(t < 0.72727272727272729) {
			t -= 0.54545454545454541;
			return 0.5 - 0.5 * (7.5625 * t * t + 0.75) + 0.5;
		} else if(t < 0.90909090909090906) {
			t -= 0.81818181818181823;
			return 0.5 - 0.5 * (7.5625 * t * t + 0.9375) + 0.5;
		} else {
			t -= 0.95454545454545459;
			return 0.5 - 0.5 * (7.5625 * t * t + 0.984375) + 0.5;
		}
	}
};
tweenxcore_Easing.backIn = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		return t * t * (2.70158 * t - 1.70158);
	}
};
tweenxcore_Easing.backOut = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		return --t * t * (2.70158 * t + 1.70158) + 1;
	}
};
tweenxcore_Easing.backInOut = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		t *= 2;
		if(t < 1) {
			return 0.5 * (t * t * (3.5949095 * t - 2.5949095));
		} else {
			t -= 2;
			return 0.5 * (t * t * (3.5949095 * t + 2.5949095) + 2);
		}
	}
};
tweenxcore_Easing.backOutIn = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else if(t < 0.5) {
		t = t * 2 - 1;
		return 0.5 * (t * t * (2.70158 * t + 1.70158) + 1);
	} else {
		t = t * 2 - 1;
		return 0.5 * t * t * (2.70158 * t - 1.70158) + 0.5;
	}
};
tweenxcore_Easing.elasticIn = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		return -(Math.exp(6.931471805599453 * --t) * Math.sin((t * 0.001 - 7.5e-005) * 6.2831853071795862 / 0.0003));
	}
};
tweenxcore_Easing.elasticOut = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		return Math.exp(-6.9314718055994531 * t) * Math.sin((t * 0.001 - 7.5e-005) * 6.2831853071795862 / 0.0003) + 1;
	}
};
tweenxcore_Easing.elasticInOut = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		t *= 2;
		if(t < 1) {
			return -0.5 * (Math.exp(6.931471805599453 * --t) * Math.sin((t * 0.001 - 7.5e-005) * 6.2831853071795862 / 0.0003));
		} else {
			return Math.exp(-6.9314718055994531 * --t) * Math.sin((t * 0.001 - 7.5e-005) * 6.2831853071795862 / 0.0003) * 0.5 + 1;
		}
	}
};
tweenxcore_Easing.elasticOutIn = function(t) {
	if(t < 0.5) {
		t *= 2;
		if(t == 0) {
			return 0;
		} else {
			return 0.5 * Math.exp(-6.9314718055994531 * t) * Math.sin((t * 0.001 - 7.5e-005) * 6.2831853071795862 / 0.0003) + 0.5;
		}
	} else if(t == 0.5) {
		return 0.5;
	} else if(t == 1) {
		return 1;
	} else {
		t = t * 2 - 1;
		return -(0.5 * Math.exp(6.931471805599453 * --t) * Math.sin((t * 0.001 - 7.5e-005) * 6.2831853071795862 / 0.0003)) + 0.5;
	}
};
tweenxcore_Easing.warpOut = function(t) {
	if(t <= 0) {
		return 0;
	} else {
		return 1;
	}
};
tweenxcore_Easing.warpIn = function(t) {
	if(t < 1) {
		return 0;
	} else {
		return 1;
	}
};
tweenxcore_Easing.warpInOut = function(t) {
	if(t < 0.5) {
		return 0;
	} else {
		return 1;
	}
};
tweenxcore_Easing.warpOutIn = function(t) {
	if(t <= 0) {
		return 0;
	} else if(t < 1) {
		return 0.5;
	} else {
		return 1;
	}
};
var tweenxcore_FloatTools = function() { };
tweenxcore_FloatTools.__name__ = ["tweenxcore","FloatTools"];
tweenxcore_FloatTools.revert = function(rate) {
	return 1 - rate;
};
tweenxcore_FloatTools.clamp = function(value,min,max) {
	if(max == null) {
		max = 1.0;
	}
	if(min == null) {
		min = 0.0;
	}
	if(value <= min) {
		return min;
	} else if(max <= value) {
		return max;
	} else {
		return value;
	}
};
tweenxcore_FloatTools.lerp = function(rate,from,to) {
	return from * (1 - rate) + to * rate;
};
tweenxcore_FloatTools.inverseLerp = function(value,from,to) {
	return (value - from) / (to - from);
};
tweenxcore_FloatTools.repeat = function(value,from,to) {
	if(to == null) {
		to = 1.0;
	}
	if(from == null) {
		from = 0.0;
	}
	var p = (value - from) / (to - from);
	return p - Math.floor(p);
};
tweenxcore_FloatTools.modulo = function(value,divisor) {
	return value - Math.floor(value / divisor) * divisor;
};
tweenxcore_FloatTools.spread = function(rate,scale) {
	return -scale * (1 - rate) + scale * rate;
};
tweenxcore_FloatTools.sinByRate = function(rate) {
	return Math.sin(rate * 2 * Math.PI);
};
tweenxcore_FloatTools.cosByRate = function(rate) {
	return Math.cos(rate * 2 * Math.PI);
};
tweenxcore_FloatTools.yoyo = function(rate,easing) {
	return easing((rate < 0.5?rate:1 - rate) * 2);
};
tweenxcore_FloatTools.zigzag = function(rate,easing) {
	if(rate < 0.5) {
		return easing(rate * 2);
	} else {
		return 1 - easing((rate - 0.5) * 2);
	}
};
tweenxcore_FloatTools.mixEasing = function(rate,easing1,easing2,easing2Strength) {
	if(easing2Strength == null) {
		easing2Strength = 0.5;
	}
	return easing1(rate) * (1 - easing2Strength) + easing2(rate) * easing2Strength;
};
tweenxcore_FloatTools.crossfadeEasing = function(rate,easing1,easing2,easing2StrengthEasing,easing2StrengthStart,easing2StrengthEnd) {
	if(easing2StrengthEnd == null) {
		easing2StrengthEnd = 1;
	}
	if(easing2StrengthStart == null) {
		easing2StrengthStart = 0;
	}
	var rate1 = easing2StrengthEasing(rate);
	var rate2 = easing2StrengthStart * (1 - rate1) + easing2StrengthEnd * rate1;
	return easing1(rate) * (1 - rate2) + easing2(rate) * rate2;
};
tweenxcore_FloatTools.connectEasing = function(time,easing1,easing2,switchTime,switchValue) {
	if(switchValue == null) {
		switchValue = 0.5;
	}
	if(switchTime == null) {
		switchTime = 0.5;
	}
	if(time < switchTime) {
		var rate = easing1(time / switchTime);
		return 0 * (1 - rate) + switchValue * rate;
	} else {
		var rate1 = easing2((time - switchTime) / (1 - switchTime));
		return switchValue * (1 - rate1) + rate1;
	}
};
tweenxcore_FloatTools.oneTwoEasing = function(time,easingOne,easingTwo,switchTime) {
	if(switchTime == null) {
		switchTime = 0.5;
	}
	if(time < switchTime) {
		return easingOne(time / switchTime);
	} else {
		return easingTwo((time - switchTime) / (1 - switchTime));
	}
};
tweenxcore_FloatTools.binarySearch = function(sortedValues,value,boundaryMode) {
	if(boundaryMode == null) {
		boundaryMode = 0;
	}
	var min = 0;
	var max = sortedValues.length;
	if(boundaryMode == 0) {
		while(true) {
			var next = ((max - min) / 2 | 0) + min;
			if(sortedValues[next] <= value) {
				min = next + 1;
			} else {
				max = next;
			}
			if(min == max) {
				break;
			}
		}
	} else {
		while(true) {
			var next1 = ((max - min) / 2 | 0) + min;
			if(sortedValues[next1] < value) {
				min = next1 + 1;
			} else {
				max = next1;
			}
			if(min == max) {
				break;
			}
		}
	}
	return min;
};
tweenxcore_FloatTools.polyline = function(rate,values) {
	if(values.length < 2) {
		throw new js__$Boot_HaxeError("points length must be more than 2");
	} else {
		var max = values.length - 1;
		var scaledRate = rate * max;
		var max1 = max - 1;
		var index = Math.floor(scaledRate <= 0?0:max1 <= scaledRate?max1:scaledRate);
		var innerRate = scaledRate - index;
		return values[index] * (1 - innerRate) + values[index + 1] * innerRate;
	}
};
tweenxcore_FloatTools.bezier2 = function(rate,from,control,to) {
	return (from * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + to * rate) * rate;
};
tweenxcore_FloatTools.bezier3 = function(rate,from,control1,control2,to) {
	var control = control1 * (1 - rate) + control2 * rate;
	return ((from * (1 - rate) + control1 * rate) * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + (control2 * (1 - rate) + to * rate) * rate) * rate;
};
tweenxcore_FloatTools.bezier = function(rate,values) {
	if(values.length < 2) {
		throw new js__$Boot_HaxeError("points length must be more than 2");
	} else if(values.length == 2) {
		return values[0] * (1 - rate) + values[1] * rate;
	} else if(values.length == 3) {
		var control = values[1];
		return (values[0] * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + values[2] * rate) * rate;
	} else {
		return tweenxcore_FloatTools._bezier(rate,values);
	}
};
tweenxcore_FloatTools._bezier = function(rate,values) {
	if(values.length == 4) {
		var control1 = values[1];
		var control2 = values[2];
		var control = control1 * (1 - rate) + control2 * rate;
		return ((values[0] * (1 - rate) + control1 * rate) * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + (control2 * (1 - rate) + values[3] * rate) * rate) * rate;
	}
	var _g = [];
	var _g2 = 0;
	var _g1 = values.length - 1;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(values[i] * (1 - rate) + values[i + 1] * rate);
	}
	return tweenxcore_FloatTools._bezier(rate,_g);
};
tweenxcore_FloatTools.uniformQuadraticBSpline = function(rate,values) {
	if(values.length < 2) {
		throw new js__$Boot_HaxeError("points length must be more than 2");
	} else if(values.length == 2) {
		return values[0] * (1 - rate) + values[1] * rate;
	} else {
		var max = values.length - 2;
		var scaledRate = rate * max;
		var max1 = max - 1;
		var index = Math.floor(scaledRate <= 0?0:max1 <= scaledRate?max1:scaledRate);
		var innerRate = scaledRate - index;
		var p0 = values[index];
		var p1 = values[index + 1];
		return innerRate * innerRate * (p0 / 2 - p1 + values[index + 2] / 2) + innerRate * (-p0 + p1) + p0 / 2 + p1 / 2;
	}
};
tweenxcore_FloatTools.frameToSecond = function(frame,fps) {
	return frame / fps;
};
tweenxcore_FloatTools.secondToFrame = function(second,fps) {
	return second * fps;
};
tweenxcore_FloatTools.degreeToRate = function(degree) {
	return degree / 360;
};
tweenxcore_FloatTools.rateToDegree = function(rate) {
	return rate * 360;
};
tweenxcore_FloatTools.radianToRate = function(radian) {
	return radian / (2 * Math.PI);
};
tweenxcore_FloatTools.rateToRadian = function(rate) {
	return rate * 2 * Math.PI;
};
tweenxcore_FloatTools.millisecondToBeat = function(millisecond,bpm) {
	return millisecond * bpm / 60000;
};
tweenxcore_FloatTools.beatToMillisecond = function(beat,bpm) {
	return beat * 60000 / bpm;
};
var tweenxcore_PointTools = function() { };
tweenxcore_PointTools.__name__ = ["tweenxcore","PointTools"];
var tweenxcore_MatrixTools = function() { };
tweenxcore_MatrixTools.__name__ = ["tweenxcore","MatrixTools"];
tweenxcore_MatrixTools.createSimilarityTransform = function(outputMatrix,fromX,fromY,toX,toY) {
	var dx = toX - fromX;
	var dy = toY - fromY;
	var rot = Math.atan2(dy,dx);
	var d = Math.sqrt(dx * dx + dy * dy);
	outputMatrix.a = d * Math.cos(rot);
	outputMatrix.b = d * Math.sin(rot);
	outputMatrix.c = -d * Math.sin(rot);
	outputMatrix.d = d * Math.cos(rot);
	outputMatrix.tx = fromX;
	outputMatrix.ty = fromY;
};
var tweenxcore_color_HsvColor = function(hue,saturation,value) {
	this.h = hue;
	this.s = saturation;
	this.v = value;
};
tweenxcore_color_HsvColor.__name__ = ["tweenxcore","color","HsvColor"];
tweenxcore_color_HsvColor.__interfaces__ = [tweenxcore_color_IColor];
tweenxcore_color_HsvColor.hsvToRgbInt = function(h,s,v) {
	h = (h - Math.floor(h)) * 6;
	var hi = Math.floor(h);
	if(s <= 0.0) {
		s = 0.0;
	} else if(1.0 <= s) {
		s = 1.0;
	} else {
		s = s;
	}
	if(v <= 0.0) {
		v = 0.0;
	} else if(1.0 <= v) {
		v = 1.0;
	} else {
		v = v;
	}
	var m = v * (1 - s);
	var f = h - hi;
	var r = 0.0;
	var g = 0.0;
	var b = 0.0;
	switch(hi) {
	case 0:
		r = v;
		g = v * (1 - s * (1 - f));
		b = m;
		break;
	case 1:
		r = v * (1 - s * f);
		g = v;
		b = m;
		break;
	case 2:
		r = m;
		g = v;
		b = v * (1 - s * (1 - f));
		break;
	case 3:
		r = m;
		g = v * (1 - s * f);
		b = v;
		break;
	case 4:
		r = v * (1 - s * (1 - f));
		g = m;
		b = v;
		break;
	case 5:
		r = v;
		g = m;
		b = v * (1 - s * f);
		break;
	}
	return (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0);
};
tweenxcore_color_HsvColor.of = function(color,hueIndex) {
	if(hueIndex == null) {
		hueIndex = 0;
	}
	return tweenxcore_color_HsvColor.fromRgb((color >> 16 & 255) / 255,(color >> 8 & 255) / 255,(color & 255) / 255,hueIndex);
};
tweenxcore_color_HsvColor.fromRgb = function(r,g,b,hueIndex) {
	if(hueIndex == null) {
		hueIndex = 0;
	}
	var max;
	var min;
	var diff;
	var h;
	if(r < g) {
		if(g < b) {
			max = b;
			var tmp = r - g;
			diff = b - r;
			h = (4 + tmp / diff) / 6;
		} else {
			max = g;
			if(r < b) {
				min = r;
			} else {
				min = b;
			}
			var tmp1 = b - r;
			diff = g - min;
			h = (2 + tmp1 / diff) / 6;
		}
	} else if(r < b) {
		max = b;
		var tmp2 = r - g;
		diff = b - g;
		h = (4 + tmp2 / diff) / 6;
	} else {
		max = r;
		if(g < b) {
			min = g;
		} else {
			min = b;
		}
		var tmp3 = g - b;
		diff = r - min;
		h = tmp3 / diff / 6;
	}
	if(h < 0) {
		++h;
	}
	var s = diff / max;
	if(isNaN(h)) {
		h = 0;
	}
	if(isNaN(s)) {
		s = 0;
	}
	return new tweenxcore_color_HsvColor(h + hueIndex,s,max);
};
tweenxcore_color_HsvColor.prototype = {
	getRed: function() {
		return tweenxcore_color_RgbColor.fromHsv(this.h,this.s,this.v).r;
	}
	,getGreen: function() {
		return tweenxcore_color_RgbColor.fromHsv(this.h,this.s,this.v).g;
	}
	,getBlue: function() {
		return tweenxcore_color_RgbColor.fromHsv(this.h,this.s,this.v).b;
	}
	,getHue: function() {
		return this.h;
	}
	,getSaturation: function() {
		return this.s;
	}
	,getBrightness: function() {
		return this.v;
	}
	,toRgb: function() {
		return tweenxcore_color_RgbColor.fromHsv(this.h,this.s,this.v);
	}
	,toHsv: function() {
		return new tweenxcore_color_HsvColor(this.h,this.s,this.v);
	}
	,toHsvWithAlpha: function(alpha) {
		return new tweenxcore_color_AhsvColor(alpha,this.h,this.s,this.v);
	}
	,toRgbWithAlpha: function(alpha) {
		var _this = tweenxcore_color_RgbColor.fromHsv(this.h,this.s,this.v);
		return new tweenxcore_color_ArgbColor(alpha,_this.r,_this.g,_this.b);
	}
	,toRgbInt: function() {
		return tweenxcore_color_HsvColor.hsvToRgbInt(this.h,this.s,this.v);
	}
	,toRgbHexString: function() {
		return StringTools.hex(tweenxcore_color_HsvColor.hsvToRgbInt(this.h,this.s,this.v),6);
	}
	,toRgbCssString: function() {
		var _this = tweenxcore_color_RgbColor.fromHsv(this.h,this.s,this.v);
		return "rgb(" + (_this.r * 255 | 0) + "," + (_this.g * 255 | 0) + "," + (_this.b * 255 | 0) + ")";
	}
	,__class__: tweenxcore_color_HsvColor
};
var tweenxcore_color_ITransparentColor = function() { };
tweenxcore_color_ITransparentColor.__name__ = ["tweenxcore","color","ITransparentColor"];
tweenxcore_color_ITransparentColor.__interfaces__ = [tweenxcore_color_IColor];
tweenxcore_color_ITransparentColor.prototype = {
	__class__: tweenxcore_color_ITransparentColor
};
var tweenxcore_color_AhsvColor = function(alpha,hue,saturation,value) {
	this.a = alpha;
	tweenxcore_color_HsvColor.call(this,hue,saturation,value);
};
tweenxcore_color_AhsvColor.__name__ = ["tweenxcore","color","AhsvColor"];
tweenxcore_color_AhsvColor.__interfaces__ = [tweenxcore_color_ITransparentColor];
tweenxcore_color_AhsvColor.ahsvToArgbInt = function(a,h,s,v) {
	return ((a <= 0.0?0.0:1.0 <= a?1.0:a) * 255 | 0) << 24 | tweenxcore_color_HsvColor.hsvToRgbInt(h,s,v);
};
tweenxcore_color_AhsvColor.of = function(color,hueIndex) {
	if(hueIndex == null) {
		hueIndex = 0;
	}
	var a = (color >>> 24 & 255) / 255;
	var color1 = color & 16777215;
	var _this = tweenxcore_color_HsvColor.fromRgb((color1 >> 16 & 255) / 255,(color1 >> 8 & 255) / 255,(color1 & 255) / 255,hueIndex);
	return new tweenxcore_color_AhsvColor(a,_this.h,_this.s,_this.v);
};
tweenxcore_color_AhsvColor.fromArgb = function(a,r,g,b,hueIndex) {
	if(hueIndex == null) {
		hueIndex = 0;
	}
	var _this = tweenxcore_color_HsvColor.fromRgb(r,g,b,hueIndex);
	return new tweenxcore_color_AhsvColor(a,_this.h,_this.s,_this.v);
};
tweenxcore_color_AhsvColor.__super__ = tweenxcore_color_HsvColor;
tweenxcore_color_AhsvColor.prototype = $extend(tweenxcore_color_HsvColor.prototype,{
	getAlpha: function() {
		return this.a;
	}
	,toArgb: function() {
		var a = this.a;
		var _this = tweenxcore_color_RgbColor.fromHsv(this.h,this.s,this.v);
		return new tweenxcore_color_ArgbColor(a,_this.r,_this.g,_this.b);
	}
	,toAhsv: function() {
		return new tweenxcore_color_AhsvColor(this.a,this.h,this.s,this.v);
	}
	,toArgbInt: function() {
		var a = this.a;
		return ((a <= 0.0?0.0:1.0 <= a?1.0:a) * 255 | 0) << 24 | tweenxcore_color_HsvColor.hsvToRgbInt(this.h,this.s,this.v);
	}
	,toArgbHexString: function() {
		var a = this.a;
		return StringTools.hex(((a <= 0.0?0.0:1.0 <= a?1.0:a) * 255 | 0) << 24 | tweenxcore_color_HsvColor.hsvToRgbInt(this.h,this.s,this.v),8);
	}
	,toRgbaCssString: function() {
		var a = this.a;
		var _this = tweenxcore_color_RgbColor.fromHsv(this.h,this.s,this.v);
		var _this1 = new tweenxcore_color_ArgbColor(a,_this.r,_this.g,_this.b);
		return "rgba(" + (_this1.r * 255 | 0) + "," + (_this1.g * 255 | 0) + "," + (_this1.b * 255 | 0) + "," + _this1.a + ")";
	}
	,__class__: tweenxcore_color_AhsvColor
});
var tweenxcore_color_ArgbColor = function(alpha,red,green,blue) {
	this.a = alpha;
	tweenxcore_color_RgbColor.call(this,red,green,blue);
};
tweenxcore_color_ArgbColor.__name__ = ["tweenxcore","color","ArgbColor"];
tweenxcore_color_ArgbColor.__interfaces__ = [tweenxcore_color_ITransparentColor];
tweenxcore_color_ArgbColor.argbToInt = function(a,r,g,b) {
	var tmp = ((a <= 0.0?0.0:1.0 <= a?1.0:a) * 255 | 0) << 24;
	var r1 = r;
	var g1 = g;
	var b1 = b;
	if(r <= 0.0) {
		r1 = 0.0;
	} else if(1.0 <= r) {
		r1 = 1.0;
	} else {
		r1 = r;
	}
	if(g <= 0.0) {
		g1 = 0.0;
	} else if(1.0 <= g) {
		g1 = 1.0;
	} else {
		g1 = g;
	}
	if(b <= 0.0) {
		b1 = 0.0;
	} else if(1.0 <= b) {
		b1 = 1.0;
	} else {
		b1 = b;
	}
	return tmp | ((r1 * 255 | 0) << 16 | (g1 * 255 | 0) << 8 | (b1 * 255 | 0));
};
tweenxcore_color_ArgbColor.of = function(color) {
	return new tweenxcore_color_ArgbColor((color >>> 24 & 255) / 255,(color >> 16 & 255) / 255,(color >> 8 & 255) / 255,(color & 255) / 255);
};
tweenxcore_color_ArgbColor.fromAhsv = function(a,h,s,v,hueIndex) {
	if(hueIndex == null) {
		hueIndex = 0;
	}
	var _this = tweenxcore_color_RgbColor.fromHsv(h,s,v);
	return new tweenxcore_color_ArgbColor(a,_this.r,_this.g,_this.b);
};
tweenxcore_color_ArgbColor.__super__ = tweenxcore_color_RgbColor;
tweenxcore_color_ArgbColor.prototype = $extend(tweenxcore_color_RgbColor.prototype,{
	getAlpha: function() {
		return this.a;
	}
	,toArgb: function() {
		return new tweenxcore_color_ArgbColor(this.a,this.r,this.g,this.b);
	}
	,toAhsv: function() {
		var a = this.a;
		var _this = tweenxcore_color_HsvColor.fromRgb(this.r,this.g,this.b,0);
		return new tweenxcore_color_AhsvColor(a,_this.h,_this.s,_this.v);
	}
	,toArgbInt: function() {
		var a = this.a;
		var r = this.r;
		var g = this.g;
		var b = this.b;
		var tmp = ((a <= 0.0?0.0:1.0 <= a?1.0:a) * 255 | 0) << 24;
		var r1 = r;
		var g1 = g;
		var b1 = b;
		if(r <= 0.0) {
			r1 = 0.0;
		} else if(1.0 <= r) {
			r1 = 1.0;
		} else {
			r1 = r;
		}
		if(g <= 0.0) {
			g1 = 0.0;
		} else if(1.0 <= g) {
			g1 = 1.0;
		} else {
			g1 = g;
		}
		if(b <= 0.0) {
			b1 = 0.0;
		} else if(1.0 <= b) {
			b1 = 1.0;
		} else {
			b1 = b;
		}
		return tmp | ((r1 * 255 | 0) << 16 | (g1 * 255 | 0) << 8 | (b1 * 255 | 0));
	}
	,toArgbHexString: function() {
		var a = this.a;
		var r = this.r;
		var g = this.g;
		var b = this.b;
		var tmp = ((a <= 0.0?0.0:1.0 <= a?1.0:a) * 255 | 0) << 24;
		var r1 = r;
		var g1 = g;
		var b1 = b;
		if(r <= 0.0) {
			r1 = 0.0;
		} else if(1.0 <= r) {
			r1 = 1.0;
		} else {
			r1 = r;
		}
		if(g <= 0.0) {
			g1 = 0.0;
		} else if(1.0 <= g) {
			g1 = 1.0;
		} else {
			g1 = g;
		}
		if(b <= 0.0) {
			b1 = 0.0;
		} else if(1.0 <= b) {
			b1 = 1.0;
		} else {
			b1 = b;
		}
		return StringTools.hex(tmp | ((r1 * 255 | 0) << 16 | (g1 * 255 | 0) << 8 | (b1 * 255 | 0)),8);
	}
	,toRgbaCssString: function() {
		return "rgba(" + (this.r * 255 | 0) + "," + (this.g * 255 | 0) + "," + (this.b * 255 | 0) + "," + this.a + ")";
	}
	,__class__: tweenxcore_color_ArgbColor
});
var tweenxcore_geom_PolarPoint = function(distance,angle) {
	this.distance = distance;
	this.angle = angle;
};
tweenxcore_geom_PolarPoint.__name__ = ["tweenxcore","geom","PolarPoint"];
tweenxcore_geom_PolarPoint.fromXy = function(x,y) {
	return new tweenxcore_geom_PolarPoint(Math.sqrt(x * x + y * y),Math.atan2(y,x));
};
tweenxcore_geom_PolarPoint.fromPoint = function(point) {
	var x = point.x;
	var y = point.y;
	return new tweenxcore_geom_PolarPoint(Math.sqrt(x * x + y * y),Math.atan2(y,x));
};
tweenxcore_geom_PolarPoint.prototype = {
	get_x: function() {
		return Math.cos(this.angle * 2 * Math.PI) * this.distance;
	}
	,get_y: function() {
		return Math.sin(this.angle * 2 * Math.PI) * this.distance;
	}
	,setXy: function(x,y) {
		this.distance = Math.sqrt(x * x + y * y);
		this.angle = Math.atan2(y,x);
	}
	,setPoint: function(point) {
		this.distance = Math.sqrt(this.get_x() * this.get_x() + this.get_y() * this.get_y());
		this.angle = Math.atan2(this.get_y(),this.get_x());
	}
	,clone: function(point) {
		return new tweenxcore_geom_PolarPoint(this.distance,this.angle);
	}
	,__class__: tweenxcore_geom_PolarPoint
};
var tweenxcore_structure_FloatChange = function(previousValue,currentValue) {
	this.previous = previousValue;
	this.current = currentValue;
};
tweenxcore_structure_FloatChange.__name__ = ["tweenxcore","structure","FloatChange"];
tweenxcore_structure_FloatChange.prototype = {
	direction: function() {
		if(this.previous < this.current) {
			return 1;
		} else if(this.current < this.previous) {
			return -1;
		} else {
			return 0;
		}
	}
	,mapFloatChange: function(func) {
		return new tweenxcore_structure_FloatChange(func(this.previous),func(this.current));
	}
	,isCrossOver: function(threshold,boundaryMode) {
		if(boundaryMode == null) {
			boundaryMode = 1;
		}
		switch(boundaryMode) {
		case 0:
			if(!(this.previous < threshold && threshold <= this.current)) {
				if(this.current < threshold) {
					return threshold <= this.previous;
				} else {
					return false;
				}
			} else {
				return true;
			}
			break;
		case 1:
			if(!(this.previous <= threshold && threshold < this.current)) {
				if(this.current <= threshold) {
					return threshold < this.previous;
				} else {
					return false;
				}
			} else {
				return true;
			}
			break;
		}
	}
	,handlePart: function(from,to,updatePart) {
		if((from < this.previous && this.current < to || from < this.current && this.previous < to || to < this.previous && this.current < from || to < this.current && this.previous < from) && this.previous != this.current) {
			var value = (this.previous - from) / (to - from);
			var tmp = value <= 0.0?0.0:1.0 <= value?1.0:value;
			var value1 = (this.current - from) / (to - from);
			updatePart(new tweenxcore_structure_FloatChangePart(tmp,value1 <= 0.0?0.0:1.0 <= value1?1.0:value1));
		}
	}
	,handleRepeatPart: function(firstPartFrom,firstPartTo,repeatLimit,updateRepeatPart) {
		if(firstPartFrom != firstPartTo) {
			var p = (this.previous - firstPartFrom) / (firstPartTo - firstPartFrom);
			var c = (this.current - firstPartFrom) / (firstPartTo - firstPartFrom);
			if(0 < c && p < repeatLimit || 0 < p && c < repeatLimit) {
				if(p <= 0) {
					p = 0;
				} else if(repeatLimit <= p) {
					p = repeatLimit;
				} else {
					p = p;
				}
				if(c <= 0) {
					c = 0;
				} else if(repeatLimit <= c) {
					c = repeatLimit;
				} else {
					c = c;
				}
				var pCount = p | 0;
				var cCount = c | 0;
				var hasNext = true;
				if(p < c) {
					while(true) {
						if(cCount == pCount) {
							var previousValue = p - pCount;
							var currentValue = c - pCount;
							hasNext = false;
							if(previousValue != currentValue) {
								updateRepeatPart(new tweenxcore_structure_FloatChangeRepeatPart(previousValue,currentValue,pCount,repeatLimit,false));
							}
						} else {
							hasNext = pCount + 1 != c;
							var previousValue1 = p - pCount;
							if(previousValue1 != 1) {
								updateRepeatPart(new tweenxcore_structure_FloatChangeRepeatPart(previousValue1,1,pCount,repeatLimit,hasNext));
							}
						}
						p = ++pCount;
						if(!hasNext) {
							break;
						}
					}
				} else {
					while(true) {
						if(pCount == cCount) {
							var previousValue2 = p - pCount;
							var currentValue1 = c - pCount;
							hasNext = false;
							if(previousValue2 != currentValue1) {
								updateRepeatPart(new tweenxcore_structure_FloatChangeRepeatPart(previousValue2,currentValue1,pCount,repeatLimit,false));
							}
						} else {
							hasNext = pCount - 1 != c;
							var previousValue3 = p - pCount;
							if(previousValue3 != 0) {
								updateRepeatPart(new tweenxcore_structure_FloatChangeRepeatPart(previousValue3,0,pCount,repeatLimit,hasNext));
							}
						}
						p = pCount;
						--pCount;
						if(!hasNext) {
							break;
						}
					}
				}
			}
		}
	}
	,handleTimelinePart: function(timelineFrom,timelineTo,updatePartTimeline) {
		if(timelineFrom != timelineTo) {
			var p = (this.previous - timelineFrom) / (timelineTo - timelineFrom);
			var c = (this.current - timelineFrom) / (timelineTo - timelineFrom);
			if(0 < p && c < 1 || 0 < c && p < 1) {
				if(p <= 0) {
					p = 0;
				} else if(1 <= p) {
					p = 1;
				} else {
					p = p;
				}
				if(c <= 0) {
					c = 0;
				} else if(1 <= c) {
					c = 1;
				} else {
					c = c;
				}
				if(updatePartTimeline.dataArray.length == 0) {
					throw new js__$Boot_HaxeError("timeline is not initialized");
				}
				var sortedValues = updatePartTimeline.weightArray;
				var value = p * updatePartTimeline.totalWeight;
				var min = 0;
				var max = sortedValues.length;
				while(true) {
					var next = ((max - min) / 2 | 0) + min;
					if(sortedValues[next] < value) {
						min = next + 1;
					} else {
						max = next;
					}
					if(min == max) {
						break;
					}
				}
				var searchResult = min;
				var baseWeight = searchResult == 0?0:updatePartTimeline.weightArray[searchResult - 1] / updatePartTimeline.totalWeight;
				var nextWeight = searchResult == updatePartTimeline.dataArray.length - 1?1:updatePartTimeline.weightArray[searchResult] / updatePartTimeline.totalWeight;
				var pResult_rangeLeft = baseWeight;
				var pResult_rangeRight = nextWeight;
				if(updatePartTimeline.dataArray.length == 0) {
					throw new js__$Boot_HaxeError("timeline is not initialized");
				}
				var sortedValues1 = updatePartTimeline.weightArray;
				var value1 = c * updatePartTimeline.totalWeight;
				var min1 = 0;
				var max1 = sortedValues1.length;
				while(true) {
					var next1 = ((max1 - min1) / 2 | 0) + min1;
					if(sortedValues1[next1] < value1) {
						min1 = next1 + 1;
					} else {
						max1 = next1;
					}
					if(min1 == max1) {
						break;
					}
				}
				var searchResult1 = min1;
				var baseWeight1 = searchResult1 == 0?0:updatePartTimeline.weightArray[searchResult1 - 1] / updatePartTimeline.totalWeight;
				var nextWeight1 = searchResult1 == updatePartTimeline.dataArray.length - 1?1:updatePartTimeline.weightArray[searchResult1] / updatePartTimeline.totalWeight;
				var cResult_rangeLeft = baseWeight1;
				var cResult_rangeRight = nextWeight1;
				var pCount = searchResult;
				var pRate = (p - pResult_rangeLeft) / (pResult_rangeRight - pResult_rangeLeft);
				var cRate = (c - cResult_rangeLeft) / (cResult_rangeRight - cResult_rangeLeft);
				var hasNext = false;
				if(p < c) {
					while(true) {
						if(pCount == searchResult1) {
							hasNext = false;
							var part = new tweenxcore_structure_FloatChangeTimelinePart(pRate,cRate,pCount,pCount == 0?0.0:updatePartTimeline.weightArray[pCount - 1] / updatePartTimeline.totalWeight,pCount == updatePartTimeline.dataArray.length?1.0:updatePartTimeline.weightArray[pCount] / updatePartTimeline.totalWeight,false);
							if(updatePartTimeline.dataArray.length == 0) {
								throw new js__$Boot_HaxeError("timeline is not initialized");
							}
							updatePartTimeline.dataArray[pCount](part);
						} else {
							if(pCount + 1 == searchResult1) {
								hasNext = cRate != 0;
							} else {
								hasNext = true;
							}
							var part1 = new tweenxcore_structure_FloatChangeTimelinePart(pRate,1,pCount,pCount == 0?0.0:updatePartTimeline.weightArray[pCount - 1] / updatePartTimeline.totalWeight,pCount == updatePartTimeline.dataArray.length?1.0:updatePartTimeline.weightArray[pCount] / updatePartTimeline.totalWeight,hasNext);
							if(updatePartTimeline.dataArray.length == 0) {
								throw new js__$Boot_HaxeError("timeline is not initialized");
							}
							updatePartTimeline.dataArray[pCount](part1);
						}
						pRate = 0;
						++pCount;
						if(!hasNext) {
							break;
						}
					}
				} else {
					while(true) {
						if(pCount == searchResult1) {
							hasNext = false;
							var part2 = new tweenxcore_structure_FloatChangeTimelinePart(pRate,cRate,pCount,pCount == 0?0.0:updatePartTimeline.weightArray[pCount - 1] / updatePartTimeline.totalWeight,pCount == updatePartTimeline.dataArray.length?1.0:updatePartTimeline.weightArray[pCount] / updatePartTimeline.totalWeight,false);
							if(updatePartTimeline.dataArray.length == 0) {
								throw new js__$Boot_HaxeError("timeline is not initialized");
							}
							updatePartTimeline.dataArray[pCount](part2);
						} else {
							if(pCount - 1 == searchResult1) {
								hasNext = cRate != 1;
							} else {
								hasNext = true;
							}
							var part3 = new tweenxcore_structure_FloatChangeTimelinePart(pRate,0,pCount,pCount == 0?0.0:updatePartTimeline.weightArray[pCount - 1] / updatePartTimeline.totalWeight,pCount == updatePartTimeline.dataArray.length?1.0:updatePartTimeline.weightArray[pCount] / updatePartTimeline.totalWeight,hasNext);
							if(updatePartTimeline.dataArray.length == 0) {
								throw new js__$Boot_HaxeError("timeline is not initialized");
							}
							updatePartTimeline.dataArray[pCount](part3);
						}
						pRate = 1;
						--pCount;
						if(!hasNext) {
							break;
						}
					}
				}
			}
		}
	}
	,__class__: tweenxcore_structure_FloatChange
};
var tweenxcore_structure_FloatChangePart = function(previousValue,currentValue) {
	tweenxcore_structure_FloatChange.call(this,previousValue,currentValue);
};
tweenxcore_structure_FloatChangePart.__name__ = ["tweenxcore","structure","FloatChangePart"];
tweenxcore_structure_FloatChangePart.__super__ = tweenxcore_structure_FloatChange;
tweenxcore_structure_FloatChangePart.prototype = $extend(tweenxcore_structure_FloatChange.prototype,{
	isEntrance: function() {
		if(!(this.previous <= 0 && 0 < this.current)) {
			if(this.current < 1.0) {
				return 1.0 <= this.previous;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isExit: function() {
		if(!(this.current <= 0.0 && 0.0 < this.previous)) {
			if(this.previous < 1.0) {
				return 1.0 <= this.current;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: tweenxcore_structure_FloatChangePart
});
var tweenxcore_structure_FloatChangeRepeatPart = function(previousValue,currentValue,repeatIndex,repeatLength,isMinerChange) {
	tweenxcore_structure_FloatChangePart.call(this,previousValue,currentValue);
	this.repeatIndex = repeatIndex;
	this.repeatLength = repeatLength;
	this.isMinerChange = isMinerChange;
};
tweenxcore_structure_FloatChangeRepeatPart.__name__ = ["tweenxcore","structure","FloatChangeRepeatPart"];
tweenxcore_structure_FloatChangeRepeatPart.__super__ = tweenxcore_structure_FloatChangePart;
tweenxcore_structure_FloatChangeRepeatPart.prototype = $extend(tweenxcore_structure_FloatChangePart.prototype,{
	isFirstEntrance: function() {
		if(!(this.repeatIndex == 0 && this.previous <= 0 && 0 < this.current)) {
			if(this.repeatIndex == this.repeatLength - 1 && this.current < 1.0) {
				return 1.0 <= this.previous;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isLastExit: function() {
		if(!(this.repeatIndex == 0 && this.current <= 0.0 && 0.0 < this.previous)) {
			if(this.repeatIndex == this.repeatLength - 1 && this.previous < 1.0) {
				return 1.0 <= this.current;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: tweenxcore_structure_FloatChangeRepeatPart
});
var tweenxcore_structure_FloatChangeTimelinePart = function(previousValue,currentValue,index,rangeLeft,rangeRight,isMinerChange) {
	tweenxcore_structure_FloatChangePart.call(this,previousValue,currentValue);
	this.index = index;
	this.rangeLeft = rangeLeft;
	this.rangeRight = rangeRight;
};
tweenxcore_structure_FloatChangeTimelinePart.__name__ = ["tweenxcore","structure","FloatChangeTimelinePart"];
tweenxcore_structure_FloatChangeTimelinePart.__super__ = tweenxcore_structure_FloatChangePart;
tweenxcore_structure_FloatChangeTimelinePart.prototype = $extend(tweenxcore_structure_FloatChangePart.prototype,{
	__class__: tweenxcore_structure_FloatChangeTimelinePart
});
var tweenxcore_structure_Timeline = function() {
	this.dataArray = [];
	this.weightArray = [];
	this.totalWeight = 0;
};
tweenxcore_structure_Timeline.__name__ = ["tweenxcore","structure","Timeline"];
tweenxcore_structure_Timeline.prototype = {
	get_length: function() {
		return this.dataArray.length;
	}
	,add: function(data,weight) {
		if(weight == null) {
			weight = 1.0;
		}
		if(weight <= 0) {
			throw new js__$Boot_HaxeError("weight must be positive number");
		}
		if(this.dataArray.length == 0) {
			this.totalWeight = weight;
		} else {
			this.weightArray.push(this.totalWeight);
			this.totalWeight += weight;
		}
		this.dataArray.push(data);
		return this;
	}
	,search: function(rate,boundaryMode) {
		if(boundaryMode == null) {
			boundaryMode = 1;
		}
		if(this.dataArray.length == 0) {
			throw new js__$Boot_HaxeError("timeline is not initialized");
		}
		var sortedValues = this.weightArray;
		var value = rate * this.totalWeight;
		var min = 0;
		var max = sortedValues.length;
		if(boundaryMode == 0) {
			while(true) {
				var next = ((max - min) / 2 | 0) + min;
				if(sortedValues[next] <= value) {
					min = next + 1;
				} else {
					max = next;
				}
				if(min == max) {
					break;
				}
			}
		} else {
			while(true) {
				var next1 = ((max - min) / 2 | 0) + min;
				if(sortedValues[next1] < value) {
					min = next1 + 1;
				} else {
					max = next1;
				}
				if(min == max) {
					break;
				}
			}
		}
		var searchResult = min;
		return new tweenxcore_structure_TimelineSearchResult(this.dataArray[searchResult],searchResult,searchResult == 0?0:this.weightArray[searchResult - 1] / this.totalWeight,searchResult == this.dataArray.length - 1?1:this.weightArray[searchResult] / this.totalWeight);
	}
	,dataAt: function(index) {
		if(this.dataArray.length == 0) {
			throw new js__$Boot_HaxeError("timeline is not initialized");
		}
		return this.dataArray[index];
	}
	,rangeLeft: function(index) {
		if(index == 0) {
			return 0.0;
		}
		return this.weightArray[index - 1] / this.totalWeight;
	}
	,rangeRight: function(index) {
		if(index == this.dataArray.length) {
			return 1.0;
		}
		return this.weightArray[index] / this.totalWeight;
	}
	,__class__: tweenxcore_structure_Timeline
};
var tweenxcore_structure_TimelineSearchResult = function(data,index,rangeLeft,rangeRight) {
	this.data = data;
	this.index = index;
	this.rangeLeft = rangeLeft;
	this.rangeRight = rangeRight;
};
tweenxcore_structure_TimelineSearchResult.__name__ = ["tweenxcore","structure","TimelineSearchResult"];
tweenxcore_structure_TimelineSearchResult.prototype = {
	innerRate: function(rate) {
		var from = this.rangeLeft;
		return (rate - from) / (this.rangeRight - from);
	}
	,__class__: tweenxcore_structure_TimelineSearchResult
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
BezierSample.TOTAL_FRAME = 60;
CompositeSample.TOTAL_FRAME = 40;
ConnectSample.TOTAL_FRAME = 40;
CrossOverSample.TOTAL_FRAME = 60;
CrossfadeSample.TOTAL_FRAME = 40;
CustomEasingSample.TOTAL_FRAME = 180;
EasingSample.TOTAL_FRAME = 20;
EasingVisualizeSample.MOTION_END = 240;
EasingVisualizeSample.CELL_SIZE = 20;
_$EasingVisualizeSample_Chart.H = 60;
_$EasingVisualizeSample_Chart.W = 80;
EntranceExitSample.TOTAL_FRAME = 60;
FloatChangePartSample.TOTAL_FRAME = 60;
HsvSample.TOTAL_FRAME = 40;
ImageSample.TOTAL_FRAME = 1000;
_$ImageSample_FaceImage.WIDTH = 96;
_$ImageSample_FaceImage.HEIGHT = 96;
MatrixSample.TOTAL_FRAME = 40;
MixSample.TOTAL_FRAME = 40;
MouseSample.TOTAL_FRAME = 16777215;
OneTwoSample.TOTAL_FRAME = 40;
PolarSample.TOTAL_FRAME = 40;
RepeatSample.TOTAL_FRAME = 140;
SimplestSample.TOTAL_FRAME = 20;
Style.SQUARE_SIZE = 15;
Style.START_FRAME = 15;
Style.FINISH_FRAME = 10;
Style.GRID_SCALE = 15;
Style.GRID_COLOR = new tweenxcore_color_RgbColor(0.94509803921568625,0.94509803921568625,0.93725490196078431);
Style.THEME_COLOR = new tweenxcore_color_RgbColor(0.30588235294117649,0.85490196078431369,0.88235294117647056);
Style.DARKEN_THEME_COLOR = new tweenxcore_color_RgbColor(0.054901960784313725,0.60392156862745094,0.69411764705882351);
Style.BUTTON_SIZE = 33;
Style.DELAY_FRAME = 60;
TimelinePartSample.TOTAL_FRAME = 80;
XySample.TOTAL_FRAME = 40;
YoyoSample.TOTAL_FRAME = 40;
ZigzagSample.TOTAL_FRAME = 40;
js_Boot.__toStr = { }.toString;
sample_Square.SIZE = 30;
tweenxcore_Easing.PI = 3.1415926535897932384626433832795;
tweenxcore_Easing.PI_H = 1.5707963267948966;
tweenxcore_Easing.LN_2 = 0.6931471805599453;
tweenxcore_Easing.LN_2_10 = 6.931471805599453;
tweenxcore_Easing.overshoot = 1.70158;
tweenxcore_Easing.amplitude = 1;
tweenxcore_Easing.period = 0.0003;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
